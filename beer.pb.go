// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beer.proto

package beerproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CultureBaseForm int32

const (
	CultureBaseForm_NULL_CultureBaseForm CultureBaseForm = 0
	// liquid
	CultureBaseForm_LIQUID CultureBaseForm = 1
	// dry
	CultureBaseForm_DRY CultureBaseForm = 2
	// slant
	CultureBaseForm_SLANT CultureBaseForm = 3
	// culture
	CultureBaseForm_CULTURE CultureBaseForm = 4
	// dregs
	CultureBaseForm_DREGS CultureBaseForm = 5
)

var CultureBaseForm_name = map[int32]string{
	0: "NULL_CultureBaseForm",
	1: "LIQUID",
	2: "DRY",
	3: "SLANT",
	4: "CULTURE",
	5: "DREGS",
}

var CultureBaseForm_value = map[string]int32{
	"NULL_CultureBaseForm": 0,
	"LIQUID":               1,
	"DRY":                  2,
	"SLANT":                3,
	"CULTURE":              4,
	"DREGS":                5,
}

func (x CultureBaseForm) String() string {
	return proto.EnumName(CultureBaseForm_name, int32(x))
}

func (CultureBaseForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{0}
}

type CultureBaseType int32

const (
	CultureBaseType_NULL_CultureBaseType CultureBaseType = 0
	// ale
	CultureBaseType_ALE CultureBaseType = 1
	// bacteria
	CultureBaseType_BACTERIA CultureBaseType = 2
	// brett
	CultureBaseType_BRETT CultureBaseType = 3
	// champagne
	CultureBaseType_CHAMPAGNE CultureBaseType = 4
	// kveik
	CultureBaseType_KVEIK CultureBaseType = 5
	// lacto
	CultureBaseType_LACTO CultureBaseType = 6
	// lager
	CultureBaseType_LAGER CultureBaseType = 7
	// malolactic
	CultureBaseType_MALOLACTIC CultureBaseType = 8
	// mixed-culture
	CultureBaseType_MIXED_CULTURE CultureBaseType = 9
	// other
	CultureBaseType_OTHER_CultureBaseType CultureBaseType = 10
	// pedio
	CultureBaseType_PEDIO CultureBaseType = 11
	// spontaneous
	CultureBaseType_SPONTANEOUS CultureBaseType = 12
	// wine
	CultureBaseType_WINE CultureBaseType = 13
)

var CultureBaseType_name = map[int32]string{
	0:  "NULL_CultureBaseType",
	1:  "ALE",
	2:  "BACTERIA",
	3:  "BRETT",
	4:  "CHAMPAGNE",
	5:  "KVEIK",
	6:  "LACTO",
	7:  "LAGER",
	8:  "MALOLACTIC",
	9:  "MIXED_CULTURE",
	10: "OTHER_CultureBaseType",
	11: "PEDIO",
	12: "SPONTANEOUS",
	13: "WINE",
}

var CultureBaseType_value = map[string]int32{
	"NULL_CultureBaseType":  0,
	"ALE":                   1,
	"BACTERIA":              2,
	"BRETT":                 3,
	"CHAMPAGNE":             4,
	"KVEIK":                 5,
	"LACTO":                 6,
	"LAGER":                 7,
	"MALOLACTIC":            8,
	"MIXED_CULTURE":         9,
	"OTHER_CultureBaseType": 10,
	"PEDIO":                 11,
	"SPONTANEOUS":           12,
	"WINE":                  13,
}

func (x CultureBaseType) String() string {
	return proto.EnumName(CultureBaseType_name, int32(x))
}

func (CultureBaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{1}
}

type MiscellaneousBaseType int32

const (
	MiscellaneousBaseType_NULL MiscellaneousBaseType = 0
	// spice
	MiscellaneousBaseType_SPICE MiscellaneousBaseType = 1
	// fining
	MiscellaneousBaseType_FINING MiscellaneousBaseType = 2
	// water agent
	MiscellaneousBaseType_WATER_AGENT MiscellaneousBaseType = 3
	// herb
	MiscellaneousBaseType_HERB MiscellaneousBaseType = 4
	// flavor
	MiscellaneousBaseType_FLAVOR MiscellaneousBaseType = 5
	// wood
	MiscellaneousBaseType_WOOD MiscellaneousBaseType = 6
	// other
	MiscellaneousBaseType_OTHER MiscellaneousBaseType = 7
)

var MiscellaneousBaseType_name = map[int32]string{
	0: "NULL",
	1: "SPICE",
	2: "FINING",
	3: "WATER_AGENT",
	4: "HERB",
	5: "FLAVOR",
	6: "WOOD",
	7: "OTHER",
}

var MiscellaneousBaseType_value = map[string]int32{
	"NULL":        0,
	"SPICE":       1,
	"FINING":      2,
	"WATER_AGENT": 3,
	"HERB":        4,
	"FLAVOR":      5,
	"WOOD":        6,
	"OTHER":       7,
}

func (x MiscellaneousBaseType) String() string {
	return proto.EnumName(MiscellaneousBaseType_name, int32(x))
}

func (MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{2}
}

type FermentableBaseType int32

const (
	FermentableBaseType_NULL_FermentableBaseType FermentableBaseType = 0
	// dry extract
	FermentableBaseType_DRY_EXTRACT FermentableBaseType = 1
	// extract
	FermentableBaseType_EXTRACT FermentableBaseType = 2
	// grain
	FermentableBaseType_GRAIN FermentableBaseType = 3
	// sugar
	FermentableBaseType_SUGAR FermentableBaseType = 4
	// fruit
	FermentableBaseType_FRUIT FermentableBaseType = 5
	// juice
	FermentableBaseType_JUICE FermentableBaseType = 6
	// honey
	FermentableBaseType_HONEY FermentableBaseType = 7
	// other
	FermentableBaseType_OTHER_FermentableBaseType FermentableBaseType = 8
)

var FermentableBaseType_name = map[int32]string{
	0: "NULL_FermentableBaseType",
	1: "DRY_EXTRACT",
	2: "EXTRACT",
	3: "GRAIN",
	4: "SUGAR",
	5: "FRUIT",
	6: "JUICE",
	7: "HONEY",
	8: "OTHER_FermentableBaseType",
}

var FermentableBaseType_value = map[string]int32{
	"NULL_FermentableBaseType":  0,
	"DRY_EXTRACT":               1,
	"EXTRACT":                   2,
	"GRAIN":                     3,
	"SUGAR":                     4,
	"FRUIT":                     5,
	"JUICE":                     6,
	"HONEY":                     7,
	"OTHER_FermentableBaseType": 8,
}

func (x FermentableBaseType) String() string {
	return proto.EnumName(FermentableBaseType_name, int32(x))
}

func (FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{3}
}

type GrainGroup int32

const (
	GrainGroup_NULL_GrainGroup GrainGroup = 0
	// base
	GrainGroup_BASE GrainGroup = 1
	// caramel
	GrainGroup_CARAMEL GrainGroup = 2
	// flaked
	GrainGroup_FLAKED GrainGroup = 3
	// roasted
	GrainGroup_ROASTED GrainGroup = 4
	// specialty
	GrainGroup_SPECIALTY GrainGroup = 5
	// smoked
	GrainGroup_SMOKED GrainGroup = 6
	// adjunct
	GrainGroup_ADJUNCT GrainGroup = 7
)

var GrainGroup_name = map[int32]string{
	0: "NULL_GrainGroup",
	1: "BASE",
	2: "CARAMEL",
	3: "FLAKED",
	4: "ROASTED",
	5: "SPECIALTY",
	6: "SMOKED",
	7: "ADJUNCT",
}

var GrainGroup_value = map[string]int32{
	"NULL_GrainGroup": 0,
	"BASE":            1,
	"CARAMEL":         2,
	"FLAKED":          3,
	"ROASTED":         4,
	"SPECIALTY":       5,
	"SMOKED":          6,
	"ADJUNCT":         7,
}

func (x GrainGroup) String() string {
	return proto.EnumName(GrainGroup_name, int32(x))
}

func (GrainGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{4}
}

type HopVarietyBaseForm int32

const (
	HopVarietyBaseForm_NULL_HopVarietyBaseForm HopVarietyBaseForm = 0
	// extract
	HopVarietyBaseForm_EXTRACT_HopVarietyBaseForm HopVarietyBaseForm = 1
	// leaf
	HopVarietyBaseForm_LEAF HopVarietyBaseForm = 2
	// leaf (wet)
	HopVarietyBaseForm_LEAFWET HopVarietyBaseForm = 3
	// pellet
	HopVarietyBaseForm_PELLET HopVarietyBaseForm = 4
	// powder
	HopVarietyBaseForm_POWDER HopVarietyBaseForm = 5
	// plug
	HopVarietyBaseForm_PLUG HopVarietyBaseForm = 6
)

var HopVarietyBaseForm_name = map[int32]string{
	0: "NULL_HopVarietyBaseForm",
	1: "EXTRACT_HopVarietyBaseForm",
	2: "LEAF",
	3: "LEAFWET",
	4: "PELLET",
	5: "POWDER",
	6: "PLUG",
}

var HopVarietyBaseForm_value = map[string]int32{
	"NULL_HopVarietyBaseForm":    0,
	"EXTRACT_HopVarietyBaseForm": 1,
	"LEAF":                       2,
	"LEAFWET":                    3,
	"PELLET":                     4,
	"POWDER":                     5,
	"PLUG":                       6,
}

func (x HopVarietyBaseForm) String() string {
	return proto.EnumName(HopVarietyBaseForm_name, int32(x))
}

func (HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{5}
}

type MashStepType_MashStepTypeType int32

const (
	MashStepType_NULL           MashStepType_MashStepTypeType = 0
	MashStepType_INFUSION       MashStepType_MashStepTypeType = 1
	MashStepType_TEMPERATURE    MashStepType_MashStepTypeType = 2
	MashStepType_DECOCTION      MashStepType_MashStepTypeType = 3
	MashStepType_SOURING_MASH   MashStepType_MashStepTypeType = 4
	MashStepType_SOURING_WORT   MashStepType_MashStepTypeType = 5
	MashStepType_DRAIN_MASH_TUN MashStepType_MashStepTypeType = 6
	MashStepType_SPARGE         MashStepType_MashStepTypeType = 7
)

var MashStepType_MashStepTypeType_name = map[int32]string{
	0: "NULL",
	1: "INFUSION",
	2: "TEMPERATURE",
	3: "DECOCTION",
	4: "SOURING_MASH",
	5: "SOURING_WORT",
	6: "DRAIN_MASH_TUN",
	7: "SPARGE",
}

var MashStepType_MashStepTypeType_value = map[string]int32{
	"NULL":           0,
	"INFUSION":       1,
	"TEMPERATURE":    2,
	"DECOCTION":      3,
	"SOURING_MASH":   4,
	"SOURING_WORT":   5,
	"DRAIN_MASH_TUN": 6,
	"SPARGE":         7,
}

func (x MashStepType_MashStepTypeType) String() string {
	return proto.EnumName(MashStepType_MashStepTypeType_name, int32(x))
}

func (MashStepType_MashStepTypeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{2, 0}
}

type TimeType_TimeUnitType int32

const (
	TimeType_NULL TimeType_TimeUnitType = 0
	// sec
	TimeType_SEC TimeType_TimeUnitType = 1
	// min
	TimeType_MIN TimeType_TimeUnitType = 2
	// hr
	TimeType_HR TimeType_TimeUnitType = 3
	// day
	TimeType_DAY TimeType_TimeUnitType = 4
	// week
	TimeType_WEEK TimeType_TimeUnitType = 5
	// month
	TimeType_MONTH TimeType_TimeUnitType = 6
	// year
	TimeType_YEAR TimeType_TimeUnitType = 7
)

var TimeType_TimeUnitType_name = map[int32]string{
	0: "NULL",
	1: "SEC",
	2: "MIN",
	3: "HR",
	4: "DAY",
	5: "WEEK",
	6: "MONTH",
	7: "YEAR",
}

var TimeType_TimeUnitType_value = map[string]int32{
	"NULL":  0,
	"SEC":   1,
	"MIN":   2,
	"HR":    3,
	"DAY":   4,
	"WEEK":  5,
	"MONTH": 6,
	"YEAR":  7,
}

func (x TimeType_TimeUnitType) String() string {
	return proto.EnumName(TimeType_TimeUnitType_name, int32(x))
}

func (TimeType_TimeUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{3, 0}
}

type AcidityType_AcidityUnitType int32

const (
	AcidityType_NULL AcidityType_AcidityUnitType = 0
	AcidityType_PH   AcidityType_AcidityUnitType = 1
)

var AcidityType_AcidityUnitType_name = map[int32]string{
	0: "NULL",
	1: "PH",
}

var AcidityType_AcidityUnitType_value = map[string]int32{
	"NULL": 0,
	"PH":   1,
}

func (x AcidityType_AcidityUnitType) String() string {
	return proto.EnumName(AcidityType_AcidityUnitType_name, int32(x))
}

func (AcidityType_AcidityUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{4, 0}
}

type VolumeType_VolumeUnitType int32

const (
	VolumeType_NULL VolumeType_VolumeUnitType = 0
	// ml
	VolumeType_ML VolumeType_VolumeUnitType = 1
	// l
	VolumeType_L VolumeType_VolumeUnitType = 2
	// tsp
	VolumeType_TSP VolumeType_VolumeUnitType = 3
	// tbsp
	VolumeType_TBSP VolumeType_VolumeUnitType = 4
	// floz
	VolumeType_FLOZ VolumeType_VolumeUnitType = 5
	// cup
	VolumeType_CUP VolumeType_VolumeUnitType = 6
	// pt
	VolumeType_PT VolumeType_VolumeUnitType = 7
	// qt
	VolumeType_QT VolumeType_VolumeUnitType = 8
	// gal
	VolumeType_GAL VolumeType_VolumeUnitType = 9
	// bbl
	VolumeType_BBL VolumeType_VolumeUnitType = 10
	// ifloz
	VolumeType_IFOZ VolumeType_VolumeUnitType = 11
	// ipt
	VolumeType_IPT VolumeType_VolumeUnitType = 12
	// iqt
	VolumeType_IQT VolumeType_VolumeUnitType = 13
	// igal
	VolumeType_IGAL VolumeType_VolumeUnitType = 14
	// ibbl
	VolumeType_IBBL VolumeType_VolumeUnitType = 15
)

var VolumeType_VolumeUnitType_name = map[int32]string{
	0:  "NULL",
	1:  "ML",
	2:  "L",
	3:  "TSP",
	4:  "TBSP",
	5:  "FLOZ",
	6:  "CUP",
	7:  "PT",
	8:  "QT",
	9:  "GAL",
	10: "BBL",
	11: "IFOZ",
	12: "IPT",
	13: "IQT",
	14: "IGAL",
	15: "IBBL",
}

var VolumeType_VolumeUnitType_value = map[string]int32{
	"NULL": 0,
	"ML":   1,
	"L":    2,
	"TSP":  3,
	"TBSP": 4,
	"FLOZ": 5,
	"CUP":  6,
	"PT":   7,
	"QT":   8,
	"GAL":  9,
	"BBL":  10,
	"IFOZ": 11,
	"IPT":  12,
	"IQT":  13,
	"IGAL": 14,
	"IBBL": 15,
}

func (x VolumeType_VolumeUnitType) String() string {
	return proto.EnumName(VolumeType_VolumeUnitType_name, int32(x))
}

func (VolumeType_VolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{5, 0}
}

type SpecificVolumeType_SpecificVolumeUnitType int32

const (
	SpecificVolumeType_NULL SpecificVolumeType_SpecificVolumeUnitType = 0
	// qt/lb
	SpecificVolumeType_QTLB SpecificVolumeType_SpecificVolumeUnitType = 1
	// gal/lb
	SpecificVolumeType_GALLB SpecificVolumeType_SpecificVolumeUnitType = 2
	// gal/oz
	SpecificVolumeType_GALOZ SpecificVolumeType_SpecificVolumeUnitType = 3
	// l/g
	SpecificVolumeType_LG SpecificVolumeType_SpecificVolumeUnitType = 4
	// l/kg
	SpecificVolumeType_LKG SpecificVolumeType_SpecificVolumeUnitType = 5
	// floz/oz
	SpecificVolumeType_FLOZOZ SpecificVolumeType_SpecificVolumeUnitType = 6
	// m^3/kg
	SpecificVolumeType_M3KG SpecificVolumeType_SpecificVolumeUnitType = 7
	// ft^3/lb
	SpecificVolumeType_FT3LB SpecificVolumeType_SpecificVolumeUnitType = 8
)

var SpecificVolumeType_SpecificVolumeUnitType_name = map[int32]string{
	0: "NULL",
	1: "QTLB",
	2: "GALLB",
	3: "GALOZ",
	4: "LG",
	5: "LKG",
	6: "FLOZOZ",
	7: "M3KG",
	8: "FT3LB",
}

var SpecificVolumeType_SpecificVolumeUnitType_value = map[string]int32{
	"NULL":   0,
	"QTLB":   1,
	"GALLB":  2,
	"GALOZ":  3,
	"LG":     4,
	"LKG":    5,
	"FLOZOZ": 6,
	"M3KG":   7,
	"FT3LB":  8,
}

func (x SpecificVolumeType_SpecificVolumeUnitType) String() string {
	return proto.EnumName(SpecificVolumeType_SpecificVolumeUnitType_name, int32(x))
}

func (SpecificVolumeType_SpecificVolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{6, 0}
}

type RecipeType_RecipeTypeType int32

const (
	RecipeType_NULL RecipeType_RecipeTypeType = 0
	// cider
	RecipeType_CIDER RecipeType_RecipeTypeType = 1
	// kombucha
	RecipeType_KOMBUCHA RecipeType_RecipeTypeType = 2
	// soda
	RecipeType_SODA RecipeType_RecipeTypeType = 3
	// other
	RecipeType_OTHER RecipeType_RecipeTypeType = 4
	// mead
	RecipeType_MEAD RecipeType_RecipeTypeType = 5
	// wine
	RecipeType_WINE RecipeType_RecipeTypeType = 6
	// extract
	RecipeType_EXTRACT RecipeType_RecipeTypeType = 7
	// partial mash
	RecipeType_PARTIAL_MASH RecipeType_RecipeTypeType = 8
	// all grain
	RecipeType_ALL_GRAIN RecipeType_RecipeTypeType = 9
)

var RecipeType_RecipeTypeType_name = map[int32]string{
	0: "NULL",
	1: "CIDER",
	2: "KOMBUCHA",
	3: "SODA",
	4: "OTHER",
	5: "MEAD",
	6: "WINE",
	7: "EXTRACT",
	8: "PARTIAL_MASH",
	9: "ALL_GRAIN",
}

var RecipeType_RecipeTypeType_value = map[string]int32{
	"NULL":         0,
	"CIDER":        1,
	"KOMBUCHA":     2,
	"SODA":         3,
	"OTHER":        4,
	"MEAD":         5,
	"WINE":         6,
	"EXTRACT":      7,
	"PARTIAL_MASH": 8,
	"ALL_GRAIN":    9,
}

func (x RecipeType_RecipeTypeType) String() string {
	return proto.EnumName(RecipeType_RecipeTypeType_name, int32(x))
}

func (RecipeType_RecipeTypeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{7, 0}
}

type RecipeStyleType_StyleCategories int32

const (
	RecipeStyleType_NULL RecipeStyleType_StyleCategories = 0
	// beer
	RecipeStyleType_BEER RecipeStyleType_StyleCategories = 1
	// cider
	RecipeStyleType_cider RecipeStyleType_StyleCategories = 2
	// kombucha
	RecipeStyleType_OMBUCHA RecipeStyleType_StyleCategories = 3
	// mead
	RecipeStyleType_MEAD RecipeStyleType_StyleCategories = 4
	// soda
	RecipeStyleType_SODA RecipeStyleType_StyleCategories = 5
	// wine
	RecipeStyleType_WINE RecipeStyleType_StyleCategories = 6
	// other
	RecipeStyleType_OTHER RecipeStyleType_StyleCategories = 7
)

var RecipeStyleType_StyleCategories_name = map[int32]string{
	0: "NULL",
	1: "BEER",
	2: "cider",
	3: "OMBUCHA",
	4: "MEAD",
	5: "SODA",
	6: "WINE",
	7: "OTHER",
}

var RecipeStyleType_StyleCategories_value = map[string]int32{
	"NULL":    0,
	"BEER":    1,
	"cider":   2,
	"OMBUCHA": 3,
	"MEAD":    4,
	"SODA":    5,
	"WINE":    6,
	"OTHER":   7,
}

func (x RecipeStyleType_StyleCategories) String() string {
	return proto.EnumName(RecipeStyleType_StyleCategories_name, int32(x))
}

func (RecipeStyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{9, 0}
}

type IBUEstimateType_IBUMethodType int32

const (
	IBUEstimateType_NULL IBUEstimateType_IBUMethodType = 0
	// Rager
	IBUEstimateType_Rager IBUEstimateType_IBUMethodType = 1
	// Tinseth
	IBUEstimateType_Tinseth IBUEstimateType_IBUMethodType = 2
	// Garetz
	IBUEstimateType_Garetz IBUEstimateType_IBUMethodType = 3
	// Other
	IBUEstimateType_Other IBUEstimateType_IBUMethodType = 4
)

var IBUEstimateType_IBUMethodType_name = map[int32]string{
	0: "NULL",
	1: "Rager",
	2: "Tinseth",
	3: "Garetz",
	4: "Other",
}

var IBUEstimateType_IBUMethodType_value = map[string]int32{
	"NULL":    0,
	"Rager":   1,
	"Tinseth": 2,
	"Garetz":  3,
	"Other":   4,
}

func (x IBUEstimateType_IBUMethodType) String() string {
	return proto.EnumName(IBUEstimateType_IBUMethodType_name, int32(x))
}

func (IBUEstimateType_IBUMethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{10, 0}
}

type MassType_MassUnitType int32

const (
	MassType_NULL MassType_MassUnitType = 0
	// mg
	MassType_MG MassType_MassUnitType = 1
	// g
	MassType_G MassType_MassUnitType = 2
	// kg
	MassType_KG MassType_MassUnitType = 3
	// lb
	MassType_LB MassType_MassUnitType = 4
	// oz
	MassType_OZ MassType_MassUnitType = 5
)

var MassType_MassUnitType_name = map[int32]string{
	0: "NULL",
	1: "MG",
	2: "G",
	3: "KG",
	4: "LB",
	5: "OZ",
}

var MassType_MassUnitType_value = map[string]int32{
	"NULL": 0,
	"MG":   1,
	"G":    2,
	"KG":   3,
	"LB":   4,
	"OZ":   5,
}

func (x MassType_MassUnitType) String() string {
	return proto.EnumName(MassType_MassUnitType_name, int32(x))
}

func (MassType_MassUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{13, 0}
}

type UnitType_UnitUnitType int32

const (
	UnitType_NULL UnitType_UnitUnitType = 0
	// 1
	UnitType_ONE UnitType_UnitUnitType = 1
	// unit
	UnitType_UNIT UnitType_UnitUnitType = 2
	// each
	UnitType_EACH UnitType_UnitUnitType = 3
	// dimensionless
	UnitType_DIMENSIONLESS UnitType_UnitUnitType = 4
	// pkg
	UnitType_PKG UnitType_UnitUnitType = 5
)

var UnitType_UnitUnitType_name = map[int32]string{
	0: "NULL",
	1: "ONE",
	2: "UNIT",
	3: "EACH",
	4: "DIMENSIONLESS",
	5: "PKG",
}

var UnitType_UnitUnitType_value = map[string]int32{
	"NULL":          0,
	"ONE":           1,
	"UNIT":          2,
	"EACH":          3,
	"DIMENSIONLESS": 4,
	"PKG":           5,
}

func (x UnitType_UnitUnitType) String() string {
	return proto.EnumName(UnitType_UnitUnitType_name, int32(x))
}

func (UnitType_UnitUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{14, 0}
}

type TimingType_UseType int32

const (
	TimingType_NULL TimingType_UseType = 0
	// add to mash
	TimingType_ADD_TO_MASH TimingType_UseType = 1
	// add to boil
	TimingType_ADD_TO_BOIL TimingType_UseType = 2
	// add to fermentation
	TimingType_ADD_TO_FERMENTATION TimingType_UseType = 3
	// add to package
	TimingType_ADD_TO_PACKAGE TimingType_UseType = 4
)

var TimingType_UseType_name = map[int32]string{
	0: "NULL",
	1: "ADD_TO_MASH",
	2: "ADD_TO_BOIL",
	3: "ADD_TO_FERMENTATION",
	4: "ADD_TO_PACKAGE",
}

var TimingType_UseType_value = map[string]int32{
	"NULL":                0,
	"ADD_TO_MASH":         1,
	"ADD_TO_BOIL":         2,
	"ADD_TO_FERMENTATION": 3,
	"ADD_TO_PACKAGE":      4,
}

func (x TimingType_UseType) String() string {
	return proto.EnumName(TimingType_UseType_name, int32(x))
}

func (TimingType_UseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{16, 0}
}

type ConcentrationType_ConcentrationUnitType int32

const (
	ConcentrationType_NULL ConcentrationType_ConcentrationUnitType = 0
	// ppm
	ConcentrationType_PPM ConcentrationType_ConcentrationUnitType = 1
	// ppb
	ConcentrationType_PPB ConcentrationType_ConcentrationUnitType = 2
	// mg/l
	ConcentrationType_MGL ConcentrationType_ConcentrationUnitType = 3
)

var ConcentrationType_ConcentrationUnitType_name = map[int32]string{
	0: "NULL",
	1: "PPM",
	2: "PPB",
	3: "MGL",
}

var ConcentrationType_ConcentrationUnitType_value = map[string]int32{
	"NULL": 0,
	"PPM":  1,
	"PPB":  2,
	"MGL":  3,
}

func (x ConcentrationType_ConcentrationUnitType) String() string {
	return proto.EnumName(ConcentrationType_ConcentrationUnitType_name, int32(x))
}

func (ConcentrationType_ConcentrationUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{18, 0}
}

type StyleType_StyleCategories int32

const (
	StyleType_NULL StyleType_StyleCategories = 0
	// beer
	StyleType_BEER StyleType_StyleCategories = 1
	// cider
	StyleType_CIDER StyleType_StyleCategories = 2
	// kombucha
	StyleType_KOMBUCHA StyleType_StyleCategories = 3
	// mead
	StyleType_MEAD StyleType_StyleCategories = 4
	// other
	StyleType_OTHER StyleType_StyleCategories = 5
	// soda
	StyleType_SODA StyleType_StyleCategories = 6
	// wine
	StyleType_WINE StyleType_StyleCategories = 7
)

var StyleType_StyleCategories_name = map[int32]string{
	0: "NULL",
	1: "BEER",
	2: "CIDER",
	3: "KOMBUCHA",
	4: "MEAD",
	5: "OTHER",
	6: "SODA",
	7: "WINE",
}

var StyleType_StyleCategories_value = map[string]int32{
	"NULL":     0,
	"BEER":     1,
	"CIDER":    2,
	"KOMBUCHA": 3,
	"MEAD":     4,
	"OTHER":    5,
	"SODA":     6,
	"WINE":     7,
}

func (x StyleType_StyleCategories) String() string {
	return proto.EnumName(StyleType_StyleCategories_name, int32(x))
}

func (StyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{25, 0}
}

type BitternessType_BitternessUnitType int32

const (
	BitternessType_NULL BitternessType_BitternessUnitType = 0
	// IBUs
	BitternessType_IBUs BitternessType_BitternessUnitType = 1
)

var BitternessType_BitternessUnitType_name = map[int32]string{
	0: "NULL",
	1: "IBUs",
}

var BitternessType_BitternessUnitType_value = map[string]int32{
	"NULL": 0,
	"IBUs": 1,
}

func (x BitternessType_BitternessUnitType) String() string {
	return proto.EnumName(BitternessType_BitternessUnitType_name, int32(x))
}

func (BitternessType_BitternessUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{27, 0}
}

type PercentType_PercentUnitType int32

const (
	PercentType_NULL PercentType_PercentUnitType = 0
	// %
	PercentType_PERCENT_SIGN PercentType_PercentUnitType = 1
)

var PercentType_PercentUnitType_name = map[int32]string{
	0: "NULL",
	1: "PERCENT_SIGN",
}

var PercentType_PercentUnitType_value = map[string]int32{
	"NULL":         0,
	"PERCENT_SIGN": 1,
}

func (x PercentType_PercentUnitType) String() string {
	return proto.EnumName(PercentType_PercentUnitType_name, int32(x))
}

func (PercentType_PercentUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{29, 0}
}

type GravityType_GravityUnitType int32

const (
	GravityType_NULL GravityType_GravityUnitType = 0
	// sg
	GravityType_SG GravityType_GravityUnitType = 1
	// plato
	GravityType_PLATO GravityType_GravityUnitType = 2
	// brix
	GravityType_BRIX GravityType_GravityUnitType = 3
)

var GravityType_GravityUnitType_name = map[int32]string{
	0: "NULL",
	1: "SG",
	2: "PLATO",
	3: "BRIX",
}

var GravityType_GravityUnitType_value = map[string]int32{
	"NULL":  0,
	"SG":    1,
	"PLATO": 2,
	"BRIX":  3,
}

func (x GravityType_GravityUnitType) String() string {
	return proto.EnumName(GravityType_GravityUnitType_name, int32(x))
}

func (GravityType_GravityUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{31, 0}
}

type ColorType_ColorUnitType int32

const (
	ColorType_NULL ColorType_ColorUnitType = 0
	// EBC
	ColorType_EBC ColorType_ColorUnitType = 1
	// Lovi
	ColorType_LOVI ColorType_ColorUnitType = 2
	// SRM
	ColorType_SRM ColorType_ColorUnitType = 3
)

var ColorType_ColorUnitType_name = map[int32]string{
	0: "NULL",
	1: "EBC",
	2: "LOVI",
	3: "SRM",
}

var ColorType_ColorUnitType_value = map[string]int32{
	"NULL": 0,
	"EBC":  1,
	"LOVI": 2,
	"SRM":  3,
}

func (x ColorType_ColorUnitType) String() string {
	return proto.EnumName(ColorType_ColorUnitType_name, int32(x))
}

func (ColorType_ColorUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{33, 0}
}

type CarbonationType_CarbonationUnitType int32

const (
	CarbonationType_NULL CarbonationType_CarbonationUnitType = 0
	// vols
	CarbonationType_VOLS CarbonationType_CarbonationUnitType = 1
)

var CarbonationType_CarbonationUnitType_name = map[int32]string{
	0: "NULL",
	1: "VOLS",
}

var CarbonationType_CarbonationUnitType_value = map[string]int32{
	"NULL": 0,
	"VOLS": 1,
}

func (x CarbonationType_CarbonationUnitType) String() string {
	return proto.EnumName(CarbonationType_CarbonationUnitType_name, int32(x))
}

func (CarbonationType_CarbonationUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{35, 0}
}

type BoilStepType_BoilStepTypeChillingType int32

const (
	BoilStepType_NULL BoilStepType_BoilStepTypeChillingType = 0
	// batch
	BoilStepType_BATCH BoilStepType_BoilStepTypeChillingType = 1
	// inline
	BoilStepType_INLINE BoilStepType_BoilStepTypeChillingType = 2
)

var BoilStepType_BoilStepTypeChillingType_name = map[int32]string{
	0: "NULL",
	1: "BATCH",
	2: "INLINE",
}

var BoilStepType_BoilStepTypeChillingType_value = map[string]int32{
	"NULL":   0,
	"BATCH":  1,
	"INLINE": 2,
}

func (x BoilStepType_BoilStepTypeChillingType) String() string {
	return proto.EnumName(BoilStepType_BoilStepTypeChillingType_name, int32(x))
}

func (BoilStepType_BoilStepTypeChillingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{39, 0}
}

type DiastaticPowerType_DiastaticPowerUnitType int32

const (
	DiastaticPowerType_NULL DiastaticPowerType_DiastaticPowerUnitType = 0
	// Lintner
	DiastaticPowerType_lintner DiastaticPowerType_DiastaticPowerUnitType = 1
	// WK
	DiastaticPowerType_WK DiastaticPowerType_DiastaticPowerUnitType = 2
)

var DiastaticPowerType_DiastaticPowerUnitType_name = map[int32]string{
	0: "NULL",
	1: "lintner",
	2: "WK",
}

var DiastaticPowerType_DiastaticPowerUnitType_value = map[string]int32{
	"NULL":    0,
	"lintner": 1,
	"WK":      2,
}

func (x DiastaticPowerType_DiastaticPowerUnitType) String() string {
	return proto.EnumName(DiastaticPowerType_DiastaticPowerUnitType_name, int32(x))
}

func (DiastaticPowerType_DiastaticPowerUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{42, 0}
}

type CultureInformation_QualitativeRangeType int32

const (
	CultureInformation_NULL_QualitativeRangeType CultureInformation_QualitativeRangeType = 0
	// very low
	CultureInformation_VERY_LOW CultureInformation_QualitativeRangeType = 1
	// low
	CultureInformation_LOW CultureInformation_QualitativeRangeType = 2
	// medium low
	CultureInformation_MEDIUM_LOW CultureInformation_QualitativeRangeType = 3
	// medium
	CultureInformation_MEDIUM CultureInformation_QualitativeRangeType = 4
	// medium high
	CultureInformation_MEDIUM_HIGH CultureInformation_QualitativeRangeType = 5
	// high
	CultureInformation_HIGH CultureInformation_QualitativeRangeType = 6
	// very high
	CultureInformation_VERY_HIGH CultureInformation_QualitativeRangeType = 7
)

var CultureInformation_QualitativeRangeType_name = map[int32]string{
	0: "NULL_QualitativeRangeType",
	1: "VERY_LOW",
	2: "LOW",
	3: "MEDIUM_LOW",
	4: "MEDIUM",
	5: "MEDIUM_HIGH",
	6: "HIGH",
	7: "VERY_HIGH",
}

var CultureInformation_QualitativeRangeType_value = map[string]int32{
	"NULL_QualitativeRangeType": 0,
	"VERY_LOW":                  1,
	"LOW":                       2,
	"MEDIUM_LOW":                3,
	"MEDIUM":                    4,
	"MEDIUM_HIGH":               5,
	"HIGH":                      6,
	"VERY_HIGH":                 7,
}

func (x CultureInformation_QualitativeRangeType) String() string {
	return proto.EnumName(CultureInformation_QualitativeRangeType_name, int32(x))
}

func (CultureInformation_QualitativeRangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{43, 0}
}

type TemperatureType_TemperatureUnitType int32

const (
	TemperatureType_NULL TemperatureType_TemperatureUnitType = 0
	TemperatureType_C    TemperatureType_TemperatureUnitType = 1
	TemperatureType_F    TemperatureType_TemperatureUnitType = 2
)

var TemperatureType_TemperatureUnitType_name = map[int32]string{
	0: "NULL",
	1: "C",
	2: "F",
}

var TemperatureType_TemperatureUnitType_value = map[string]int32{
	"NULL": 0,
	"C":    1,
	"F":    2,
}

func (x TemperatureType_TemperatureUnitType) String() string {
	return proto.EnumName(TemperatureType_TemperatureUnitType_name, int32(x))
}

func (TemperatureType_TemperatureUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{45, 0}
}

type EquipmentItemType_EquipmentBaseForm int32

const (
	EquipmentItemType_NULL EquipmentItemType_EquipmentBaseForm = 0
	// HLT
	EquipmentItemType_HLT EquipmentItemType_EquipmentBaseForm = 1
	// Mash Tun
	EquipmentItemType_MASH_TUN EquipmentItemType_EquipmentBaseForm = 2
	// Lauter Tun
	EquipmentItemType_LAUTER_TUN EquipmentItemType_EquipmentBaseForm = 3
	// Brew Kettle
	EquipmentItemType_BREW_KETTLE EquipmentItemType_EquipmentBaseForm = 4
	// Fermenter
	EquipmentItemType_FERMENTER EquipmentItemType_EquipmentBaseForm = 5
	// Aging Vessel
	EquipmentItemType_AGING_VESSEL EquipmentItemType_EquipmentBaseForm = 6
	// Packaging Vessel
	EquipmentItemType_PACKAGING_VESSEL EquipmentItemType_EquipmentBaseForm = 7
)

var EquipmentItemType_EquipmentBaseForm_name = map[int32]string{
	0: "NULL",
	1: "HLT",
	2: "MASH_TUN",
	3: "LAUTER_TUN",
	4: "BREW_KETTLE",
	5: "FERMENTER",
	6: "AGING_VESSEL",
	7: "PACKAGING_VESSEL",
}

var EquipmentItemType_EquipmentBaseForm_value = map[string]int32{
	"NULL":             0,
	"HLT":              1,
	"MASH_TUN":         2,
	"LAUTER_TUN":       3,
	"BREW_KETTLE":      4,
	"FERMENTER":        5,
	"AGING_VESSEL":     6,
	"PACKAGING_VESSEL": 7,
}

func (x EquipmentItemType_EquipmentBaseForm) String() string {
	return proto.EnumName(EquipmentItemType_EquipmentBaseForm_name, int32(x))
}

func (EquipmentItemType_EquipmentBaseForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{49, 0}
}

type SpecificHeatType_SpecificHeatUnitType int32

const (
	SpecificHeatType_NULL SpecificHeatType_SpecificHeatUnitType = 0
	// Cal/(g C)
	SpecificHeatType_CALGC SpecificHeatType_SpecificHeatUnitType = 1
	// J/(kg K)
	SpecificHeatType_JKGK SpecificHeatType_SpecificHeatUnitType = 2
	// BTU/(lb F)
	SpecificHeatType_BTULBF SpecificHeatType_SpecificHeatUnitType = 3
)

var SpecificHeatType_SpecificHeatUnitType_name = map[int32]string{
	0: "NULL",
	1: "CALGC",
	2: "JKGK",
	3: "BTULBF",
}

var SpecificHeatType_SpecificHeatUnitType_value = map[string]int32{
	"NULL":   0,
	"CALGC":  1,
	"JKGK":   2,
	"BTULBF": 3,
}

func (x SpecificHeatType_SpecificHeatUnitType) String() string {
	return proto.EnumName(SpecificHeatType_SpecificHeatUnitType_name, int32(x))
}

func (SpecificHeatType_SpecificHeatUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{50, 0}
}

type PackagingVesselType_PackagingVesselTypeType int32

const (
	PackagingVesselType_NULL PackagingVesselType_PackagingVesselTypeType = 0
	// keg
	PackagingVesselType_KEG PackagingVesselType_PackagingVesselTypeType = 1
	// bottle
	PackagingVesselType_BOTTLE PackagingVesselType_PackagingVesselTypeType = 2
	// cask
	PackagingVesselType_CASK PackagingVesselType_PackagingVesselTypeType = 3
	// tank
	PackagingVesselType_TANK PackagingVesselType_PackagingVesselTypeType = 4
	// firkin
	PackagingVesselType_FIRKIN PackagingVesselType_PackagingVesselTypeType = 5
	// other
	PackagingVesselType_OTHER PackagingVesselType_PackagingVesselTypeType = 6
)

var PackagingVesselType_PackagingVesselTypeType_name = map[int32]string{
	0: "NULL",
	1: "KEG",
	2: "BOTTLE",
	3: "CASK",
	4: "TANK",
	5: "FIRKIN",
	6: "OTHER",
}

var PackagingVesselType_PackagingVesselTypeType_value = map[string]int32{
	"NULL":   0,
	"KEG":    1,
	"BOTTLE": 2,
	"CASK":   3,
	"TANK":   4,
	"FIRKIN": 5,
	"OTHER":  6,
}

func (x PackagingVesselType_PackagingVesselTypeType) String() string {
	return proto.EnumName(PackagingVesselType_PackagingVesselTypeType_name, int32(x))
}

func (PackagingVesselType_PackagingVesselTypeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{52, 0}
}

type VarietyInformation_VarietyInformationType int32

const (
	VarietyInformation_NULL_VarietyInformationType VarietyInformation_VarietyInformationType = 0
	// aroma
	VarietyInformation_AROMA VarietyInformation_VarietyInformationType = 1
	// bittering
	VarietyInformation_BITTERING VarietyInformation_VarietyInformationType = 2
	// flavor
	VarietyInformation_FLAVOR VarietyInformation_VarietyInformationType = 3
	// aroma/bittering
	VarietyInformation_AROMA_BITTERING VarietyInformation_VarietyInformationType = 4
	// bittering/flavor
	VarietyInformation_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 5
	// aroma/flavor
	VarietyInformation_AROMA_FLAVOR VarietyInformation_VarietyInformationType = 6
	// aroma/bittering/flavor
	VarietyInformation_AROMA_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 7
)

var VarietyInformation_VarietyInformationType_name = map[int32]string{
	0: "NULL_VarietyInformationType",
	1: "AROMA",
	2: "BITTERING",
	3: "FLAVOR",
	4: "AROMA_BITTERING",
	5: "BITTERING_FLAVOR",
	6: "AROMA_FLAVOR",
	7: "AROMA_BITTERING_FLAVOR",
}

var VarietyInformation_VarietyInformationType_value = map[string]int32{
	"NULL_VarietyInformationType": 0,
	"AROMA":                       1,
	"BITTERING":                   2,
	"FLAVOR":                      3,
	"AROMA_BITTERING":             4,
	"BITTERING_FLAVOR":            5,
	"AROMA_FLAVOR":                6,
	"AROMA_BITTERING_FLAVOR":      7,
}

func (x VarietyInformation_VarietyInformationType) String() string {
	return proto.EnumName(VarietyInformation_VarietyInformationType_name, int32(x))
}

func (VarietyInformation_VarietyInformationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{53, 0}
}

type Recipe struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A collection of steps providing process information for common mashing procedures
	Mashes []*MashProcedureType `protobuf:"bytes,2,rep,name=mashes,proto3" json:"mashes,omitempty"`
	// Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer
	Recipes []*RecipeType `protobuf:"bytes,3,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// Records for adjuncts which do not contribute to the gravity of the beer
	MiscellaneousIngredients []*MiscellaneousType `protobuf:"bytes,4,rep,name=miscellaneous_ingredients,json=miscellaneousIngredients,proto3" json:"miscellaneous_ingredients,omitempty"`
	// Records detailing the characteristics of the beer styles for which judging guidelines have been established
	Styles []*StyleType `protobuf:"bytes,5,rep,name=styles,proto3" json:"styles,omitempty"`
	// A collection of steps providing process information for common fermentation procedures
	Fermentations []*FermentationProcedureType `protobuf:"bytes,6,rep,name=fermentations,proto3" json:"fermentations,omitempty"`
	// A collection of steps providing process information for common boil procedures
	Boil []*BoilProcedureType `protobuf:"bytes,7,rep,name=boil,proto3" json:"boil,omitempty"`
	// Explicitly encode version within list of records
	Version float64 `protobuf:"fixed64,8,opt,name=version,proto3" json:"version,omitempty"`
	// Records for any ingredient that contributes to the gravity of the beer
	Fermentables []*FermentableType `protobuf:"bytes,9,rep,name=fermentables,proto3" json:"fermentables,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	TimingObject *TimingType `protobuf:"bytes,10,opt,name=timing_object,json=timingObject,proto3" json:"timing_object,omitempty"`
	// Records detailing the wide array of unique cultures
	Cultures []*CultureInformation `protobuf:"bytes,11,rep,name=cultures,proto3" json:"cultures,omitempty"`
	// Provides necessary information for brewing equipment
	Equipments []*EquipmentType `protobuf:"bytes,12,rep,name=equipments,proto3" json:"equipments,omitempty"`
	// A collection of steps providing process information for common packaging procedures
	Packaging []*PackagingProcedureType `protobuf:"bytes,13,rep,name=packaging,proto3" json:"packaging,omitempty"`
	// Records detailing the many properties of unique hop varieties
	HopVarieties []*VarietyInformation `protobuf:"bytes,14,rep,name=hop_varieties,json=hopVarieties,proto3" json:"hop_varieties,omitempty"`
	// Records for water profiles used in brewing
	Profiles             []*WaterBase `protobuf:"bytes,15,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Recipe) Reset()         { *m = Recipe{} }
func (m *Recipe) String() string { return proto.CompactTextString(m) }
func (*Recipe) ProtoMessage()    {}
func (*Recipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{0}
}

func (m *Recipe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Recipe.Unmarshal(m, b)
}
func (m *Recipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Recipe.Marshal(b, m, deterministic)
}
func (m *Recipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipe.Merge(m, src)
}
func (m *Recipe) XXX_Size() int {
	return xxx_messageInfo_Recipe.Size(m)
}
func (m *Recipe) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipe.DiscardUnknown(m)
}

var xxx_messageInfo_Recipe proto.InternalMessageInfo

func (m *Recipe) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Recipe) GetMashes() []*MashProcedureType {
	if m != nil {
		return m.Mashes
	}
	return nil
}

func (m *Recipe) GetRecipes() []*RecipeType {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *Recipe) GetMiscellaneousIngredients() []*MiscellaneousType {
	if m != nil {
		return m.MiscellaneousIngredients
	}
	return nil
}

func (m *Recipe) GetStyles() []*StyleType {
	if m != nil {
		return m.Styles
	}
	return nil
}

func (m *Recipe) GetFermentations() []*FermentationProcedureType {
	if m != nil {
		return m.Fermentations
	}
	return nil
}

func (m *Recipe) GetBoil() []*BoilProcedureType {
	if m != nil {
		return m.Boil
	}
	return nil
}

func (m *Recipe) GetVersion() float64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Recipe) GetFermentables() []*FermentableType {
	if m != nil {
		return m.Fermentables
	}
	return nil
}

func (m *Recipe) GetTimingObject() *TimingType {
	if m != nil {
		return m.TimingObject
	}
	return nil
}

func (m *Recipe) GetCultures() []*CultureInformation {
	if m != nil {
		return m.Cultures
	}
	return nil
}

func (m *Recipe) GetEquipments() []*EquipmentType {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (m *Recipe) GetPackaging() []*PackagingProcedureType {
	if m != nil {
		return m.Packaging
	}
	return nil
}

func (m *Recipe) GetHopVarieties() []*VarietyInformation {
	if m != nil {
		return m.HopVarieties
	}
	return nil
}

func (m *Recipe) GetProfiles() []*WaterBase {
	if m != nil {
		return m.Profiles
	}
	return nil
}

// This defines the procedure for performing unique mashing processes
type MashProcedureType struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Initial grain temperature prior to the start of the mash
	GrainTemperature     *TemperatureType `protobuf:"bytes,2,opt,name=grain_temperature,json=grainTemperature,proto3" json:"grain_temperature,omitempty"`
	Notes                string           `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	MashSteps            []*MashStepType  `protobuf:"bytes,4,rep,name=mash_steps,json=mashSteps,proto3" json:"mash_steps,omitempty"`
	Name                 string           `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MashProcedureType) Reset()         { *m = MashProcedureType{} }
func (m *MashProcedureType) String() string { return proto.CompactTextString(m) }
func (*MashProcedureType) ProtoMessage()    {}
func (*MashProcedureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{1}
}

func (m *MashProcedureType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MashProcedureType.Unmarshal(m, b)
}
func (m *MashProcedureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MashProcedureType.Marshal(b, m, deterministic)
}
func (m *MashProcedureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MashProcedureType.Merge(m, src)
}
func (m *MashProcedureType) XXX_Size() int {
	return xxx_messageInfo_MashProcedureType.Size(m)
}
func (m *MashProcedureType) XXX_DiscardUnknown() {
	xxx_messageInfo_MashProcedureType.DiscardUnknown(m)
}

var xxx_messageInfo_MashProcedureType proto.InternalMessageInfo

func (m *MashProcedureType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MashProcedureType) GetGrainTemperature() *TemperatureType {
	if m != nil {
		return m.GrainTemperature
	}
	return nil
}

func (m *MashProcedureType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *MashProcedureType) GetMashSteps() []*MashStepType {
	if m != nil {
		return m.MashSteps
	}
	return nil
}

func (m *MashProcedureType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MashStepType - a per step representation occurring during the mash
type MashStepType struct {
	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StepTime *TimeType `protobuf:"bytes,2,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
	RampTime       *TimeType        `protobuf:"bytes,3,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,4,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	Description    string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Temperature of the water for an infusion step
	InfuseTemperature *TemperatureType              `protobuf:"bytes,6,opt,name=infuse_temperature,json=infuseTemperature,proto3" json:"infuse_temperature,omitempty"`
	StartPH           *AcidityType                  `protobuf:"bytes,7,opt,name=start_pH,json=startPH,proto3" json:"start_pH,omitempty"`
	EndPH             *AcidityType                  `protobuf:"bytes,8,opt,name=end_pH,json=endPH,proto3" json:"end_pH,omitempty"`
	Name              string                        `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Type              MashStepType_MashStepTypeType `protobuf:"varint,10,opt,name=type,proto3,enum=beerproto.MashStepType_MashStepTypeType" json:"type,omitempty"`
	Amount            *VolumeType                   `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	StepTemperature   *TemperatureType              `protobuf:"bytes,12,opt,name=step_temperature,json=stepTemperature,proto3" json:"step_temperature,omitempty"`
	// Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
	WaterGrainRatio      *SpecificVolumeType `protobuf:"bytes,13,opt,name=water_grain_ratio,json=waterGrainRatio,proto3" json:"water_grain_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MashStepType) Reset()         { *m = MashStepType{} }
func (m *MashStepType) String() string { return proto.CompactTextString(m) }
func (*MashStepType) ProtoMessage()    {}
func (*MashStepType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{2}
}

func (m *MashStepType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MashStepType.Unmarshal(m, b)
}
func (m *MashStepType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MashStepType.Marshal(b, m, deterministic)
}
func (m *MashStepType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MashStepType.Merge(m, src)
}
func (m *MashStepType) XXX_Size() int {
	return xxx_messageInfo_MashStepType.Size(m)
}
func (m *MashStepType) XXX_DiscardUnknown() {
	xxx_messageInfo_MashStepType.DiscardUnknown(m)
}

var xxx_messageInfo_MashStepType proto.InternalMessageInfo

func (m *MashStepType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MashStepType) GetStepTime() *TimeType {
	if m != nil {
		return m.StepTime
	}
	return nil
}

func (m *MashStepType) GetRampTime() *TimeType {
	if m != nil {
		return m.RampTime
	}
	return nil
}

func (m *MashStepType) GetEndTemperature() *TemperatureType {
	if m != nil {
		return m.EndTemperature
	}
	return nil
}

func (m *MashStepType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MashStepType) GetInfuseTemperature() *TemperatureType {
	if m != nil {
		return m.InfuseTemperature
	}
	return nil
}

func (m *MashStepType) GetStartPH() *AcidityType {
	if m != nil {
		return m.StartPH
	}
	return nil
}

func (m *MashStepType) GetEndPH() *AcidityType {
	if m != nil {
		return m.EndPH
	}
	return nil
}

func (m *MashStepType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MashStepType) GetType() MashStepType_MashStepTypeType {
	if m != nil {
		return m.Type
	}
	return MashStepType_NULL
}

func (m *MashStepType) GetAmount() *VolumeType {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MashStepType) GetStepTemperature() *TemperatureType {
	if m != nil {
		return m.StepTemperature
	}
	return nil
}

func (m *MashStepType) GetWaterGrainRatio() *SpecificVolumeType {
	if m != nil {
		return m.WaterGrainRatio
	}
	return nil
}

type TimeType struct {
	Value                float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 TimeType_TimeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TimeType_TimeUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TimeType) Reset()         { *m = TimeType{} }
func (m *TimeType) String() string { return proto.CompactTextString(m) }
func (*TimeType) ProtoMessage()    {}
func (*TimeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{3}
}

func (m *TimeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeType.Unmarshal(m, b)
}
func (m *TimeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeType.Marshal(b, m, deterministic)
}
func (m *TimeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeType.Merge(m, src)
}
func (m *TimeType) XXX_Size() int {
	return xxx_messageInfo_TimeType.Size(m)
}
func (m *TimeType) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeType.DiscardUnknown(m)
}

var xxx_messageInfo_TimeType proto.InternalMessageInfo

func (m *TimeType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TimeType) GetUnit() TimeType_TimeUnitType {
	if m != nil {
		return m.Unit
	}
	return TimeType_NULL
}

type AcidityType struct {
	Value                float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 AcidityType_AcidityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.AcidityType_AcidityUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AcidityType) Reset()         { *m = AcidityType{} }
func (m *AcidityType) String() string { return proto.CompactTextString(m) }
func (*AcidityType) ProtoMessage()    {}
func (*AcidityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{4}
}

func (m *AcidityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcidityType.Unmarshal(m, b)
}
func (m *AcidityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcidityType.Marshal(b, m, deterministic)
}
func (m *AcidityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcidityType.Merge(m, src)
}
func (m *AcidityType) XXX_Size() int {
	return xxx_messageInfo_AcidityType.Size(m)
}
func (m *AcidityType) XXX_DiscardUnknown() {
	xxx_messageInfo_AcidityType.DiscardUnknown(m)
}

var xxx_messageInfo_AcidityType proto.InternalMessageInfo

func (m *AcidityType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AcidityType) GetUnit() AcidityType_AcidityUnitType {
	if m != nil {
		return m.Unit
	}
	return AcidityType_NULL
}

type VolumeType struct {
	Value                float64                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 VolumeType_VolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.VolumeType_VolumeUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VolumeType) Reset()         { *m = VolumeType{} }
func (m *VolumeType) String() string { return proto.CompactTextString(m) }
func (*VolumeType) ProtoMessage()    {}
func (*VolumeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{5}
}

func (m *VolumeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeType.Unmarshal(m, b)
}
func (m *VolumeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeType.Marshal(b, m, deterministic)
}
func (m *VolumeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeType.Merge(m, src)
}
func (m *VolumeType) XXX_Size() int {
	return xxx_messageInfo_VolumeType.Size(m)
}
func (m *VolumeType) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeType.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeType proto.InternalMessageInfo

func (m *VolumeType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *VolumeType) GetUnit() VolumeType_VolumeUnitType {
	if m != nil {
		return m.Unit
	}
	return VolumeType_NULL
}

type SpecificVolumeType struct {
	Value                float64                                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 SpecificVolumeType_SpecificVolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificVolumeType_SpecificVolumeUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *SpecificVolumeType) Reset()         { *m = SpecificVolumeType{} }
func (m *SpecificVolumeType) String() string { return proto.CompactTextString(m) }
func (*SpecificVolumeType) ProtoMessage()    {}
func (*SpecificVolumeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{6}
}

func (m *SpecificVolumeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecificVolumeType.Unmarshal(m, b)
}
func (m *SpecificVolumeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecificVolumeType.Marshal(b, m, deterministic)
}
func (m *SpecificVolumeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecificVolumeType.Merge(m, src)
}
func (m *SpecificVolumeType) XXX_Size() int {
	return xxx_messageInfo_SpecificVolumeType.Size(m)
}
func (m *SpecificVolumeType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecificVolumeType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecificVolumeType proto.InternalMessageInfo

func (m *SpecificVolumeType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SpecificVolumeType) GetUnit() SpecificVolumeType_SpecificVolumeUnitType {
	if m != nil {
		return m.Unit
	}
	return SpecificVolumeType_NULL
}

// RecipeType composes the information stored in a recipe
type RecipeType struct {
	// Used to store each efficiency component, including conversion, and brewhouse
	Efficiency *EfficiencyType  `protobuf:"bytes,1,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Style      *RecipeStyleType `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
	IbuEstimate *IBUEstimateType `protobuf:"bytes,3,opt,name=ibu_estimate,json=ibuEstimate,proto3" json:"ibu_estimate,omitempty"`
	// The color of the finished beer, using SRM or EBC
	ColorEstimate *ColorType `protobuf:"bytes,4,opt,name=color_estimate,json=colorEstimate,proto3" json:"color_estimate,omitempty"`
	// The final beer pH at the end of fermentation
	BeerPH   *AcidityType              `protobuf:"bytes,5,opt,name=beer_pH,json=beerPH,proto3" json:"beer_pH,omitempty"`
	Name     string                    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type     RecipeType_RecipeTypeType `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.RecipeType_RecipeTypeType" json:"type,omitempty"`
	Coauthor string                    `protobuf:"bytes,8,opt,name=coauthor,proto3" json:"coauthor,omitempty"`
	// The gravity of wort when transffered to the fermenter
	OriginalGravity *GravityType `protobuf:"bytes,9,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	// The gravity of beer at the end of fermentation
	FinalGravity *GravityType `protobuf:"bytes,10,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	// The final carbonation of the beer when packaged or served
	Carbonation float64 `protobuf:"fixed64,11,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	// FermentationProcedureType defines the procedure for performing fermentation
	Fermentation *FermentationProcedureType `protobuf:"bytes,12,opt,name=fermentation,proto3" json:"fermentation,omitempty"`
	Author       string                     `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
	// A collection of all ingredients used for the recipe
	Ingredients *IngredientsType `protobuf:"bytes,14,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	// This defines the procedure for performing unique mashing processes
	Mash *MashProcedureType `protobuf:"bytes,15,opt,name=mash,proto3" json:"mash,omitempty"`
	// Describes the procedure for packaging your beverage
	Packaging *PackagingProcedureType `protobuf:"bytes,16,opt,name=packaging,proto3" json:"packaging,omitempty"`
	// Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
	Boil *BoilProcedureType `protobuf:"bytes,17,opt,name=boil,proto3" json:"boil,omitempty"`
	// Used to store subjective tasting notes, and rating
	Taste           *TasteType `protobuf:"bytes,18,opt,name=taste,proto3" json:"taste,omitempty"`
	CaloriesPerPint float64    `protobuf:"fixed64,19,opt,name=calories_per_pint,json=caloriesPerPint,proto3" json:"calories_per_pint,omitempty"`
	Created         string     `protobuf:"bytes,20,opt,name=created,proto3" json:"created,omitempty"`
	// The volume into the fermenter
	BatchSize       *VolumeType  `protobuf:"bytes,21,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Notes           string       `protobuf:"bytes,22,opt,name=notes,proto3" json:"notes,omitempty"`
	AlcoholByVolume *PercentType `protobuf:"bytes,23,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	// The total apparent attenuation of the finished beer after fermentation
	ApparentAttenuation  *PercentType `protobuf:"bytes,24,opt,name=apparent_attenuation,json=apparentAttenuation,proto3" json:"apparent_attenuation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RecipeType) Reset()         { *m = RecipeType{} }
func (m *RecipeType) String() string { return proto.CompactTextString(m) }
func (*RecipeType) ProtoMessage()    {}
func (*RecipeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{7}
}

func (m *RecipeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecipeType.Unmarshal(m, b)
}
func (m *RecipeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecipeType.Marshal(b, m, deterministic)
}
func (m *RecipeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipeType.Merge(m, src)
}
func (m *RecipeType) XXX_Size() int {
	return xxx_messageInfo_RecipeType.Size(m)
}
func (m *RecipeType) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipeType.DiscardUnknown(m)
}

var xxx_messageInfo_RecipeType proto.InternalMessageInfo

func (m *RecipeType) GetEfficiency() *EfficiencyType {
	if m != nil {
		return m.Efficiency
	}
	return nil
}

func (m *RecipeType) GetStyle() *RecipeStyleType {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *RecipeType) GetIbuEstimate() *IBUEstimateType {
	if m != nil {
		return m.IbuEstimate
	}
	return nil
}

func (m *RecipeType) GetColorEstimate() *ColorType {
	if m != nil {
		return m.ColorEstimate
	}
	return nil
}

func (m *RecipeType) GetBeerPH() *AcidityType {
	if m != nil {
		return m.BeerPH
	}
	return nil
}

func (m *RecipeType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecipeType) GetType() RecipeType_RecipeTypeType {
	if m != nil {
		return m.Type
	}
	return RecipeType_NULL
}

func (m *RecipeType) GetCoauthor() string {
	if m != nil {
		return m.Coauthor
	}
	return ""
}

func (m *RecipeType) GetOriginalGravity() *GravityType {
	if m != nil {
		return m.OriginalGravity
	}
	return nil
}

func (m *RecipeType) GetFinalGravity() *GravityType {
	if m != nil {
		return m.FinalGravity
	}
	return nil
}

func (m *RecipeType) GetCarbonation() float64 {
	if m != nil {
		return m.Carbonation
	}
	return 0
}

func (m *RecipeType) GetFermentation() *FermentationProcedureType {
	if m != nil {
		return m.Fermentation
	}
	return nil
}

func (m *RecipeType) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *RecipeType) GetIngredients() *IngredientsType {
	if m != nil {
		return m.Ingredients
	}
	return nil
}

func (m *RecipeType) GetMash() *MashProcedureType {
	if m != nil {
		return m.Mash
	}
	return nil
}

func (m *RecipeType) GetPackaging() *PackagingProcedureType {
	if m != nil {
		return m.Packaging
	}
	return nil
}

func (m *RecipeType) GetBoil() *BoilProcedureType {
	if m != nil {
		return m.Boil
	}
	return nil
}

func (m *RecipeType) GetTaste() *TasteType {
	if m != nil {
		return m.Taste
	}
	return nil
}

func (m *RecipeType) GetCaloriesPerPint() float64 {
	if m != nil {
		return m.CaloriesPerPint
	}
	return 0
}

func (m *RecipeType) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *RecipeType) GetBatchSize() *VolumeType {
	if m != nil {
		return m.BatchSize
	}
	return nil
}

func (m *RecipeType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *RecipeType) GetAlcoholByVolume() *PercentType {
	if m != nil {
		return m.AlcoholByVolume
	}
	return nil
}

func (m *RecipeType) GetApparentAttenuation() *PercentType {
	if m != nil {
		return m.ApparentAttenuation
	}
	return nil
}

// The efficiencyType stores each efficiency component
type EfficiencyType struct {
	// The percentage of sugar from the grain yield that is extracted and converted during the mash
	Conversion *PercentType `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// The percentage of sugar that makes it from the mash tun to the kettle
	Lauter *PercentType `protobuf:"bytes,2,opt,name=lauter,proto3" json:"lauter,omitempty"`
	// The percentage of sugar that makes it from the grain to the kettle
	Mash *PercentType `protobuf:"bytes,3,opt,name=mash,proto3" json:"mash,omitempty"`
	// The percentage of sugar that makes it from the grain to the fermenter
	Brewhouse            *PercentType `protobuf:"bytes,4,opt,name=brewhouse,proto3" json:"brewhouse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EfficiencyType) Reset()         { *m = EfficiencyType{} }
func (m *EfficiencyType) String() string { return proto.CompactTextString(m) }
func (*EfficiencyType) ProtoMessage()    {}
func (*EfficiencyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{8}
}

func (m *EfficiencyType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfficiencyType.Unmarshal(m, b)
}
func (m *EfficiencyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfficiencyType.Marshal(b, m, deterministic)
}
func (m *EfficiencyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfficiencyType.Merge(m, src)
}
func (m *EfficiencyType) XXX_Size() int {
	return xxx_messageInfo_EfficiencyType.Size(m)
}
func (m *EfficiencyType) XXX_DiscardUnknown() {
	xxx_messageInfo_EfficiencyType.DiscardUnknown(m)
}

var xxx_messageInfo_EfficiencyType proto.InternalMessageInfo

func (m *EfficiencyType) GetConversion() *PercentType {
	if m != nil {
		return m.Conversion
	}
	return nil
}

func (m *EfficiencyType) GetLauter() *PercentType {
	if m != nil {
		return m.Lauter
	}
	return nil
}

func (m *EfficiencyType) GetMash() *PercentType {
	if m != nil {
		return m.Mash
	}
	return nil
}

func (m *EfficiencyType) GetBrewhouse() *PercentType {
	if m != nil {
		return m.Brewhouse
	}
	return nil
}

// RecipeStyleType defines style information stored in a recipe record
type RecipeStyleType struct {
	Type                 RecipeStyleType_StyleCategories `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.RecipeStyleType_StyleCategories" json:"type,omitempty"`
	Name                 string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category             string                          `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	CategoryNumber       int32                           `protobuf:"varint,4,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	StyleLetter          string                          `protobuf:"bytes,5,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	StyleGuide           string                          `protobuf:"bytes,6,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RecipeStyleType) Reset()         { *m = RecipeStyleType{} }
func (m *RecipeStyleType) String() string { return proto.CompactTextString(m) }
func (*RecipeStyleType) ProtoMessage()    {}
func (*RecipeStyleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{9}
}

func (m *RecipeStyleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecipeStyleType.Unmarshal(m, b)
}
func (m *RecipeStyleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecipeStyleType.Marshal(b, m, deterministic)
}
func (m *RecipeStyleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipeStyleType.Merge(m, src)
}
func (m *RecipeStyleType) XXX_Size() int {
	return xxx_messageInfo_RecipeStyleType.Size(m)
}
func (m *RecipeStyleType) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipeStyleType.DiscardUnknown(m)
}

var xxx_messageInfo_RecipeStyleType proto.InternalMessageInfo

func (m *RecipeStyleType) GetType() RecipeStyleType_StyleCategories {
	if m != nil {
		return m.Type
	}
	return RecipeStyleType_NULL
}

func (m *RecipeStyleType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecipeStyleType) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *RecipeStyleType) GetCategoryNumber() int32 {
	if m != nil {
		return m.CategoryNumber
	}
	return 0
}

func (m *RecipeStyleType) GetStyleLetter() string {
	if m != nil {
		return m.StyleLetter
	}
	return ""
}

func (m *RecipeStyleType) GetStyleGuide() string {
	if m != nil {
		return m.StyleGuide
	}
	return ""
}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
type IBUEstimateType struct {
	Method               IBUEstimateType_IBUMethodType `protobuf:"varint,1,opt,name=method,proto3,enum=beerproto.IBUEstimateType_IBUMethodType" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *IBUEstimateType) Reset()         { *m = IBUEstimateType{} }
func (m *IBUEstimateType) String() string { return proto.CompactTextString(m) }
func (*IBUEstimateType) ProtoMessage()    {}
func (*IBUEstimateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{10}
}

func (m *IBUEstimateType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IBUEstimateType.Unmarshal(m, b)
}
func (m *IBUEstimateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IBUEstimateType.Marshal(b, m, deterministic)
}
func (m *IBUEstimateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBUEstimateType.Merge(m, src)
}
func (m *IBUEstimateType) XXX_Size() int {
	return xxx_messageInfo_IBUEstimateType.Size(m)
}
func (m *IBUEstimateType) XXX_DiscardUnknown() {
	xxx_messageInfo_IBUEstimateType.DiscardUnknown(m)
}

var xxx_messageInfo_IBUEstimateType proto.InternalMessageInfo

func (m *IBUEstimateType) GetMethod() IBUEstimateType_IBUMethodType {
	if m != nil {
		return m.Method
	}
	return IBUEstimateType_NULL
}

type IngredientsType struct {
	// miscellaneous_additions collects all the miscellaneous items for use in a recipe
	MiscellaneousAdditions []*MiscellaneousAdditionType `protobuf:"bytes,1,rep,name=miscellaneous_additions,json=miscellaneousAdditions,proto3" json:"miscellaneous_additions,omitempty"`
	// culture_additions collects all the culture items for use in a recipe
	CultureAdditions []*CultureAdditionType `protobuf:"bytes,2,rep,name=culture_additions,json=cultureAdditions,proto3" json:"culture_additions,omitempty"`
	// water_additions collects all the water items for use in a recipe
	WaterAdditions []*WaterAdditionType `protobuf:"bytes,3,rep,name=water_additions,json=waterAdditions,proto3" json:"water_additions,omitempty"`
	// fermentable_additions collects all the fermentable ingredients for use in a recipe
	FermentableAdditions []*FermentableAdditionType `protobuf:"bytes,4,rep,name=fermentable_additions,json=fermentableAdditions,proto3" json:"fermentable_additions,omitempty"`
	// hop_additions collects all the hops for use in a recipe
	HopAdditions         []*HopAdditionType `protobuf:"bytes,5,rep,name=hop_additions,json=hopAdditions,proto3" json:"hop_additions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IngredientsType) Reset()         { *m = IngredientsType{} }
func (m *IngredientsType) String() string { return proto.CompactTextString(m) }
func (*IngredientsType) ProtoMessage()    {}
func (*IngredientsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{11}
}

func (m *IngredientsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngredientsType.Unmarshal(m, b)
}
func (m *IngredientsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngredientsType.Marshal(b, m, deterministic)
}
func (m *IngredientsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngredientsType.Merge(m, src)
}
func (m *IngredientsType) XXX_Size() int {
	return xxx_messageInfo_IngredientsType.Size(m)
}
func (m *IngredientsType) XXX_DiscardUnknown() {
	xxx_messageInfo_IngredientsType.DiscardUnknown(m)
}

var xxx_messageInfo_IngredientsType proto.InternalMessageInfo

func (m *IngredientsType) GetMiscellaneousAdditions() []*MiscellaneousAdditionType {
	if m != nil {
		return m.MiscellaneousAdditions
	}
	return nil
}

func (m *IngredientsType) GetCultureAdditions() []*CultureAdditionType {
	if m != nil {
		return m.CultureAdditions
	}
	return nil
}

func (m *IngredientsType) GetWaterAdditions() []*WaterAdditionType {
	if m != nil {
		return m.WaterAdditions
	}
	return nil
}

func (m *IngredientsType) GetFermentableAdditions() []*FermentableAdditionType {
	if m != nil {
		return m.FermentableAdditions
	}
	return nil
}

func (m *IngredientsType) GetHopAdditions() []*HopAdditionType {
	if m != nil {
		return m.HopAdditions
	}
	return nil
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
type MiscellaneousAdditionType struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Producer string `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing    *TimingType           `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	ProductId string                `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousBaseType `protobuf:"varint,6,opt,name=type,proto3,enum=beerproto.MiscellaneousBaseType" json:"type,omitempty"`
	// Types that are valid to be assigned to Amount:
	//	*MiscellaneousAdditionType_Mass
	//	*MiscellaneousAdditionType_Unit
	//	*MiscellaneousAdditionType_Volume
	Amount               isMiscellaneousAdditionType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *MiscellaneousAdditionType) Reset()         { *m = MiscellaneousAdditionType{} }
func (m *MiscellaneousAdditionType) String() string { return proto.CompactTextString(m) }
func (*MiscellaneousAdditionType) ProtoMessage()    {}
func (*MiscellaneousAdditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{12}
}

func (m *MiscellaneousAdditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiscellaneousAdditionType.Unmarshal(m, b)
}
func (m *MiscellaneousAdditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiscellaneousAdditionType.Marshal(b, m, deterministic)
}
func (m *MiscellaneousAdditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscellaneousAdditionType.Merge(m, src)
}
func (m *MiscellaneousAdditionType) XXX_Size() int {
	return xxx_messageInfo_MiscellaneousAdditionType.Size(m)
}
func (m *MiscellaneousAdditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscellaneousAdditionType.DiscardUnknown(m)
}

var xxx_messageInfo_MiscellaneousAdditionType proto.InternalMessageInfo

func (m *MiscellaneousAdditionType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MiscellaneousAdditionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MiscellaneousAdditionType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *MiscellaneousAdditionType) GetTiming() *TimingType {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *MiscellaneousAdditionType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *MiscellaneousAdditionType) GetType() MiscellaneousBaseType {
	if m != nil {
		return m.Type
	}
	return MiscellaneousBaseType_NULL
}

type isMiscellaneousAdditionType_Amount interface {
	isMiscellaneousAdditionType_Amount()
}

type MiscellaneousAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,7,opt,name=mass,proto3,oneof"`
}

type MiscellaneousAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,8,opt,name=unit,proto3,oneof"`
}

type MiscellaneousAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,9,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousAdditionType_Mass) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Unit) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Volume) isMiscellaneousAdditionType_Amount() {}

func (m *MiscellaneousAdditionType) GetAmount() isMiscellaneousAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MiscellaneousAdditionType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*MiscellaneousAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *MiscellaneousAdditionType) GetUnit() *UnitType {
	if x, ok := m.GetAmount().(*MiscellaneousAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MiscellaneousAdditionType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*MiscellaneousAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MiscellaneousAdditionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MiscellaneousAdditionType_Mass)(nil),
		(*MiscellaneousAdditionType_Unit)(nil),
		(*MiscellaneousAdditionType_Volume)(nil),
	}
}

type MassType struct {
	Value                float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 MassType_MassUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.MassType_MassUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MassType) Reset()         { *m = MassType{} }
func (m *MassType) String() string { return proto.CompactTextString(m) }
func (*MassType) ProtoMessage()    {}
func (*MassType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{13}
}

func (m *MassType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MassType.Unmarshal(m, b)
}
func (m *MassType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MassType.Marshal(b, m, deterministic)
}
func (m *MassType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MassType.Merge(m, src)
}
func (m *MassType) XXX_Size() int {
	return xxx_messageInfo_MassType.Size(m)
}
func (m *MassType) XXX_DiscardUnknown() {
	xxx_messageInfo_MassType.DiscardUnknown(m)
}

var xxx_messageInfo_MassType proto.InternalMessageInfo

func (m *MassType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MassType) GetUnit() MassType_MassUnitType {
	if m != nil {
		return m.Unit
	}
	return MassType_NULL
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
type UnitType struct {
	Value                float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 UnitType_UnitUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.UnitType_UnitUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UnitType) Reset()         { *m = UnitType{} }
func (m *UnitType) String() string { return proto.CompactTextString(m) }
func (*UnitType) ProtoMessage()    {}
func (*UnitType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{14}
}

func (m *UnitType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitType.Unmarshal(m, b)
}
func (m *UnitType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitType.Marshal(b, m, deterministic)
}
func (m *UnitType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitType.Merge(m, src)
}
func (m *UnitType) XXX_Size() int {
	return xxx_messageInfo_UnitType.Size(m)
}
func (m *UnitType) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitType.DiscardUnknown(m)
}

var xxx_messageInfo_UnitType proto.InternalMessageInfo

func (m *UnitType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UnitType) GetUnit() UnitType_UnitUnitType {
	if m != nil {
		return m.Unit
	}
	return UnitType_NULL
}

// CultureAdditionType collects the attributes of each culture ingredient for use in a recipe
type CultureAdditionType struct {
	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Form              CultureBaseForm `protobuf:"varint,2,opt,name=form,proto3,enum=beerproto.CultureBaseForm" json:"form,omitempty"`
	ProductId         string          `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name              string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CellCountBillions int32           `protobuf:"varint,5,opt,name=cell_count_billions,json=cellCountBillions,proto3" json:"cell_count_billions,omitempty"`
	TimesCultured     int32           `protobuf:"varint,6,opt,name=times_cultured,json=timesCultured,proto3" json:"times_cultured,omitempty"`
	Producer          string          `protobuf:"bytes,7,opt,name=producer,proto3" json:"producer,omitempty"`
	Type              CultureBaseType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.CultureBaseType" json:"type,omitempty"`
	// The expected, or measured apparent attenuation for a given culture in a given recipe. In comparison to attenuation range, this is a single value.
	Attenuation *PercentType `protobuf:"bytes,9,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,10,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are valid to be assigned to Amount:
	//	*CultureAdditionType_Mass
	//	*CultureAdditionType_Unit
	//	*CultureAdditionType_Volume
	Amount               isCultureAdditionType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CultureAdditionType) Reset()         { *m = CultureAdditionType{} }
func (m *CultureAdditionType) String() string { return proto.CompactTextString(m) }
func (*CultureAdditionType) ProtoMessage()    {}
func (*CultureAdditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{15}
}

func (m *CultureAdditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CultureAdditionType.Unmarshal(m, b)
}
func (m *CultureAdditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CultureAdditionType.Marshal(b, m, deterministic)
}
func (m *CultureAdditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CultureAdditionType.Merge(m, src)
}
func (m *CultureAdditionType) XXX_Size() int {
	return xxx_messageInfo_CultureAdditionType.Size(m)
}
func (m *CultureAdditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_CultureAdditionType.DiscardUnknown(m)
}

var xxx_messageInfo_CultureAdditionType proto.InternalMessageInfo

func (m *CultureAdditionType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CultureAdditionType) GetForm() CultureBaseForm {
	if m != nil {
		return m.Form
	}
	return CultureBaseForm_NULL_CultureBaseForm
}

func (m *CultureAdditionType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *CultureAdditionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CultureAdditionType) GetCellCountBillions() int32 {
	if m != nil {
		return m.CellCountBillions
	}
	return 0
}

func (m *CultureAdditionType) GetTimesCultured() int32 {
	if m != nil {
		return m.TimesCultured
	}
	return 0
}

func (m *CultureAdditionType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *CultureAdditionType) GetType() CultureBaseType {
	if m != nil {
		return m.Type
	}
	return CultureBaseType_NULL_CultureBaseType
}

func (m *CultureAdditionType) GetAttenuation() *PercentType {
	if m != nil {
		return m.Attenuation
	}
	return nil
}

func (m *CultureAdditionType) GetTiming() *TimingType {
	if m != nil {
		return m.Timing
	}
	return nil
}

type isCultureAdditionType_Amount interface {
	isCultureAdditionType_Amount()
}

type CultureAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type CultureAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,12,opt,name=unit,proto3,oneof"`
}

type CultureAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,13,opt,name=volume,proto3,oneof"`
}

func (*CultureAdditionType_Mass) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Unit) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Volume) isCultureAdditionType_Amount() {}

func (m *CultureAdditionType) GetAmount() isCultureAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *CultureAdditionType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*CultureAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *CultureAdditionType) GetUnit() *UnitType {
	if x, ok := m.GetAmount().(*CultureAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *CultureAdditionType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*CultureAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CultureAdditionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CultureAdditionType_Mass)(nil),
		(*CultureAdditionType_Unit)(nil),
		(*CultureAdditionType_Volume)(nil),
	}
}

// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
type TimingType struct {
	// What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
	Time *TimeType `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
	Duration *TimeType `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
	Continuous bool `protobuf:"varint,3,opt,name=continuous,proto3" json:"continuous,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.
	SpecificGravity *GravityType `protobuf:"bytes,4,opt,name=specific_gravity,json=specificGravity,proto3" json:"specific_gravity,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. eg Add brett when pH is 3.4.
	Ph *AcidityType `protobuf:"bytes,5,opt,name=ph,proto3" json:"ph,omitempty"`
	// Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
	Step                 int32              `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	Use                  TimingType_UseType `protobuf:"varint,7,opt,name=use,proto3,enum=beerproto.TimingType_UseType" json:"use,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TimingType) Reset()         { *m = TimingType{} }
func (m *TimingType) String() string { return proto.CompactTextString(m) }
func (*TimingType) ProtoMessage()    {}
func (*TimingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{16}
}

func (m *TimingType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimingType.Unmarshal(m, b)
}
func (m *TimingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimingType.Marshal(b, m, deterministic)
}
func (m *TimingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimingType.Merge(m, src)
}
func (m *TimingType) XXX_Size() int {
	return xxx_messageInfo_TimingType.Size(m)
}
func (m *TimingType) XXX_DiscardUnknown() {
	xxx_messageInfo_TimingType.DiscardUnknown(m)
}

var xxx_messageInfo_TimingType proto.InternalMessageInfo

func (m *TimingType) GetTime() *TimeType {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TimingType) GetDuration() *TimeType {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *TimingType) GetContinuous() bool {
	if m != nil {
		return m.Continuous
	}
	return false
}

func (m *TimingType) GetSpecificGravity() *GravityType {
	if m != nil {
		return m.SpecificGravity
	}
	return nil
}

func (m *TimingType) GetPh() *AcidityType {
	if m != nil {
		return m.Ph
	}
	return nil
}

func (m *TimingType) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *TimingType) GetUse() TimingType_UseType {
	if m != nil {
		return m.Use
	}
	return TimingType_NULL
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
type WaterAdditionType struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Flouride             *ConcentrationType `protobuf:"bytes,2,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate              *ConcentrationType `protobuf:"bytes,3,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	Producer             string             `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	Nitrate              *ConcentrationType `protobuf:"bytes,5,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	Nitrite              *ConcentrationType `protobuf:"bytes,6,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	Chloride             *ConcentrationType `protobuf:"bytes,7,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Amount               *VolumeType        `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Name                 string             `protobuf:"bytes,89,opt,name=name,proto3" json:"name,omitempty"`
	Potassium            *ConcentrationType `protobuf:"bytes,10,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Magnesium            *ConcentrationType `protobuf:"bytes,11,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Iron                 *ConcentrationType `protobuf:"bytes,12,opt,name=iron,proto3" json:"iron,omitempty"`
	Bicarbonate          *ConcentrationType `protobuf:"bytes,13,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	Calcium              *ConcentrationType `protobuf:"bytes,14,opt,name=calcium,proto3" json:"calcium,omitempty"`
	Carbonate            *ConcentrationType `protobuf:"bytes,15,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	Sodium               *ConcentrationType `protobuf:"bytes,16,opt,name=sodium,proto3" json:"sodium,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WaterAdditionType) Reset()         { *m = WaterAdditionType{} }
func (m *WaterAdditionType) String() string { return proto.CompactTextString(m) }
func (*WaterAdditionType) ProtoMessage()    {}
func (*WaterAdditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{17}
}

func (m *WaterAdditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaterAdditionType.Unmarshal(m, b)
}
func (m *WaterAdditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaterAdditionType.Marshal(b, m, deterministic)
}
func (m *WaterAdditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaterAdditionType.Merge(m, src)
}
func (m *WaterAdditionType) XXX_Size() int {
	return xxx_messageInfo_WaterAdditionType.Size(m)
}
func (m *WaterAdditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_WaterAdditionType.DiscardUnknown(m)
}

var xxx_messageInfo_WaterAdditionType proto.InternalMessageInfo

func (m *WaterAdditionType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WaterAdditionType) GetFlouride() *ConcentrationType {
	if m != nil {
		return m.Flouride
	}
	return nil
}

func (m *WaterAdditionType) GetSulfate() *ConcentrationType {
	if m != nil {
		return m.Sulfate
	}
	return nil
}

func (m *WaterAdditionType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *WaterAdditionType) GetNitrate() *ConcentrationType {
	if m != nil {
		return m.Nitrate
	}
	return nil
}

func (m *WaterAdditionType) GetNitrite() *ConcentrationType {
	if m != nil {
		return m.Nitrite
	}
	return nil
}

func (m *WaterAdditionType) GetChloride() *ConcentrationType {
	if m != nil {
		return m.Chloride
	}
	return nil
}

func (m *WaterAdditionType) GetAmount() *VolumeType {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WaterAdditionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WaterAdditionType) GetPotassium() *ConcentrationType {
	if m != nil {
		return m.Potassium
	}
	return nil
}

func (m *WaterAdditionType) GetMagnesium() *ConcentrationType {
	if m != nil {
		return m.Magnesium
	}
	return nil
}

func (m *WaterAdditionType) GetIron() *ConcentrationType {
	if m != nil {
		return m.Iron
	}
	return nil
}

func (m *WaterAdditionType) GetBicarbonate() *ConcentrationType {
	if m != nil {
		return m.Bicarbonate
	}
	return nil
}

func (m *WaterAdditionType) GetCalcium() *ConcentrationType {
	if m != nil {
		return m.Calcium
	}
	return nil
}

func (m *WaterAdditionType) GetCarbonate() *ConcentrationType {
	if m != nil {
		return m.Carbonate
	}
	return nil
}

func (m *WaterAdditionType) GetSodium() *ConcentrationType {
	if m != nil {
		return m.Sodium
	}
	return nil
}

type ConcentrationType struct {
	Value                float64                                 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 ConcentrationType_ConcentrationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ConcentrationType_ConcentrationUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ConcentrationType) Reset()         { *m = ConcentrationType{} }
func (m *ConcentrationType) String() string { return proto.CompactTextString(m) }
func (*ConcentrationType) ProtoMessage()    {}
func (*ConcentrationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{18}
}

func (m *ConcentrationType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcentrationType.Unmarshal(m, b)
}
func (m *ConcentrationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcentrationType.Marshal(b, m, deterministic)
}
func (m *ConcentrationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcentrationType.Merge(m, src)
}
func (m *ConcentrationType) XXX_Size() int {
	return xxx_messageInfo_ConcentrationType.Size(m)
}
func (m *ConcentrationType) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcentrationType.DiscardUnknown(m)
}

var xxx_messageInfo_ConcentrationType proto.InternalMessageInfo

func (m *ConcentrationType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ConcentrationType) GetUnit() ConcentrationType_ConcentrationUnitType {
	if m != nil {
		return m.Unit
	}
	return ConcentrationType_NULL
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
type FermentableAdditionType struct {
	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.FermentableBaseType" json:"type,omitempty"`
	Origin     string              `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,4,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,5,opt,name=yield,proto3" json:"yield,omitempty"`
	Color      *ColorType          `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	Name       string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Producer   string              `protobuf:"bytes,8,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId  string              `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,10,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are valid to be assigned to Amount:
	//	*FermentableAdditionType_Mass
	//	*FermentableAdditionType_Volume
	Amount               isFermentableAdditionType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FermentableAdditionType) Reset()         { *m = FermentableAdditionType{} }
func (m *FermentableAdditionType) String() string { return proto.CompactTextString(m) }
func (*FermentableAdditionType) ProtoMessage()    {}
func (*FermentableAdditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{19}
}

func (m *FermentableAdditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FermentableAdditionType.Unmarshal(m, b)
}
func (m *FermentableAdditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FermentableAdditionType.Marshal(b, m, deterministic)
}
func (m *FermentableAdditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FermentableAdditionType.Merge(m, src)
}
func (m *FermentableAdditionType) XXX_Size() int {
	return xxx_messageInfo_FermentableAdditionType.Size(m)
}
func (m *FermentableAdditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_FermentableAdditionType.DiscardUnknown(m)
}

var xxx_messageInfo_FermentableAdditionType proto.InternalMessageInfo

func (m *FermentableAdditionType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FermentableAdditionType) GetType() FermentableBaseType {
	if m != nil {
		return m.Type
	}
	return FermentableBaseType_NULL_FermentableBaseType
}

func (m *FermentableAdditionType) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *FermentableAdditionType) GetGrainGroup() GrainGroup {
	if m != nil {
		return m.GrainGroup
	}
	return GrainGroup_NULL_GrainGroup
}

func (m *FermentableAdditionType) GetYield() *YieldType {
	if m != nil {
		return m.Yield
	}
	return nil
}

func (m *FermentableAdditionType) GetColor() *ColorType {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *FermentableAdditionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FermentableAdditionType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *FermentableAdditionType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *FermentableAdditionType) GetTiming() *TimingType {
	if m != nil {
		return m.Timing
	}
	return nil
}

type isFermentableAdditionType_Amount interface {
	isFermentableAdditionType_Amount()
}

type FermentableAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type FermentableAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*FermentableAdditionType_Mass) isFermentableAdditionType_Amount() {}

func (*FermentableAdditionType_Volume) isFermentableAdditionType_Amount() {}

func (m *FermentableAdditionType) GetAmount() isFermentableAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *FermentableAdditionType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*FermentableAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *FermentableAdditionType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*FermentableAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FermentableAdditionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FermentableAdditionType_Mass)(nil),
		(*FermentableAdditionType_Volume)(nil),
	}
}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
type YieldType struct {
	// Percentage yield compared to succrose of a fine grind. eg 80%
	FineGrind *PercentType `protobuf:"bytes,1,opt,name=fine_grind,json=fineGrind,proto3" json:"fine_grind,omitempty"`
	// Percentage yield compared to succrose of a coarse grind. eg 78%
	CoarseGrind *PercentType `protobuf:"bytes,2,opt,name=coarse_grind,json=coarseGrind,proto3" json:"coarse_grind,omitempty"`
	// The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
	FineCoarseDifference *PercentType `protobuf:"bytes,3,opt,name=fine_coarse_difference,json=fineCoarseDifference,proto3" json:"fine_coarse_difference,omitempty"`
	// The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
	Potential            *GravityType `protobuf:"bytes,4,opt,name=potential,proto3" json:"potential,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *YieldType) Reset()         { *m = YieldType{} }
func (m *YieldType) String() string { return proto.CompactTextString(m) }
func (*YieldType) ProtoMessage()    {}
func (*YieldType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{20}
}

func (m *YieldType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YieldType.Unmarshal(m, b)
}
func (m *YieldType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YieldType.Marshal(b, m, deterministic)
}
func (m *YieldType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YieldType.Merge(m, src)
}
func (m *YieldType) XXX_Size() int {
	return xxx_messageInfo_YieldType.Size(m)
}
func (m *YieldType) XXX_DiscardUnknown() {
	xxx_messageInfo_YieldType.DiscardUnknown(m)
}

var xxx_messageInfo_YieldType proto.InternalMessageInfo

func (m *YieldType) GetFineGrind() *PercentType {
	if m != nil {
		return m.FineGrind
	}
	return nil
}

func (m *YieldType) GetCoarseGrind() *PercentType {
	if m != nil {
		return m.CoarseGrind
	}
	return nil
}

func (m *YieldType) GetFineCoarseDifference() *PercentType {
	if m != nil {
		return m.FineCoarseDifference
	}
	return nil
}

func (m *YieldType) GetPotential() *GravityType {
	if m != nil {
		return m.Potential
	}
	return nil
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bil
type HopAdditionType struct {
	BetaAcid *PercentType       `protobuf:"bytes,1,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Producer string             `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	Origin   string             `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Year     string             `protobuf:"bytes,4,opt,name=year,proto3" json:"year,omitempty"`
	Form     HopVarietyBaseForm `protobuf:"varint,5,opt,name=form,proto3,enum=beerproto.HopVarietyBaseForm" json:"form,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	Timing    *TimingType  `protobuf:"bytes,6,opt,name=timing,proto3" json:"timing,omitempty"`
	Name      string       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ProductId string       `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid *PercentType `protobuf:"bytes,9,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	// Types that are valid to be assigned to Amount:
	//	*HopAdditionType_Mass
	//	*HopAdditionType_Volume
	Amount               isHopAdditionType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HopAdditionType) Reset()         { *m = HopAdditionType{} }
func (m *HopAdditionType) String() string { return proto.CompactTextString(m) }
func (*HopAdditionType) ProtoMessage()    {}
func (*HopAdditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{21}
}

func (m *HopAdditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HopAdditionType.Unmarshal(m, b)
}
func (m *HopAdditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HopAdditionType.Marshal(b, m, deterministic)
}
func (m *HopAdditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HopAdditionType.Merge(m, src)
}
func (m *HopAdditionType) XXX_Size() int {
	return xxx_messageInfo_HopAdditionType.Size(m)
}
func (m *HopAdditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_HopAdditionType.DiscardUnknown(m)
}

var xxx_messageInfo_HopAdditionType proto.InternalMessageInfo

func (m *HopAdditionType) GetBetaAcid() *PercentType {
	if m != nil {
		return m.BetaAcid
	}
	return nil
}

func (m *HopAdditionType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *HopAdditionType) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *HopAdditionType) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *HopAdditionType) GetForm() HopVarietyBaseForm {
	if m != nil {
		return m.Form
	}
	return HopVarietyBaseForm_NULL_HopVarietyBaseForm
}

func (m *HopAdditionType) GetTiming() *TimingType {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *HopAdditionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HopAdditionType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *HopAdditionType) GetAlphaAcid() *PercentType {
	if m != nil {
		return m.AlphaAcid
	}
	return nil
}

type isHopAdditionType_Amount interface {
	isHopAdditionType_Amount()
}

type HopAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,10,opt,name=mass,proto3,oneof"`
}

type HopAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,11,opt,name=volume,proto3,oneof"`
}

func (*HopAdditionType_Mass) isHopAdditionType_Amount() {}

func (*HopAdditionType_Volume) isHopAdditionType_Amount() {}

func (m *HopAdditionType) GetAmount() isHopAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *HopAdditionType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*HopAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *HopAdditionType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*HopAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HopAdditionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HopAdditionType_Mass)(nil),
		(*HopAdditionType_Volume)(nil),
	}
}

type TasteType struct {
	Notes                string   `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	Rating               float64  `protobuf:"fixed64,2,opt,name=rating,proto3" json:"rating,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TasteType) Reset()         { *m = TasteType{} }
func (m *TasteType) String() string { return proto.CompactTextString(m) }
func (*TasteType) ProtoMessage()    {}
func (*TasteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{22}
}

func (m *TasteType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasteType.Unmarshal(m, b)
}
func (m *TasteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasteType.Marshal(b, m, deterministic)
}
func (m *TasteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasteType.Merge(m, src)
}
func (m *TasteType) XXX_Size() int {
	return xxx_messageInfo_TasteType.Size(m)
}
func (m *TasteType) XXX_DiscardUnknown() {
	xxx_messageInfo_TasteType.DiscardUnknown(m)
}

var xxx_messageInfo_TasteType proto.InternalMessageInfo

func (m *TasteType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *TasteType) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
type MiscellaneousType struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor               string                      `protobuf:"bytes,2,opt,name=use_for,json=useFor,proto3" json:"use_for,omitempty"`
	Notes                string                      `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Name                 string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Producer             string                      `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId            string                      `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type                 MiscellaneousBaseType       `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.MiscellaneousBaseType" json:"type,omitempty"`
	Inventory            *MiscellaneousInventoryType `protobuf:"bytes,8,opt,name=inventory,proto3" json:"inventory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MiscellaneousType) Reset()         { *m = MiscellaneousType{} }
func (m *MiscellaneousType) String() string { return proto.CompactTextString(m) }
func (*MiscellaneousType) ProtoMessage()    {}
func (*MiscellaneousType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{23}
}

func (m *MiscellaneousType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiscellaneousType.Unmarshal(m, b)
}
func (m *MiscellaneousType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiscellaneousType.Marshal(b, m, deterministic)
}
func (m *MiscellaneousType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscellaneousType.Merge(m, src)
}
func (m *MiscellaneousType) XXX_Size() int {
	return xxx_messageInfo_MiscellaneousType.Size(m)
}
func (m *MiscellaneousType) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscellaneousType.DiscardUnknown(m)
}

var xxx_messageInfo_MiscellaneousType proto.InternalMessageInfo

func (m *MiscellaneousType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MiscellaneousType) GetUseFor() string {
	if m != nil {
		return m.UseFor
	}
	return ""
}

func (m *MiscellaneousType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *MiscellaneousType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MiscellaneousType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *MiscellaneousType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *MiscellaneousType) GetType() MiscellaneousBaseType {
	if m != nil {
		return m.Type
	}
	return MiscellaneousBaseType_NULL
}

func (m *MiscellaneousType) GetInventory() *MiscellaneousInventoryType {
	if m != nil {
		return m.Inventory
	}
	return nil
}

type MiscellaneousInventoryType struct {
	// Types that are valid to be assigned to Amount:
	//	*MiscellaneousInventoryType_Mass
	//	*MiscellaneousInventoryType_Unit
	//	*MiscellaneousInventoryType_Volume
	Amount               isMiscellaneousInventoryType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *MiscellaneousInventoryType) Reset()         { *m = MiscellaneousInventoryType{} }
func (m *MiscellaneousInventoryType) String() string { return proto.CompactTextString(m) }
func (*MiscellaneousInventoryType) ProtoMessage()    {}
func (*MiscellaneousInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{24}
}

func (m *MiscellaneousInventoryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiscellaneousInventoryType.Unmarshal(m, b)
}
func (m *MiscellaneousInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiscellaneousInventoryType.Marshal(b, m, deterministic)
}
func (m *MiscellaneousInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscellaneousInventoryType.Merge(m, src)
}
func (m *MiscellaneousInventoryType) XXX_Size() int {
	return xxx_messageInfo_MiscellaneousInventoryType.Size(m)
}
func (m *MiscellaneousInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscellaneousInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_MiscellaneousInventoryType proto.InternalMessageInfo

type isMiscellaneousInventoryType_Amount interface {
	isMiscellaneousInventoryType_Amount()
}

type MiscellaneousInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type MiscellaneousInventoryType_Unit struct {
	Unit *UnitType `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type MiscellaneousInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,3,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousInventoryType_Mass) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Unit) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Volume) isMiscellaneousInventoryType_Amount() {}

func (m *MiscellaneousInventoryType) GetAmount() isMiscellaneousInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MiscellaneousInventoryType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*MiscellaneousInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *MiscellaneousInventoryType) GetUnit() *UnitType {
	if x, ok := m.GetAmount().(*MiscellaneousInventoryType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MiscellaneousInventoryType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*MiscellaneousInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MiscellaneousInventoryType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MiscellaneousInventoryType_Mass)(nil),
		(*MiscellaneousInventoryType_Unit)(nil),
		(*MiscellaneousInventoryType_Volume)(nil),
	}
}

// StyleType provide information for Style categorization
type StyleType struct {
	Aroma                        string                    `protobuf:"bytes,1,opt,name=aroma,proto3" json:"aroma,omitempty"`
	Ingredients                  string                    `protobuf:"bytes,2,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	CategoryNumber               int32                     `protobuf:"varint,3,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	Notes                        string                    `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Flavor                       string                    `protobuf:"bytes,5,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mouthfeel                    string                    `protobuf:"bytes,6,opt,name=mouthfeel,proto3" json:"mouthfeel,omitempty"`
	FinalGravity                 *GravityRangeType         `protobuf:"bytes,7,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	StyleGuide                   string                    `protobuf:"bytes,8,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
	Color                        *ColorRangeType           `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`
	OriginalGravity              *GravityRangeType         `protobuf:"bytes,10,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	Examples                     string                    `protobuf:"bytes,11,opt,name=examples,proto3" json:"examples,omitempty"`
	Name                         string                    `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Carbonation                  *CarbonationRangeType     `protobuf:"bytes,13,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	AlcoholByVolume              *PercentRangeType         `protobuf:"bytes,14,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	InternationalBitternessUnits *BitternessRangeType      `protobuf:"bytes,15,opt,name=international_bitterness_units,json=internationalBitternessUnits,proto3" json:"international_bitterness_units,omitempty"`
	Appearance                   string                    `protobuf:"bytes,16,opt,name=appearance,proto3" json:"appearance,omitempty"`
	Category                     string                    `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
	StyleLetter                  string                    `protobuf:"bytes,18,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	Type                         StyleType_StyleCategories `protobuf:"varint,19,opt,name=type,proto3,enum=beerproto.StyleType_StyleCategories" json:"type,omitempty"`
	OverallImpression            string                    `protobuf:"bytes,20,opt,name=overall_impression,json=overallImpression,proto3" json:"overall_impression,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *StyleType) Reset()         { *m = StyleType{} }
func (m *StyleType) String() string { return proto.CompactTextString(m) }
func (*StyleType) ProtoMessage()    {}
func (*StyleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{25}
}

func (m *StyleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StyleType.Unmarshal(m, b)
}
func (m *StyleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StyleType.Marshal(b, m, deterministic)
}
func (m *StyleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StyleType.Merge(m, src)
}
func (m *StyleType) XXX_Size() int {
	return xxx_messageInfo_StyleType.Size(m)
}
func (m *StyleType) XXX_DiscardUnknown() {
	xxx_messageInfo_StyleType.DiscardUnknown(m)
}

var xxx_messageInfo_StyleType proto.InternalMessageInfo

func (m *StyleType) GetAroma() string {
	if m != nil {
		return m.Aroma
	}
	return ""
}

func (m *StyleType) GetIngredients() string {
	if m != nil {
		return m.Ingredients
	}
	return ""
}

func (m *StyleType) GetCategoryNumber() int32 {
	if m != nil {
		return m.CategoryNumber
	}
	return 0
}

func (m *StyleType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *StyleType) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *StyleType) GetMouthfeel() string {
	if m != nil {
		return m.Mouthfeel
	}
	return ""
}

func (m *StyleType) GetFinalGravity() *GravityRangeType {
	if m != nil {
		return m.FinalGravity
	}
	return nil
}

func (m *StyleType) GetStyleGuide() string {
	if m != nil {
		return m.StyleGuide
	}
	return ""
}

func (m *StyleType) GetColor() *ColorRangeType {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *StyleType) GetOriginalGravity() *GravityRangeType {
	if m != nil {
		return m.OriginalGravity
	}
	return nil
}

func (m *StyleType) GetExamples() string {
	if m != nil {
		return m.Examples
	}
	return ""
}

func (m *StyleType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StyleType) GetCarbonation() *CarbonationRangeType {
	if m != nil {
		return m.Carbonation
	}
	return nil
}

func (m *StyleType) GetAlcoholByVolume() *PercentRangeType {
	if m != nil {
		return m.AlcoholByVolume
	}
	return nil
}

func (m *StyleType) GetInternationalBitternessUnits() *BitternessRangeType {
	if m != nil {
		return m.InternationalBitternessUnits
	}
	return nil
}

func (m *StyleType) GetAppearance() string {
	if m != nil {
		return m.Appearance
	}
	return ""
}

func (m *StyleType) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *StyleType) GetStyleLetter() string {
	if m != nil {
		return m.StyleLetter
	}
	return ""
}

func (m *StyleType) GetType() StyleType_StyleCategories {
	if m != nil {
		return m.Type
	}
	return StyleType_NULL
}

func (m *StyleType) GetOverallImpression() string {
	if m != nil {
		return m.OverallImpression
	}
	return ""
}

type BitternessRangeType struct {
	Minimum              *BitternessType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *BitternessType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BitternessRangeType) Reset()         { *m = BitternessRangeType{} }
func (m *BitternessRangeType) String() string { return proto.CompactTextString(m) }
func (*BitternessRangeType) ProtoMessage()    {}
func (*BitternessRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{26}
}

func (m *BitternessRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitternessRangeType.Unmarshal(m, b)
}
func (m *BitternessRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitternessRangeType.Marshal(b, m, deterministic)
}
func (m *BitternessRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitternessRangeType.Merge(m, src)
}
func (m *BitternessRangeType) XXX_Size() int {
	return xxx_messageInfo_BitternessRangeType.Size(m)
}
func (m *BitternessRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_BitternessRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_BitternessRangeType proto.InternalMessageInfo

func (m *BitternessRangeType) GetMinimum() *BitternessType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *BitternessRangeType) GetMaximum() *BitternessType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

type BitternessType struct {
	Value                float64                           `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 BitternessType_BitternessUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.BitternessType_BitternessUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *BitternessType) Reset()         { *m = BitternessType{} }
func (m *BitternessType) String() string { return proto.CompactTextString(m) }
func (*BitternessType) ProtoMessage()    {}
func (*BitternessType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{27}
}

func (m *BitternessType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitternessType.Unmarshal(m, b)
}
func (m *BitternessType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitternessType.Marshal(b, m, deterministic)
}
func (m *BitternessType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitternessType.Merge(m, src)
}
func (m *BitternessType) XXX_Size() int {
	return xxx_messageInfo_BitternessType.Size(m)
}
func (m *BitternessType) XXX_DiscardUnknown() {
	xxx_messageInfo_BitternessType.DiscardUnknown(m)
}

var xxx_messageInfo_BitternessType proto.InternalMessageInfo

func (m *BitternessType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BitternessType) GetUnit() BitternessType_BitternessUnitType {
	if m != nil {
		return m.Unit
	}
	return BitternessType_NULL
}

type PercentRangeType struct {
	Minimum              *PercentType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *PercentType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PercentRangeType) Reset()         { *m = PercentRangeType{} }
func (m *PercentRangeType) String() string { return proto.CompactTextString(m) }
func (*PercentRangeType) ProtoMessage()    {}
func (*PercentRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{28}
}

func (m *PercentRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PercentRangeType.Unmarshal(m, b)
}
func (m *PercentRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PercentRangeType.Marshal(b, m, deterministic)
}
func (m *PercentRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PercentRangeType.Merge(m, src)
}
func (m *PercentRangeType) XXX_Size() int {
	return xxx_messageInfo_PercentRangeType.Size(m)
}
func (m *PercentRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_PercentRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_PercentRangeType proto.InternalMessageInfo

func (m *PercentRangeType) GetMinimum() *PercentType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *PercentRangeType) GetMaximum() *PercentType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

type PercentType struct {
	Value                float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 PercentType_PercentUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.PercentType_PercentUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PercentType) Reset()         { *m = PercentType{} }
func (m *PercentType) String() string { return proto.CompactTextString(m) }
func (*PercentType) ProtoMessage()    {}
func (*PercentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{29}
}

func (m *PercentType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PercentType.Unmarshal(m, b)
}
func (m *PercentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PercentType.Marshal(b, m, deterministic)
}
func (m *PercentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PercentType.Merge(m, src)
}
func (m *PercentType) XXX_Size() int {
	return xxx_messageInfo_PercentType.Size(m)
}
func (m *PercentType) XXX_DiscardUnknown() {
	xxx_messageInfo_PercentType.DiscardUnknown(m)
}

var xxx_messageInfo_PercentType proto.InternalMessageInfo

func (m *PercentType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PercentType) GetUnit() PercentType_PercentUnitType {
	if m != nil {
		return m.Unit
	}
	return PercentType_NULL
}

type GravityRangeType struct {
	Minimum              *GravityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *GravityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GravityRangeType) Reset()         { *m = GravityRangeType{} }
func (m *GravityRangeType) String() string { return proto.CompactTextString(m) }
func (*GravityRangeType) ProtoMessage()    {}
func (*GravityRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{30}
}

func (m *GravityRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GravityRangeType.Unmarshal(m, b)
}
func (m *GravityRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GravityRangeType.Marshal(b, m, deterministic)
}
func (m *GravityRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityRangeType.Merge(m, src)
}
func (m *GravityRangeType) XXX_Size() int {
	return xxx_messageInfo_GravityRangeType.Size(m)
}
func (m *GravityRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_GravityRangeType proto.InternalMessageInfo

func (m *GravityRangeType) GetMinimum() *GravityType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *GravityRangeType) GetMaximum() *GravityType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
type GravityType struct {
	Value                float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 GravityType_GravityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.GravityType_GravityUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GravityType) Reset()         { *m = GravityType{} }
func (m *GravityType) String() string { return proto.CompactTextString(m) }
func (*GravityType) ProtoMessage()    {}
func (*GravityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{31}
}

func (m *GravityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GravityType.Unmarshal(m, b)
}
func (m *GravityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GravityType.Marshal(b, m, deterministic)
}
func (m *GravityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityType.Merge(m, src)
}
func (m *GravityType) XXX_Size() int {
	return xxx_messageInfo_GravityType.Size(m)
}
func (m *GravityType) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityType.DiscardUnknown(m)
}

var xxx_messageInfo_GravityType proto.InternalMessageInfo

func (m *GravityType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GravityType) GetUnit() GravityType_GravityUnitType {
	if m != nil {
		return m.Unit
	}
	return GravityType_NULL
}

type ColorRangeType struct {
	Minimum              *ColorType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *ColorType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ColorRangeType) Reset()         { *m = ColorRangeType{} }
func (m *ColorRangeType) String() string { return proto.CompactTextString(m) }
func (*ColorRangeType) ProtoMessage()    {}
func (*ColorRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{32}
}

func (m *ColorRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorRangeType.Unmarshal(m, b)
}
func (m *ColorRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorRangeType.Marshal(b, m, deterministic)
}
func (m *ColorRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorRangeType.Merge(m, src)
}
func (m *ColorRangeType) XXX_Size() int {
	return xxx_messageInfo_ColorRangeType.Size(m)
}
func (m *ColorRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_ColorRangeType proto.InternalMessageInfo

func (m *ColorRangeType) GetMinimum() *ColorType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *ColorRangeType) GetMaximum() *ColorType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
type ColorType struct {
	Value                float64                 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 ColorType_ColorUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ColorType_ColorUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ColorType) Reset()         { *m = ColorType{} }
func (m *ColorType) String() string { return proto.CompactTextString(m) }
func (*ColorType) ProtoMessage()    {}
func (*ColorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{33}
}

func (m *ColorType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorType.Unmarshal(m, b)
}
func (m *ColorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorType.Marshal(b, m, deterministic)
}
func (m *ColorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorType.Merge(m, src)
}
func (m *ColorType) XXX_Size() int {
	return xxx_messageInfo_ColorType.Size(m)
}
func (m *ColorType) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorType.DiscardUnknown(m)
}

var xxx_messageInfo_ColorType proto.InternalMessageInfo

func (m *ColorType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ColorType) GetUnit() ColorType_ColorUnitType {
	if m != nil {
		return m.Unit
	}
	return ColorType_NULL
}

type CarbonationRangeType struct {
	Minimum              *CarbonationType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *CarbonationType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CarbonationRangeType) Reset()         { *m = CarbonationRangeType{} }
func (m *CarbonationRangeType) String() string { return proto.CompactTextString(m) }
func (*CarbonationRangeType) ProtoMessage()    {}
func (*CarbonationRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{34}
}

func (m *CarbonationRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CarbonationRangeType.Unmarshal(m, b)
}
func (m *CarbonationRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CarbonationRangeType.Marshal(b, m, deterministic)
}
func (m *CarbonationRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarbonationRangeType.Merge(m, src)
}
func (m *CarbonationRangeType) XXX_Size() int {
	return xxx_messageInfo_CarbonationRangeType.Size(m)
}
func (m *CarbonationRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_CarbonationRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_CarbonationRangeType proto.InternalMessageInfo

func (m *CarbonationRangeType) GetMinimum() *CarbonationType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *CarbonationRangeType) GetMaximum() *CarbonationType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

type CarbonationType struct {
	Value                float64                             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 CarbonationType_CarbonationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.CarbonationType_CarbonationUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CarbonationType) Reset()         { *m = CarbonationType{} }
func (m *CarbonationType) String() string { return proto.CompactTextString(m) }
func (*CarbonationType) ProtoMessage()    {}
func (*CarbonationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{35}
}

func (m *CarbonationType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CarbonationType.Unmarshal(m, b)
}
func (m *CarbonationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CarbonationType.Marshal(b, m, deterministic)
}
func (m *CarbonationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarbonationType.Merge(m, src)
}
func (m *CarbonationType) XXX_Size() int {
	return xxx_messageInfo_CarbonationType.Size(m)
}
func (m *CarbonationType) XXX_DiscardUnknown() {
	xxx_messageInfo_CarbonationType.DiscardUnknown(m)
}

var xxx_messageInfo_CarbonationType proto.InternalMessageInfo

func (m *CarbonationType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CarbonationType) GetUnit() CarbonationType_CarbonationUnitType {
	if m != nil {
		return m.Unit
	}
	return CarbonationType_NULL
}

// FermentationProcedureType defines the procedure for performing fermentation
type FermentationProcedureType struct {
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Notes                string                  `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	FermentationSteps    []*FermentationStepType `protobuf:"bytes,4,rep,name=fermentation_steps,json=fermentationSteps,proto3" json:"fermentation_steps,omitempty"`
	Name                 string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FermentationProcedureType) Reset()         { *m = FermentationProcedureType{} }
func (m *FermentationProcedureType) String() string { return proto.CompactTextString(m) }
func (*FermentationProcedureType) ProtoMessage()    {}
func (*FermentationProcedureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{36}
}

func (m *FermentationProcedureType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FermentationProcedureType.Unmarshal(m, b)
}
func (m *FermentationProcedureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FermentationProcedureType.Marshal(b, m, deterministic)
}
func (m *FermentationProcedureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FermentationProcedureType.Merge(m, src)
}
func (m *FermentationProcedureType) XXX_Size() int {
	return xxx_messageInfo_FermentationProcedureType.Size(m)
}
func (m *FermentationProcedureType) XXX_DiscardUnknown() {
	xxx_messageInfo_FermentationProcedureType.DiscardUnknown(m)
}

var xxx_messageInfo_FermentationProcedureType proto.InternalMessageInfo

func (m *FermentationProcedureType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FermentationProcedureType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FermentationProcedureType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *FermentationProcedureType) GetFermentationSteps() []*FermentationStepType {
	if m != nil {
		return m.FermentationSteps
	}
	return nil
}

func (m *FermentationProcedureType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// FermentationStepType - a per step representation of a fermentation action
type FermentationStepType struct {
	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,3,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	StepTime       *TimeType        `protobuf:"bytes,4,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
	FreeRise             bool             `protobuf:"varint,5,opt,name=free_rise,json=freeRise,proto3" json:"free_rise,omitempty"`
	StartGravity         *GravityType     `protobuf:"bytes,6,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	EndGravity           *GravityType     `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	StartPh              *AcidityType     `protobuf:"bytes,8,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Description          string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	StartTemperature     *TemperatureType `protobuf:"bytes,10,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh                *AcidityType     `protobuf:"bytes,11,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Vessel               string           `protobuf:"bytes,12,opt,name=vessel,proto3" json:"vessel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FermentationStepType) Reset()         { *m = FermentationStepType{} }
func (m *FermentationStepType) String() string { return proto.CompactTextString(m) }
func (*FermentationStepType) ProtoMessage()    {}
func (*FermentationStepType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{37}
}

func (m *FermentationStepType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FermentationStepType.Unmarshal(m, b)
}
func (m *FermentationStepType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FermentationStepType.Marshal(b, m, deterministic)
}
func (m *FermentationStepType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FermentationStepType.Merge(m, src)
}
func (m *FermentationStepType) XXX_Size() int {
	return xxx_messageInfo_FermentationStepType.Size(m)
}
func (m *FermentationStepType) XXX_DiscardUnknown() {
	xxx_messageInfo_FermentationStepType.DiscardUnknown(m)
}

var xxx_messageInfo_FermentationStepType proto.InternalMessageInfo

func (m *FermentationStepType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FermentationStepType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FermentationStepType) GetEndTemperature() *TemperatureType {
	if m != nil {
		return m.EndTemperature
	}
	return nil
}

func (m *FermentationStepType) GetStepTime() *TimeType {
	if m != nil {
		return m.StepTime
	}
	return nil
}

func (m *FermentationStepType) GetFreeRise() bool {
	if m != nil {
		return m.FreeRise
	}
	return false
}

func (m *FermentationStepType) GetStartGravity() *GravityType {
	if m != nil {
		return m.StartGravity
	}
	return nil
}

func (m *FermentationStepType) GetEndGravity() *GravityType {
	if m != nil {
		return m.EndGravity
	}
	return nil
}

func (m *FermentationStepType) GetStartPh() *AcidityType {
	if m != nil {
		return m.StartPh
	}
	return nil
}

func (m *FermentationStepType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FermentationStepType) GetStartTemperature() *TemperatureType {
	if m != nil {
		return m.StartTemperature
	}
	return nil
}

func (m *FermentationStepType) GetEndPh() *AcidityType {
	if m != nil {
		return m.EndPh
	}
	return nil
}

func (m *FermentationStepType) GetVessel() string {
	if m != nil {
		return m.Vessel
	}
	return ""
}

// BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
type BoilProcedureType struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PreBoilSize          *VolumeType     `protobuf:"bytes,2,opt,name=pre_boil_size,json=preBoilSize,proto3" json:"pre_boil_size,omitempty"`
	BoilTime             *TimeType       `protobuf:"bytes,3,opt,name=boil_time,json=boilTime,proto3" json:"boil_time,omitempty"`
	BoilSteps            []*BoilStepType `protobuf:"bytes,4,rep,name=boil_steps,json=boilSteps,proto3" json:"boil_steps,omitempty"`
	Name                 string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description          string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Notes                string          `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BoilProcedureType) Reset()         { *m = BoilProcedureType{} }
func (m *BoilProcedureType) String() string { return proto.CompactTextString(m) }
func (*BoilProcedureType) ProtoMessage()    {}
func (*BoilProcedureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{38}
}

func (m *BoilProcedureType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoilProcedureType.Unmarshal(m, b)
}
func (m *BoilProcedureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoilProcedureType.Marshal(b, m, deterministic)
}
func (m *BoilProcedureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoilProcedureType.Merge(m, src)
}
func (m *BoilProcedureType) XXX_Size() int {
	return xxx_messageInfo_BoilProcedureType.Size(m)
}
func (m *BoilProcedureType) XXX_DiscardUnknown() {
	xxx_messageInfo_BoilProcedureType.DiscardUnknown(m)
}

var xxx_messageInfo_BoilProcedureType proto.InternalMessageInfo

func (m *BoilProcedureType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BoilProcedureType) GetPreBoilSize() *VolumeType {
	if m != nil {
		return m.PreBoilSize
	}
	return nil
}

func (m *BoilProcedureType) GetBoilTime() *TimeType {
	if m != nil {
		return m.BoilTime
	}
	return nil
}

func (m *BoilProcedureType) GetBoilSteps() []*BoilStepType {
	if m != nil {
		return m.BoilSteps
	}
	return nil
}

func (m *BoilProcedureType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BoilProcedureType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BoilProcedureType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
type BoilStepType struct {
	Id             string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EndGravity     *GravityType                          `protobuf:"bytes,2,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	ChillingType   BoilStepType_BoilStepTypeChillingType `protobuf:"varint,3,opt,name=chilling_type,json=chillingType,proto3,enum=beerproto.BoilStepType_BoilStepTypeChillingType" json:"chilling_type,omitempty"`
	Description    string                                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	EndTemperature *TemperatureType                      `protobuf:"bytes,5,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	// The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
	RampTime             *TimeType        `protobuf:"bytes,6,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	StepTime             *TimeType        `protobuf:"bytes,7,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	StartGravity         *GravityType     `protobuf:"bytes,8,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	StartPh              *AcidityType     `protobuf:"bytes,9,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh                *AcidityType     `protobuf:"bytes,10,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name                 string           `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	StartTemperature     *TemperatureType `protobuf:"bytes,12,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BoilStepType) Reset()         { *m = BoilStepType{} }
func (m *BoilStepType) String() string { return proto.CompactTextString(m) }
func (*BoilStepType) ProtoMessage()    {}
func (*BoilStepType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{39}
}

func (m *BoilStepType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoilStepType.Unmarshal(m, b)
}
func (m *BoilStepType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoilStepType.Marshal(b, m, deterministic)
}
func (m *BoilStepType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoilStepType.Merge(m, src)
}
func (m *BoilStepType) XXX_Size() int {
	return xxx_messageInfo_BoilStepType.Size(m)
}
func (m *BoilStepType) XXX_DiscardUnknown() {
	xxx_messageInfo_BoilStepType.DiscardUnknown(m)
}

var xxx_messageInfo_BoilStepType proto.InternalMessageInfo

func (m *BoilStepType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BoilStepType) GetEndGravity() *GravityType {
	if m != nil {
		return m.EndGravity
	}
	return nil
}

func (m *BoilStepType) GetChillingType() BoilStepType_BoilStepTypeChillingType {
	if m != nil {
		return m.ChillingType
	}
	return BoilStepType_NULL
}

func (m *BoilStepType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BoilStepType) GetEndTemperature() *TemperatureType {
	if m != nil {
		return m.EndTemperature
	}
	return nil
}

func (m *BoilStepType) GetRampTime() *TimeType {
	if m != nil {
		return m.RampTime
	}
	return nil
}

func (m *BoilStepType) GetStepTime() *TimeType {
	if m != nil {
		return m.StepTime
	}
	return nil
}

func (m *BoilStepType) GetStartGravity() *GravityType {
	if m != nil {
		return m.StartGravity
	}
	return nil
}

func (m *BoilStepType) GetStartPh() *AcidityType {
	if m != nil {
		return m.StartPh
	}
	return nil
}

func (m *BoilStepType) GetEndPh() *AcidityType {
	if m != nil {
		return m.EndPh
	}
	return nil
}

func (m *BoilStepType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BoilStepType) GetStartTemperature() *TemperatureType {
	if m != nil {
		return m.StartTemperature
	}
	return nil
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
type FermentableType struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The recommended maximum percentage to use in a grain bill.
	MaxInBatch *PercentType `protobuf:"bytes,2,opt,name=max_in_batch,json=maxInBatch,proto3" json:"max_in_batch,omitempty"`
	// True if the fermentable must be mashed, false if it can be steeped.
	RecommendMash bool `protobuf:"varint,3,opt,name=recommend_mash,json=recommendMash,proto3" json:"recommend_mash,omitempty"`
	// The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
	Protein    *PercentType        `protobuf:"bytes,4,opt,name=protein,proto3" json:"protein,omitempty"`
	ProductId  string              `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,6,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,7,opt,name=yield,proto3" json:"yield,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.FermentableBaseType" json:"type,omitempty"`
	Producer   string              `protobuf:"bytes,9,opt,name=producer,proto3" json:"producer,omitempty"`
	// Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
	AlphaAmylase float64    `protobuf:"fixed64,10,opt,name=alpha_amylase,json=alphaAmylase,proto3" json:"alpha_amylase,omitempty"`
	Color        *ColorType `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	Name         string     `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
	DiastaticPower *DiastaticPowerType       `protobuf:"bytes,13,opt,name=diastatic_power,json=diastaticPower,proto3" json:"diastatic_power,omitempty"`
	Moisture       *PercentType              `protobuf:"bytes,14,opt,name=moisture,proto3" json:"moisture,omitempty"`
	Origin         string                    `protobuf:"bytes,15,opt,name=origin,proto3" json:"origin,omitempty"`
	Inventory      *FermentableInventoryType `protobuf:"bytes,16,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
	KolbachIndex         float64  `protobuf:"fixed64,17,opt,name=kolbach_index,json=kolbachIndex,proto3" json:"kolbach_index,omitempty"`
	Notes                string   `protobuf:"bytes,18,opt,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FermentableType) Reset()         { *m = FermentableType{} }
func (m *FermentableType) String() string { return proto.CompactTextString(m) }
func (*FermentableType) ProtoMessage()    {}
func (*FermentableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{40}
}

func (m *FermentableType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FermentableType.Unmarshal(m, b)
}
func (m *FermentableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FermentableType.Marshal(b, m, deterministic)
}
func (m *FermentableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FermentableType.Merge(m, src)
}
func (m *FermentableType) XXX_Size() int {
	return xxx_messageInfo_FermentableType.Size(m)
}
func (m *FermentableType) XXX_DiscardUnknown() {
	xxx_messageInfo_FermentableType.DiscardUnknown(m)
}

var xxx_messageInfo_FermentableType proto.InternalMessageInfo

func (m *FermentableType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FermentableType) GetMaxInBatch() *PercentType {
	if m != nil {
		return m.MaxInBatch
	}
	return nil
}

func (m *FermentableType) GetRecommendMash() bool {
	if m != nil {
		return m.RecommendMash
	}
	return false
}

func (m *FermentableType) GetProtein() *PercentType {
	if m != nil {
		return m.Protein
	}
	return nil
}

func (m *FermentableType) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *FermentableType) GetGrainGroup() GrainGroup {
	if m != nil {
		return m.GrainGroup
	}
	return GrainGroup_NULL_GrainGroup
}

func (m *FermentableType) GetYield() *YieldType {
	if m != nil {
		return m.Yield
	}
	return nil
}

func (m *FermentableType) GetType() FermentableBaseType {
	if m != nil {
		return m.Type
	}
	return FermentableBaseType_NULL_FermentableBaseType
}

func (m *FermentableType) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *FermentableType) GetAlphaAmylase() float64 {
	if m != nil {
		return m.AlphaAmylase
	}
	return 0
}

func (m *FermentableType) GetColor() *ColorType {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *FermentableType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FermentableType) GetDiastaticPower() *DiastaticPowerType {
	if m != nil {
		return m.DiastaticPower
	}
	return nil
}

func (m *FermentableType) GetMoisture() *PercentType {
	if m != nil {
		return m.Moisture
	}
	return nil
}

func (m *FermentableType) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *FermentableType) GetInventory() *FermentableInventoryType {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *FermentableType) GetKolbachIndex() float64 {
	if m != nil {
		return m.KolbachIndex
	}
	return 0
}

func (m *FermentableType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type FermentableInventoryType struct {
	// Types that are valid to be assigned to Amount:
	//	*FermentableInventoryType_Mass
	//	*FermentableInventoryType_Volume
	Amount               isFermentableInventoryType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *FermentableInventoryType) Reset()         { *m = FermentableInventoryType{} }
func (m *FermentableInventoryType) String() string { return proto.CompactTextString(m) }
func (*FermentableInventoryType) ProtoMessage()    {}
func (*FermentableInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{41}
}

func (m *FermentableInventoryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FermentableInventoryType.Unmarshal(m, b)
}
func (m *FermentableInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FermentableInventoryType.Marshal(b, m, deterministic)
}
func (m *FermentableInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FermentableInventoryType.Merge(m, src)
}
func (m *FermentableInventoryType) XXX_Size() int {
	return xxx_messageInfo_FermentableInventoryType.Size(m)
}
func (m *FermentableInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_FermentableInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_FermentableInventoryType proto.InternalMessageInfo

type isFermentableInventoryType_Amount interface {
	isFermentableInventoryType_Amount()
}

type FermentableInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type FermentableInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*FermentableInventoryType_Mass) isFermentableInventoryType_Amount() {}

func (*FermentableInventoryType_Volume) isFermentableInventoryType_Amount() {}

func (m *FermentableInventoryType) GetAmount() isFermentableInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *FermentableInventoryType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*FermentableInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *FermentableInventoryType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*FermentableInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FermentableInventoryType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FermentableInventoryType_Mass)(nil),
		(*FermentableInventoryType_Volume)(nil),
	}
}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
type DiastaticPowerType struct {
	Value                float64                                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 DiastaticPowerType_DiastaticPowerUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.DiastaticPowerType_DiastaticPowerUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *DiastaticPowerType) Reset()         { *m = DiastaticPowerType{} }
func (m *DiastaticPowerType) String() string { return proto.CompactTextString(m) }
func (*DiastaticPowerType) ProtoMessage()    {}
func (*DiastaticPowerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{42}
}

func (m *DiastaticPowerType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiastaticPowerType.Unmarshal(m, b)
}
func (m *DiastaticPowerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiastaticPowerType.Marshal(b, m, deterministic)
}
func (m *DiastaticPowerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiastaticPowerType.Merge(m, src)
}
func (m *DiastaticPowerType) XXX_Size() int {
	return xxx_messageInfo_DiastaticPowerType.Size(m)
}
func (m *DiastaticPowerType) XXX_DiscardUnknown() {
	xxx_messageInfo_DiastaticPowerType.DiscardUnknown(m)
}

var xxx_messageInfo_DiastaticPowerType proto.InternalMessageInfo

func (m *DiastaticPowerType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DiastaticPowerType) GetUnit() DiastaticPowerType_DiastaticPowerUnitType {
	if m != nil {
		return m.Unit
	}
	return DiastaticPowerType_NULL
}

// CultureInformation collects the attributes of a microbial culture
type CultureInformation struct {
	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Form     CultureBaseForm `protobuf:"varint,2,opt,name=form,proto3,enum=beerproto.CultureBaseForm" json:"form,omitempty"`
	Producer string          `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	// The recommended temperature range of fermentation by the culture producer.
	TemperatureRange *TemperatureRangeType `protobuf:"bytes,4,opt,name=temperature_range,json=temperatureRange,proto3" json:"temperature_range,omitempty"`
	Notes            string                `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	// Recommended styles for a particular culture.
	BestFor   string                `protobuf:"bytes,6,opt,name=best_for,json=bestFor,proto3" json:"best_for,omitempty"`
	Inventory *CultureInventoryType `protobuf:"bytes,7,opt,name=inventory,proto3" json:"inventory,omitempty"`
	ProductId string                `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name      string                `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The recommended limit of abv by the culture producer before attenuation stops.
	AlcoholTolerance *PercentType `protobuf:"bytes,10,opt,name=alcohol_tolerance,json=alcoholTolerance,proto3" json:"alcohol_tolerance,omitempty"`
	// A glucoamylase positive culture is capable of producing glucoamylase, the enzyme produced through expression of the diastatic gene, which allows yeast to attenuate dextrins and starches leading to a very low FG. This is positive in some saison/brett yeasts as well as the new gulo hybrid by Omega yeast labs.
	Glucoamylase bool            `protobuf:"varint,11,opt,name=glucoamylase,proto3" json:"glucoamylase,omitempty"`
	Type         CultureBaseType `protobuf:"varint,12,opt,name=type,proto3,enum=beerproto.CultureBaseType" json:"type,omitempty"`
	// Floculation refers to the ability of yeast to aggregate to form large flocs which drop out of suspension.
	Flocculation     CultureInformation_QualitativeRangeType `protobuf:"varint,13,opt,name=flocculation,proto3,enum=beerproto.CultureInformation_QualitativeRangeType" json:"flocculation,omitempty"`
	AttenuationRange *PercentRangeType                       `protobuf:"bytes,14,opt,name=attenuation_range,json=attenuationRange,proto3" json:"attenuation_range,omitempty"`
	// Maximum number of times to reuse a culture before a new lab source is recommended.
	MaxReuse int32 `protobuf:"varint,15,opt,name=max_reuse,json=maxReuse,proto3" json:"max_reuse,omitempty"`
	// A POF+ culture is capable of producing phenols, which is a common distinctive property of saison, and brett yeasts.
	Pof                  bool      `protobuf:"varint,16,opt,name=pof,proto3" json:"pof,omitempty"`
	Zymocide             *Zymocide `protobuf:"bytes,17,opt,name=zymocide,proto3" json:"zymocide,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CultureInformation) Reset()         { *m = CultureInformation{} }
func (m *CultureInformation) String() string { return proto.CompactTextString(m) }
func (*CultureInformation) ProtoMessage()    {}
func (*CultureInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{43}
}

func (m *CultureInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CultureInformation.Unmarshal(m, b)
}
func (m *CultureInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CultureInformation.Marshal(b, m, deterministic)
}
func (m *CultureInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CultureInformation.Merge(m, src)
}
func (m *CultureInformation) XXX_Size() int {
	return xxx_messageInfo_CultureInformation.Size(m)
}
func (m *CultureInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_CultureInformation.DiscardUnknown(m)
}

var xxx_messageInfo_CultureInformation proto.InternalMessageInfo

func (m *CultureInformation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CultureInformation) GetForm() CultureBaseForm {
	if m != nil {
		return m.Form
	}
	return CultureBaseForm_NULL_CultureBaseForm
}

func (m *CultureInformation) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *CultureInformation) GetTemperatureRange() *TemperatureRangeType {
	if m != nil {
		return m.TemperatureRange
	}
	return nil
}

func (m *CultureInformation) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *CultureInformation) GetBestFor() string {
	if m != nil {
		return m.BestFor
	}
	return ""
}

func (m *CultureInformation) GetInventory() *CultureInventoryType {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *CultureInformation) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *CultureInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CultureInformation) GetAlcoholTolerance() *PercentType {
	if m != nil {
		return m.AlcoholTolerance
	}
	return nil
}

func (m *CultureInformation) GetGlucoamylase() bool {
	if m != nil {
		return m.Glucoamylase
	}
	return false
}

func (m *CultureInformation) GetType() CultureBaseType {
	if m != nil {
		return m.Type
	}
	return CultureBaseType_NULL_CultureBaseType
}

func (m *CultureInformation) GetFlocculation() CultureInformation_QualitativeRangeType {
	if m != nil {
		return m.Flocculation
	}
	return CultureInformation_NULL_QualitativeRangeType
}

func (m *CultureInformation) GetAttenuationRange() *PercentRangeType {
	if m != nil {
		return m.AttenuationRange
	}
	return nil
}

func (m *CultureInformation) GetMaxReuse() int32 {
	if m != nil {
		return m.MaxReuse
	}
	return 0
}

func (m *CultureInformation) GetPof() bool {
	if m != nil {
		return m.Pof
	}
	return false
}

func (m *CultureInformation) GetZymocide() *Zymocide {
	if m != nil {
		return m.Zymocide
	}
	return nil
}

type TemperatureRangeType struct {
	Minimum              *TemperatureType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              *TemperatureType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TemperatureRangeType) Reset()         { *m = TemperatureRangeType{} }
func (m *TemperatureRangeType) String() string { return proto.CompactTextString(m) }
func (*TemperatureRangeType) ProtoMessage()    {}
func (*TemperatureRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{44}
}

func (m *TemperatureRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureRangeType.Unmarshal(m, b)
}
func (m *TemperatureRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureRangeType.Marshal(b, m, deterministic)
}
func (m *TemperatureRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureRangeType.Merge(m, src)
}
func (m *TemperatureRangeType) XXX_Size() int {
	return xxx_messageInfo_TemperatureRangeType.Size(m)
}
func (m *TemperatureRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureRangeType proto.InternalMessageInfo

func (m *TemperatureRangeType) GetMinimum() *TemperatureType {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *TemperatureRangeType) GetMaximum() *TemperatureType {
	if m != nil {
		return m.Maximum
	}
	return nil
}

type TemperatureType struct {
	Value                float64                             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 TemperatureType_TemperatureUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TemperatureType_TemperatureUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TemperatureType) Reset()         { *m = TemperatureType{} }
func (m *TemperatureType) String() string { return proto.CompactTextString(m) }
func (*TemperatureType) ProtoMessage()    {}
func (*TemperatureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{45}
}

func (m *TemperatureType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureType.Unmarshal(m, b)
}
func (m *TemperatureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureType.Marshal(b, m, deterministic)
}
func (m *TemperatureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureType.Merge(m, src)
}
func (m *TemperatureType) XXX_Size() int {
	return xxx_messageInfo_TemperatureType.Size(m)
}
func (m *TemperatureType) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureType.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureType proto.InternalMessageInfo

func (m *TemperatureType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TemperatureType) GetUnit() TemperatureType_TemperatureUnitType {
	if m != nil {
		return m.Unit
	}
	return TemperatureType_NULL
}

// Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral
type Zymocide struct {
	No1                  bool     `protobuf:"varint,1,opt,name=no1,proto3" json:"no1,omitempty"`
	No2                  bool     `protobuf:"varint,2,opt,name=no2,proto3" json:"no2,omitempty"`
	No28                 bool     `protobuf:"varint,3,opt,name=no28,proto3" json:"no28,omitempty"`
	Klus                 bool     `protobuf:"varint,4,opt,name=klus,proto3" json:"klus,omitempty"`
	Neutral              bool     `protobuf:"varint,5,opt,name=neutral,proto3" json:"neutral,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Zymocide) Reset()         { *m = Zymocide{} }
func (m *Zymocide) String() string { return proto.CompactTextString(m) }
func (*Zymocide) ProtoMessage()    {}
func (*Zymocide) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{46}
}

func (m *Zymocide) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Zymocide.Unmarshal(m, b)
}
func (m *Zymocide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Zymocide.Marshal(b, m, deterministic)
}
func (m *Zymocide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zymocide.Merge(m, src)
}
func (m *Zymocide) XXX_Size() int {
	return xxx_messageInfo_Zymocide.Size(m)
}
func (m *Zymocide) XXX_DiscardUnknown() {
	xxx_messageInfo_Zymocide.DiscardUnknown(m)
}

var xxx_messageInfo_Zymocide proto.InternalMessageInfo

func (m *Zymocide) GetNo1() bool {
	if m != nil {
		return m.No1
	}
	return false
}

func (m *Zymocide) GetNo2() bool {
	if m != nil {
		return m.No2
	}
	return false
}

func (m *Zymocide) GetNo28() bool {
	if m != nil {
		return m.No28
	}
	return false
}

func (m *Zymocide) GetKlus() bool {
	if m != nil {
		return m.Klus
	}
	return false
}

func (m *Zymocide) GetNeutral() bool {
	if m != nil {
		return m.Neutral
	}
	return false
}

type CultureInventoryType struct {
	Liquid               *VolumeType `protobuf:"bytes,1,opt,name=liquid,proto3" json:"liquid,omitempty"`
	Dry                  *MassType   `protobuf:"bytes,2,opt,name=dry,proto3" json:"dry,omitempty"`
	Slant                *VolumeType `protobuf:"bytes,3,opt,name=slant,proto3" json:"slant,omitempty"`
	Culture              *VolumeType `protobuf:"bytes,4,opt,name=culture,proto3" json:"culture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CultureInventoryType) Reset()         { *m = CultureInventoryType{} }
func (m *CultureInventoryType) String() string { return proto.CompactTextString(m) }
func (*CultureInventoryType) ProtoMessage()    {}
func (*CultureInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{47}
}

func (m *CultureInventoryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CultureInventoryType.Unmarshal(m, b)
}
func (m *CultureInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CultureInventoryType.Marshal(b, m, deterministic)
}
func (m *CultureInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CultureInventoryType.Merge(m, src)
}
func (m *CultureInventoryType) XXX_Size() int {
	return xxx_messageInfo_CultureInventoryType.Size(m)
}
func (m *CultureInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_CultureInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_CultureInventoryType proto.InternalMessageInfo

func (m *CultureInventoryType) GetLiquid() *VolumeType {
	if m != nil {
		return m.Liquid
	}
	return nil
}

func (m *CultureInventoryType) GetDry() *MassType {
	if m != nil {
		return m.Dry
	}
	return nil
}

func (m *CultureInventoryType) GetSlant() *VolumeType {
	if m != nil {
		return m.Slant
	}
	return nil
}

func (m *CultureInventoryType) GetCulture() *VolumeType {
	if m != nil {
		return m.Culture
	}
	return nil
}

// Provides necessary information for brewing equipment set
type EquipmentType struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EquipmentItems       []*EquipmentItemType `protobuf:"bytes,2,rep,name=equipment_items,json=equipmentItems,proto3" json:"equipment_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EquipmentType) Reset()         { *m = EquipmentType{} }
func (m *EquipmentType) String() string { return proto.CompactTextString(m) }
func (*EquipmentType) ProtoMessage()    {}
func (*EquipmentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{48}
}

func (m *EquipmentType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipmentType.Unmarshal(m, b)
}
func (m *EquipmentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipmentType.Marshal(b, m, deterministic)
}
func (m *EquipmentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipmentType.Merge(m, src)
}
func (m *EquipmentType) XXX_Size() int {
	return xxx_messageInfo_EquipmentType.Size(m)
}
func (m *EquipmentType) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipmentType.DiscardUnknown(m)
}

var xxx_messageInfo_EquipmentType proto.InternalMessageInfo

func (m *EquipmentType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EquipmentType) GetEquipmentItems() []*EquipmentItemType {
	if m != nil {
		return m.EquipmentItems
	}
	return nil
}

// EquipmentType provides necessary information for individual brewing equipment
type EquipmentItemType struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// The volume boiled off during 1 hour, measured before and after at room temperature.
	BoilRatePerHour *VolumeType                         `protobuf:"bytes,3,opt,name=boil_rate_per_hour,json=boilRatePerHour,proto3" json:"boil_rate_per_hour,omitempty"`
	Type            string                              `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Form            EquipmentItemType_EquipmentBaseForm `protobuf:"varint,5,opt,name=form,proto3,enum=beerproto.EquipmentItemType_EquipmentBaseForm" json:"form,omitempty"`
	// The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
	DrainRatePerMinute *VolumeType `protobuf:"bytes,6,opt,name=drain_rate_per_minute,json=drainRatePerMinute,proto3" json:"drain_rate_per_minute,omitempty"`
	// The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
	SpecificHeat *SpecificHeatType `protobuf:"bytes,7,opt,name=specific_heat,json=specificHeat,proto3" json:"specific_heat,omitempty"`
	// The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
	GrainAbsorptionRate *SpecificVolumeType `protobuf:"bytes,8,opt,name=grain_absorption_rate,json=grainAbsorptionRate,proto3" json:"grain_absorption_rate,omitempty"`
	Name                string              `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	MaximumVolume       *VolumeType         `protobuf:"bytes,10,opt,name=maximum_volume,json=maximumVolume,proto3" json:"maximum_volume,omitempty"`
	// The weight of the piece of equipment, especially important for when the mashtun is not preheated.
	Weight               *MassType   `protobuf:"bytes,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Loss                 *VolumeType `protobuf:"bytes,12,opt,name=loss,proto3" json:"loss,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EquipmentItemType) Reset()         { *m = EquipmentItemType{} }
func (m *EquipmentItemType) String() string { return proto.CompactTextString(m) }
func (*EquipmentItemType) ProtoMessage()    {}
func (*EquipmentItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{49}
}

func (m *EquipmentItemType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipmentItemType.Unmarshal(m, b)
}
func (m *EquipmentItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipmentItemType.Marshal(b, m, deterministic)
}
func (m *EquipmentItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipmentItemType.Merge(m, src)
}
func (m *EquipmentItemType) XXX_Size() int {
	return xxx_messageInfo_EquipmentItemType.Size(m)
}
func (m *EquipmentItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipmentItemType.DiscardUnknown(m)
}

var xxx_messageInfo_EquipmentItemType proto.InternalMessageInfo

func (m *EquipmentItemType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EquipmentItemType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *EquipmentItemType) GetBoilRatePerHour() *VolumeType {
	if m != nil {
		return m.BoilRatePerHour
	}
	return nil
}

func (m *EquipmentItemType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EquipmentItemType) GetForm() EquipmentItemType_EquipmentBaseForm {
	if m != nil {
		return m.Form
	}
	return EquipmentItemType_NULL
}

func (m *EquipmentItemType) GetDrainRatePerMinute() *VolumeType {
	if m != nil {
		return m.DrainRatePerMinute
	}
	return nil
}

func (m *EquipmentItemType) GetSpecificHeat() *SpecificHeatType {
	if m != nil {
		return m.SpecificHeat
	}
	return nil
}

func (m *EquipmentItemType) GetGrainAbsorptionRate() *SpecificVolumeType {
	if m != nil {
		return m.GrainAbsorptionRate
	}
	return nil
}

func (m *EquipmentItemType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EquipmentItemType) GetMaximumVolume() *VolumeType {
	if m != nil {
		return m.MaximumVolume
	}
	return nil
}

func (m *EquipmentItemType) GetWeight() *MassType {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *EquipmentItemType) GetLoss() *VolumeType {
	if m != nil {
		return m.Loss
	}
	return nil
}

type SpecificHeatType struct {
	Value                float64                               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 SpecificHeatType_SpecificHeatUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificHeatType_SpecificHeatUnitType" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SpecificHeatType) Reset()         { *m = SpecificHeatType{} }
func (m *SpecificHeatType) String() string { return proto.CompactTextString(m) }
func (*SpecificHeatType) ProtoMessage()    {}
func (*SpecificHeatType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{50}
}

func (m *SpecificHeatType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecificHeatType.Unmarshal(m, b)
}
func (m *SpecificHeatType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecificHeatType.Marshal(b, m, deterministic)
}
func (m *SpecificHeatType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecificHeatType.Merge(m, src)
}
func (m *SpecificHeatType) XXX_Size() int {
	return xxx_messageInfo_SpecificHeatType.Size(m)
}
func (m *SpecificHeatType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecificHeatType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecificHeatType proto.InternalMessageInfo

func (m *SpecificHeatType) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SpecificHeatType) GetUnit() SpecificHeatType_SpecificHeatUnitType {
	if m != nil {
		return m.Unit
	}
	return SpecificHeatType_NULL
}

// Describes the procedure for packaging your beverage
type PackagingProcedureType struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PackagedVolume       *VolumeType            `protobuf:"bytes,3,opt,name=packaged_volume,json=packagedVolume,proto3" json:"packaged_volume,omitempty"`
	Description          string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Notes                string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	PackagingVessels     []*PackagingVesselType `protobuf:"bytes,6,rep,name=packaging_vessels,json=packagingVessels,proto3" json:"packaging_vessels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PackagingProcedureType) Reset()         { *m = PackagingProcedureType{} }
func (m *PackagingProcedureType) String() string { return proto.CompactTextString(m) }
func (*PackagingProcedureType) ProtoMessage()    {}
func (*PackagingProcedureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{51}
}

func (m *PackagingProcedureType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackagingProcedureType.Unmarshal(m, b)
}
func (m *PackagingProcedureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackagingProcedureType.Marshal(b, m, deterministic)
}
func (m *PackagingProcedureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackagingProcedureType.Merge(m, src)
}
func (m *PackagingProcedureType) XXX_Size() int {
	return xxx_messageInfo_PackagingProcedureType.Size(m)
}
func (m *PackagingProcedureType) XXX_DiscardUnknown() {
	xxx_messageInfo_PackagingProcedureType.DiscardUnknown(m)
}

var xxx_messageInfo_PackagingProcedureType proto.InternalMessageInfo

func (m *PackagingProcedureType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PackagingProcedureType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackagingProcedureType) GetPackagedVolume() *VolumeType {
	if m != nil {
		return m.PackagedVolume
	}
	return nil
}

func (m *PackagingProcedureType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PackagingProcedureType) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *PackagingProcedureType) GetPackagingVessels() []*PackagingVesselType {
	if m != nil {
		return m.PackagingVessels
	}
	return nil
}

// PackagingVesselType - a per vessel representation of a packaging process
type PackagingVesselType struct {
	Id                   string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 PackagingVesselType_PackagingVesselTypeType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.PackagingVesselType_PackagingVesselTypeType" json:"type,omitempty"`
	StartGravity         *GravityType                                `protobuf:"bytes,3,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	Name                 string                                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PackageDate          string                                      `protobuf:"bytes,5,opt,name=package_date,json=packageDate,proto3" json:"package_date,omitempty"`
	StepTime             *TimeType                                   `protobuf:"bytes,6,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	EndGravity           *GravityType                                `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	VesselVolume         *VolumeType                                 `protobuf:"bytes,8,opt,name=vessel_volume,json=vesselVolume,proto3" json:"vessel_volume,omitempty"`
	VesselQuantity       float64                                     `protobuf:"fixed64,9,opt,name=vessel_quantity,json=vesselQuantity,proto3" json:"vessel_quantity,omitempty"`
	Description          string                                      `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	StartPh              *AcidityType                                `protobuf:"bytes,11,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Carbonation          float64                                     `protobuf:"fixed64,12,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	StartTemperature     *TemperatureType                            `protobuf:"bytes,13,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh                *AcidityType                                `protobuf:"bytes,14,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	EndTemperature       *TemperatureType                            `protobuf:"bytes,15,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *PackagingVesselType) Reset()         { *m = PackagingVesselType{} }
func (m *PackagingVesselType) String() string { return proto.CompactTextString(m) }
func (*PackagingVesselType) ProtoMessage()    {}
func (*PackagingVesselType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{52}
}

func (m *PackagingVesselType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackagingVesselType.Unmarshal(m, b)
}
func (m *PackagingVesselType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackagingVesselType.Marshal(b, m, deterministic)
}
func (m *PackagingVesselType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackagingVesselType.Merge(m, src)
}
func (m *PackagingVesselType) XXX_Size() int {
	return xxx_messageInfo_PackagingVesselType.Size(m)
}
func (m *PackagingVesselType) XXX_DiscardUnknown() {
	xxx_messageInfo_PackagingVesselType.DiscardUnknown(m)
}

var xxx_messageInfo_PackagingVesselType proto.InternalMessageInfo

func (m *PackagingVesselType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PackagingVesselType) GetType() PackagingVesselType_PackagingVesselTypeType {
	if m != nil {
		return m.Type
	}
	return PackagingVesselType_NULL
}

func (m *PackagingVesselType) GetStartGravity() *GravityType {
	if m != nil {
		return m.StartGravity
	}
	return nil
}

func (m *PackagingVesselType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackagingVesselType) GetPackageDate() string {
	if m != nil {
		return m.PackageDate
	}
	return ""
}

func (m *PackagingVesselType) GetStepTime() *TimeType {
	if m != nil {
		return m.StepTime
	}
	return nil
}

func (m *PackagingVesselType) GetEndGravity() *GravityType {
	if m != nil {
		return m.EndGravity
	}
	return nil
}

func (m *PackagingVesselType) GetVesselVolume() *VolumeType {
	if m != nil {
		return m.VesselVolume
	}
	return nil
}

func (m *PackagingVesselType) GetVesselQuantity() float64 {
	if m != nil {
		return m.VesselQuantity
	}
	return 0
}

func (m *PackagingVesselType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PackagingVesselType) GetStartPh() *AcidityType {
	if m != nil {
		return m.StartPh
	}
	return nil
}

func (m *PackagingVesselType) GetCarbonation() float64 {
	if m != nil {
		return m.Carbonation
	}
	return 0
}

func (m *PackagingVesselType) GetStartTemperature() *TemperatureType {
	if m != nil {
		return m.StartTemperature
	}
	return nil
}

func (m *PackagingVesselType) GetEndPh() *AcidityType {
	if m != nil {
		return m.EndPh
	}
	return nil
}

func (m *PackagingVesselType) GetEndTemperature() *TemperatureType {
	if m != nil {
		return m.EndTemperature
	}
	return nil
}

// VarietyInformation collects the attributes of a hop variety to store as record information
type VarietyInformation struct {
	Id        string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inventory *HopInventoryType                         `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Type      VarietyInformation_VarietyInformationType `protobuf:"varint,3,opt,name=type,proto3,enum=beerproto.VarietyInformation_VarietyInformationType" json:"type,omitempty"`
	// Oil Content information object.
	OilContent *OilContentType `protobuf:"bytes,4,opt,name=oil_content,json=oilContent,proto3" json:"oil_content,omitempty"`
	//  Defined as the percentage of hop alpha lost in 6 months of storage.
	PercentLost          *PercentType       `protobuf:"bytes,5,opt,name=percent_lost,json=percentLost,proto3" json:"percent_lost,omitempty"`
	ProductId            string             `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid            *PercentType       `protobuf:"bytes,7,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	BetaAcid             *PercentType       `protobuf:"bytes,8,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Name                 string             `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Origin               string             `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
	Substitutes          string             `protobuf:"bytes,11,opt,name=substitutes,proto3" json:"substitutes,omitempty"`
	Year                 string             `protobuf:"bytes,12,opt,name=year,proto3" json:"year,omitempty"`
	Form                 HopVarietyBaseForm `protobuf:"varint,13,opt,name=form,proto3,enum=beerproto.HopVarietyBaseForm" json:"form,omitempty"`
	Producer             string             `protobuf:"bytes,14,opt,name=producer,proto3" json:"producer,omitempty"`
	Notes                string             `protobuf:"bytes,15,opt,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VarietyInformation) Reset()         { *m = VarietyInformation{} }
func (m *VarietyInformation) String() string { return proto.CompactTextString(m) }
func (*VarietyInformation) ProtoMessage()    {}
func (*VarietyInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{53}
}

func (m *VarietyInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VarietyInformation.Unmarshal(m, b)
}
func (m *VarietyInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VarietyInformation.Marshal(b, m, deterministic)
}
func (m *VarietyInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VarietyInformation.Merge(m, src)
}
func (m *VarietyInformation) XXX_Size() int {
	return xxx_messageInfo_VarietyInformation.Size(m)
}
func (m *VarietyInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_VarietyInformation.DiscardUnknown(m)
}

var xxx_messageInfo_VarietyInformation proto.InternalMessageInfo

func (m *VarietyInformation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VarietyInformation) GetInventory() *HopInventoryType {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *VarietyInformation) GetType() VarietyInformation_VarietyInformationType {
	if m != nil {
		return m.Type
	}
	return VarietyInformation_NULL_VarietyInformationType
}

func (m *VarietyInformation) GetOilContent() *OilContentType {
	if m != nil {
		return m.OilContent
	}
	return nil
}

func (m *VarietyInformation) GetPercentLost() *PercentType {
	if m != nil {
		return m.PercentLost
	}
	return nil
}

func (m *VarietyInformation) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *VarietyInformation) GetAlphaAcid() *PercentType {
	if m != nil {
		return m.AlphaAcid
	}
	return nil
}

func (m *VarietyInformation) GetBetaAcid() *PercentType {
	if m != nil {
		return m.BetaAcid
	}
	return nil
}

func (m *VarietyInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VarietyInformation) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *VarietyInformation) GetSubstitutes() string {
	if m != nil {
		return m.Substitutes
	}
	return ""
}

func (m *VarietyInformation) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *VarietyInformation) GetForm() HopVarietyBaseForm {
	if m != nil {
		return m.Form
	}
	return HopVarietyBaseForm_NULL_HopVarietyBaseForm
}

func (m *VarietyInformation) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *VarietyInformation) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type HopInventoryType struct {
	// Types that are valid to be assigned to Amount:
	//	*HopInventoryType_Mass
	//	*HopInventoryType_Volume
	Amount               isHopInventoryType_Amount `protobuf_oneof:"amount"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HopInventoryType) Reset()         { *m = HopInventoryType{} }
func (m *HopInventoryType) String() string { return proto.CompactTextString(m) }
func (*HopInventoryType) ProtoMessage()    {}
func (*HopInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{54}
}

func (m *HopInventoryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HopInventoryType.Unmarshal(m, b)
}
func (m *HopInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HopInventoryType.Marshal(b, m, deterministic)
}
func (m *HopInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HopInventoryType.Merge(m, src)
}
func (m *HopInventoryType) XXX_Size() int {
	return xxx_messageInfo_HopInventoryType.Size(m)
}
func (m *HopInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_HopInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_HopInventoryType proto.InternalMessageInfo

type isHopInventoryType_Amount interface {
	isHopInventoryType_Amount()
}

type HopInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type HopInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*HopInventoryType_Mass) isHopInventoryType_Amount() {}

func (*HopInventoryType_Volume) isHopInventoryType_Amount() {}

func (m *HopInventoryType) GetAmount() isHopInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *HopInventoryType) GetMass() *MassType {
	if x, ok := m.GetAmount().(*HopInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (m *HopInventoryType) GetVolume() *VolumeType {
	if x, ok := m.GetAmount().(*HopInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HopInventoryType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HopInventoryType_Mass)(nil),
		(*HopInventoryType_Volume)(nil),
	}
}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
type OilContentType struct {
	Polyphenols *PercentType `protobuf:"bytes,1,opt,name=polyphenols,proto3" json:"polyphenols,omitempty"`
	// The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
	TotalOilMlPer_100G   float64      `protobuf:"fixed64,2,opt,name=total_oil_ml_per_100g,json=totalOilMlPer100g,proto3" json:"total_oil_ml_per_100g,omitempty"`
	Farnesene            *PercentType `protobuf:"bytes,3,opt,name=farnesene,proto3" json:"farnesene,omitempty"`
	Limonene             *PercentType `protobuf:"bytes,4,opt,name=limonene,proto3" json:"limonene,omitempty"`
	Nerol                *PercentType `protobuf:"bytes,5,opt,name=nerol,proto3" json:"nerol,omitempty"`
	Geraniol             *PercentType `protobuf:"bytes,6,opt,name=geraniol,proto3" json:"geraniol,omitempty"`
	BPinene              *PercentType `protobuf:"bytes,7,opt,name=b_pinene,json=bPinene,proto3" json:"b_pinene,omitempty"`
	Linalool             *PercentType `protobuf:"bytes,8,opt,name=linalool,proto3" json:"linalool,omitempty"`
	Caryophyllene        *PercentType `protobuf:"bytes,9,opt,name=caryophyllene,proto3" json:"caryophyllene,omitempty"`
	Cohumulone           *PercentType `protobuf:"bytes,10,opt,name=cohumulone,proto3" json:"cohumulone,omitempty"`
	Xanthohumol          *PercentType `protobuf:"bytes,11,opt,name=xanthohumol,proto3" json:"xanthohumol,omitempty"`
	Humulene             *PercentType `protobuf:"bytes,12,opt,name=humulene,proto3" json:"humulene,omitempty"`
	Myrcene              *PercentType `protobuf:"bytes,13,opt,name=myrcene,proto3" json:"myrcene,omitempty"`
	Pinene               *PercentType `protobuf:"bytes,14,opt,name=pinene,proto3" json:"pinene,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OilContentType) Reset()         { *m = OilContentType{} }
func (m *OilContentType) String() string { return proto.CompactTextString(m) }
func (*OilContentType) ProtoMessage()    {}
func (*OilContentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{55}
}

func (m *OilContentType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OilContentType.Unmarshal(m, b)
}
func (m *OilContentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OilContentType.Marshal(b, m, deterministic)
}
func (m *OilContentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OilContentType.Merge(m, src)
}
func (m *OilContentType) XXX_Size() int {
	return xxx_messageInfo_OilContentType.Size(m)
}
func (m *OilContentType) XXX_DiscardUnknown() {
	xxx_messageInfo_OilContentType.DiscardUnknown(m)
}

var xxx_messageInfo_OilContentType proto.InternalMessageInfo

func (m *OilContentType) GetPolyphenols() *PercentType {
	if m != nil {
		return m.Polyphenols
	}
	return nil
}

func (m *OilContentType) GetTotalOilMlPer_100G() float64 {
	if m != nil {
		return m.TotalOilMlPer_100G
	}
	return 0
}

func (m *OilContentType) GetFarnesene() *PercentType {
	if m != nil {
		return m.Farnesene
	}
	return nil
}

func (m *OilContentType) GetLimonene() *PercentType {
	if m != nil {
		return m.Limonene
	}
	return nil
}

func (m *OilContentType) GetNerol() *PercentType {
	if m != nil {
		return m.Nerol
	}
	return nil
}

func (m *OilContentType) GetGeraniol() *PercentType {
	if m != nil {
		return m.Geraniol
	}
	return nil
}

func (m *OilContentType) GetBPinene() *PercentType {
	if m != nil {
		return m.BPinene
	}
	return nil
}

func (m *OilContentType) GetLinalool() *PercentType {
	if m != nil {
		return m.Linalool
	}
	return nil
}

func (m *OilContentType) GetCaryophyllene() *PercentType {
	if m != nil {
		return m.Caryophyllene
	}
	return nil
}

func (m *OilContentType) GetCohumulone() *PercentType {
	if m != nil {
		return m.Cohumulone
	}
	return nil
}

func (m *OilContentType) GetXanthohumol() *PercentType {
	if m != nil {
		return m.Xanthohumol
	}
	return nil
}

func (m *OilContentType) GetHumulene() *PercentType {
	if m != nil {
		return m.Humulene
	}
	return nil
}

func (m *OilContentType) GetMyrcene() *PercentType {
	if m != nil {
		return m.Myrcene
	}
	return nil
}

func (m *OilContentType) GetPinene() *PercentType {
	if m != nil {
		return m.Pinene
	}
	return nil
}

// WaterBase provides unique properties to identify individual records of  brewing water
type WaterBase struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Calcium              *ConcentrationType `protobuf:"bytes,2,opt,name=calcium,proto3" json:"calcium,omitempty"`
	Nitrite              *ConcentrationType `protobuf:"bytes,3,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	Chloride             *ConcentrationType `protobuf:"bytes,4,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Name                 string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Potassium            *ConcentrationType `protobuf:"bytes,6,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Carbonate            *ConcentrationType `protobuf:"bytes,7,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	Iron                 *ConcentrationType `protobuf:"bytes,8,opt,name=iron,proto3" json:"iron,omitempty"`
	Flouride             *ConcentrationType `protobuf:"bytes,9,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate              *ConcentrationType `protobuf:"bytes,10,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	Magnesium            *ConcentrationType `protobuf:"bytes,11,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Producer             string             `protobuf:"bytes,12,opt,name=producer,proto3" json:"producer,omitempty"`
	Bicarbonate          *ConcentrationType `protobuf:"bytes,13,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	Nitrate              *ConcentrationType `protobuf:"bytes,14,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	Sodium               *ConcentrationType `protobuf:"bytes,15,opt,name=sodium,proto3" json:"sodium,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WaterBase) Reset()         { *m = WaterBase{} }
func (m *WaterBase) String() string { return proto.CompactTextString(m) }
func (*WaterBase) ProtoMessage()    {}
func (*WaterBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{56}
}

func (m *WaterBase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaterBase.Unmarshal(m, b)
}
func (m *WaterBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaterBase.Marshal(b, m, deterministic)
}
func (m *WaterBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaterBase.Merge(m, src)
}
func (m *WaterBase) XXX_Size() int {
	return xxx_messageInfo_WaterBase.Size(m)
}
func (m *WaterBase) XXX_DiscardUnknown() {
	xxx_messageInfo_WaterBase.DiscardUnknown(m)
}

var xxx_messageInfo_WaterBase proto.InternalMessageInfo

func (m *WaterBase) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WaterBase) GetCalcium() *ConcentrationType {
	if m != nil {
		return m.Calcium
	}
	return nil
}

func (m *WaterBase) GetNitrite() *ConcentrationType {
	if m != nil {
		return m.Nitrite
	}
	return nil
}

func (m *WaterBase) GetChloride() *ConcentrationType {
	if m != nil {
		return m.Chloride
	}
	return nil
}

func (m *WaterBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WaterBase) GetPotassium() *ConcentrationType {
	if m != nil {
		return m.Potassium
	}
	return nil
}

func (m *WaterBase) GetCarbonate() *ConcentrationType {
	if m != nil {
		return m.Carbonate
	}
	return nil
}

func (m *WaterBase) GetIron() *ConcentrationType {
	if m != nil {
		return m.Iron
	}
	return nil
}

func (m *WaterBase) GetFlouride() *ConcentrationType {
	if m != nil {
		return m.Flouride
	}
	return nil
}

func (m *WaterBase) GetSulfate() *ConcentrationType {
	if m != nil {
		return m.Sulfate
	}
	return nil
}

func (m *WaterBase) GetMagnesium() *ConcentrationType {
	if m != nil {
		return m.Magnesium
	}
	return nil
}

func (m *WaterBase) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *WaterBase) GetBicarbonate() *ConcentrationType {
	if m != nil {
		return m.Bicarbonate
	}
	return nil
}

func (m *WaterBase) GetNitrate() *ConcentrationType {
	if m != nil {
		return m.Nitrate
	}
	return nil
}

func (m *WaterBase) GetSodium() *ConcentrationType {
	if m != nil {
		return m.Sodium
	}
	return nil
}

func init() {
	proto.RegisterEnum("beerproto.CultureBaseForm", CultureBaseForm_name, CultureBaseForm_value)
	proto.RegisterEnum("beerproto.CultureBaseType", CultureBaseType_name, CultureBaseType_value)
	proto.RegisterEnum("beerproto.MiscellaneousBaseType", MiscellaneousBaseType_name, MiscellaneousBaseType_value)
	proto.RegisterEnum("beerproto.FermentableBaseType", FermentableBaseType_name, FermentableBaseType_value)
	proto.RegisterEnum("beerproto.GrainGroup", GrainGroup_name, GrainGroup_value)
	proto.RegisterEnum("beerproto.HopVarietyBaseForm", HopVarietyBaseForm_name, HopVarietyBaseForm_value)
	proto.RegisterEnum("beerproto.MashStepType_MashStepTypeType", MashStepType_MashStepTypeType_name, MashStepType_MashStepTypeType_value)
	proto.RegisterEnum("beerproto.TimeType_TimeUnitType", TimeType_TimeUnitType_name, TimeType_TimeUnitType_value)
	proto.RegisterEnum("beerproto.AcidityType_AcidityUnitType", AcidityType_AcidityUnitType_name, AcidityType_AcidityUnitType_value)
	proto.RegisterEnum("beerproto.VolumeType_VolumeUnitType", VolumeType_VolumeUnitType_name, VolumeType_VolumeUnitType_value)
	proto.RegisterEnum("beerproto.SpecificVolumeType_SpecificVolumeUnitType", SpecificVolumeType_SpecificVolumeUnitType_name, SpecificVolumeType_SpecificVolumeUnitType_value)
	proto.RegisterEnum("beerproto.RecipeType_RecipeTypeType", RecipeType_RecipeTypeType_name, RecipeType_RecipeTypeType_value)
	proto.RegisterEnum("beerproto.RecipeStyleType_StyleCategories", RecipeStyleType_StyleCategories_name, RecipeStyleType_StyleCategories_value)
	proto.RegisterEnum("beerproto.IBUEstimateType_IBUMethodType", IBUEstimateType_IBUMethodType_name, IBUEstimateType_IBUMethodType_value)
	proto.RegisterEnum("beerproto.MassType_MassUnitType", MassType_MassUnitType_name, MassType_MassUnitType_value)
	proto.RegisterEnum("beerproto.UnitType_UnitUnitType", UnitType_UnitUnitType_name, UnitType_UnitUnitType_value)
	proto.RegisterEnum("beerproto.TimingType_UseType", TimingType_UseType_name, TimingType_UseType_value)
	proto.RegisterEnum("beerproto.ConcentrationType_ConcentrationUnitType", ConcentrationType_ConcentrationUnitType_name, ConcentrationType_ConcentrationUnitType_value)
	proto.RegisterEnum("beerproto.StyleType_StyleCategories", StyleType_StyleCategories_name, StyleType_StyleCategories_value)
	proto.RegisterEnum("beerproto.BitternessType_BitternessUnitType", BitternessType_BitternessUnitType_name, BitternessType_BitternessUnitType_value)
	proto.RegisterEnum("beerproto.PercentType_PercentUnitType", PercentType_PercentUnitType_name, PercentType_PercentUnitType_value)
	proto.RegisterEnum("beerproto.GravityType_GravityUnitType", GravityType_GravityUnitType_name, GravityType_GravityUnitType_value)
	proto.RegisterEnum("beerproto.ColorType_ColorUnitType", ColorType_ColorUnitType_name, ColorType_ColorUnitType_value)
	proto.RegisterEnum("beerproto.CarbonationType_CarbonationUnitType", CarbonationType_CarbonationUnitType_name, CarbonationType_CarbonationUnitType_value)
	proto.RegisterEnum("beerproto.BoilStepType_BoilStepTypeChillingType", BoilStepType_BoilStepTypeChillingType_name, BoilStepType_BoilStepTypeChillingType_value)
	proto.RegisterEnum("beerproto.DiastaticPowerType_DiastaticPowerUnitType", DiastaticPowerType_DiastaticPowerUnitType_name, DiastaticPowerType_DiastaticPowerUnitType_value)
	proto.RegisterEnum("beerproto.CultureInformation_QualitativeRangeType", CultureInformation_QualitativeRangeType_name, CultureInformation_QualitativeRangeType_value)
	proto.RegisterEnum("beerproto.TemperatureType_TemperatureUnitType", TemperatureType_TemperatureUnitType_name, TemperatureType_TemperatureUnitType_value)
	proto.RegisterEnum("beerproto.EquipmentItemType_EquipmentBaseForm", EquipmentItemType_EquipmentBaseForm_name, EquipmentItemType_EquipmentBaseForm_value)
	proto.RegisterEnum("beerproto.SpecificHeatType_SpecificHeatUnitType", SpecificHeatType_SpecificHeatUnitType_name, SpecificHeatType_SpecificHeatUnitType_value)
	proto.RegisterEnum("beerproto.PackagingVesselType_PackagingVesselTypeType", PackagingVesselType_PackagingVesselTypeType_name, PackagingVesselType_PackagingVesselTypeType_value)
	proto.RegisterEnum("beerproto.VarietyInformation_VarietyInformationType", VarietyInformation_VarietyInformationType_name, VarietyInformation_VarietyInformationType_value)
	proto.RegisterType((*Recipe)(nil), "beerproto.Recipe")
	proto.RegisterType((*MashProcedureType)(nil), "beerproto.MashProcedureType")
	proto.RegisterType((*MashStepType)(nil), "beerproto.MashStepType")
	proto.RegisterType((*TimeType)(nil), "beerproto.TimeType")
	proto.RegisterType((*AcidityType)(nil), "beerproto.AcidityType")
	proto.RegisterType((*VolumeType)(nil), "beerproto.VolumeType")
	proto.RegisterType((*SpecificVolumeType)(nil), "beerproto.SpecificVolumeType")
	proto.RegisterType((*RecipeType)(nil), "beerproto.RecipeType")
	proto.RegisterType((*EfficiencyType)(nil), "beerproto.EfficiencyType")
	proto.RegisterType((*RecipeStyleType)(nil), "beerproto.RecipeStyleType")
	proto.RegisterType((*IBUEstimateType)(nil), "beerproto.IBUEstimateType")
	proto.RegisterType((*IngredientsType)(nil), "beerproto.IngredientsType")
	proto.RegisterType((*MiscellaneousAdditionType)(nil), "beerproto.MiscellaneousAdditionType")
	proto.RegisterType((*MassType)(nil), "beerproto.MassType")
	proto.RegisterType((*UnitType)(nil), "beerproto.UnitType")
	proto.RegisterType((*CultureAdditionType)(nil), "beerproto.CultureAdditionType")
	proto.RegisterType((*TimingType)(nil), "beerproto.TimingType")
	proto.RegisterType((*WaterAdditionType)(nil), "beerproto.WaterAdditionType")
	proto.RegisterType((*ConcentrationType)(nil), "beerproto.ConcentrationType")
	proto.RegisterType((*FermentableAdditionType)(nil), "beerproto.FermentableAdditionType")
	proto.RegisterType((*YieldType)(nil), "beerproto.YieldType")
	proto.RegisterType((*HopAdditionType)(nil), "beerproto.HopAdditionType")
	proto.RegisterType((*TasteType)(nil), "beerproto.TasteType")
	proto.RegisterType((*MiscellaneousType)(nil), "beerproto.MiscellaneousType")
	proto.RegisterType((*MiscellaneousInventoryType)(nil), "beerproto.MiscellaneousInventoryType")
	proto.RegisterType((*StyleType)(nil), "beerproto.StyleType")
	proto.RegisterType((*BitternessRangeType)(nil), "beerproto.BitternessRangeType")
	proto.RegisterType((*BitternessType)(nil), "beerproto.BitternessType")
	proto.RegisterType((*PercentRangeType)(nil), "beerproto.PercentRangeType")
	proto.RegisterType((*PercentType)(nil), "beerproto.PercentType")
	proto.RegisterType((*GravityRangeType)(nil), "beerproto.GravityRangeType")
	proto.RegisterType((*GravityType)(nil), "beerproto.GravityType")
	proto.RegisterType((*ColorRangeType)(nil), "beerproto.ColorRangeType")
	proto.RegisterType((*ColorType)(nil), "beerproto.ColorType")
	proto.RegisterType((*CarbonationRangeType)(nil), "beerproto.CarbonationRangeType")
	proto.RegisterType((*CarbonationType)(nil), "beerproto.CarbonationType")
	proto.RegisterType((*FermentationProcedureType)(nil), "beerproto.FermentationProcedureType")
	proto.RegisterType((*FermentationStepType)(nil), "beerproto.FermentationStepType")
	proto.RegisterType((*BoilProcedureType)(nil), "beerproto.BoilProcedureType")
	proto.RegisterType((*BoilStepType)(nil), "beerproto.BoilStepType")
	proto.RegisterType((*FermentableType)(nil), "beerproto.FermentableType")
	proto.RegisterType((*FermentableInventoryType)(nil), "beerproto.FermentableInventoryType")
	proto.RegisterType((*DiastaticPowerType)(nil), "beerproto.DiastaticPowerType")
	proto.RegisterType((*CultureInformation)(nil), "beerproto.CultureInformation")
	proto.RegisterType((*TemperatureRangeType)(nil), "beerproto.TemperatureRangeType")
	proto.RegisterType((*TemperatureType)(nil), "beerproto.TemperatureType")
	proto.RegisterType((*Zymocide)(nil), "beerproto.Zymocide")
	proto.RegisterType((*CultureInventoryType)(nil), "beerproto.CultureInventoryType")
	proto.RegisterType((*EquipmentType)(nil), "beerproto.EquipmentType")
	proto.RegisterType((*EquipmentItemType)(nil), "beerproto.EquipmentItemType")
	proto.RegisterType((*SpecificHeatType)(nil), "beerproto.SpecificHeatType")
	proto.RegisterType((*PackagingProcedureType)(nil), "beerproto.PackagingProcedureType")
	proto.RegisterType((*PackagingVesselType)(nil), "beerproto.PackagingVesselType")
	proto.RegisterType((*VarietyInformation)(nil), "beerproto.VarietyInformation")
	proto.RegisterType((*HopInventoryType)(nil), "beerproto.HopInventoryType")
	proto.RegisterType((*OilContentType)(nil), "beerproto.OilContentType")
	proto.RegisterType((*WaterBase)(nil), "beerproto.WaterBase")
}

func init() { proto.RegisterFile("beer.proto", fileDescriptor_3f9c2065d50c4def) }

var fileDescriptor_3f9c2065d50c4def = []byte{
	// 6428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7c, 0x49, 0x8c, 0x23, 0xc9,
	0x75, 0xe8, 0x24, 0x77, 0x3e, 0x6e, 0x59, 0x51, 0xbd, 0xb0, 0x7b, 0xb6, 0x16, 0xa5, 0x91, 0x46,
	0x2d, 0xa9, 0xba, 0xa7, 0xa7, 0x35, 0xea, 0x59, 0x34, 0x1a, 0x92, 0x95, 0x45, 0x72, 0x8a, 0x45,
	0xb2, 0x93, 0xac, 0x6e, 0xf5, 0x00, 0x1f, 0x44, 0x16, 0x19, 0x55, 0x4c, 0x29, 0x99, 0x49, 0x65,
	0x26, 0x7b, 0xba, 0xe6, 0xf2, 0xa5, 0x8f, 0x7f, 0x12, 0x3e, 0x84, 0xff, 0x85, 0x0f, 0x1b, 0x16,
	0x6c, 0x03, 0x36, 0x60, 0x18, 0x32, 0x20, 0x18, 0xd6, 0xc9, 0xf0, 0xc9, 0x37, 0x1b, 0x3e, 0x08,
	0xf0, 0xc5, 0x07, 0xdf, 0x7c, 0x32, 0x6c, 0xc0, 0x80, 0x2f, 0x06, 0x0c, 0x18, 0x30, 0x8c, 0x58,
	0x32, 0x19, 0xb9, 0x90, 0x45, 0x8e, 0x6c, 0x5f, 0xaa, 0x32, 0x22, 0xde, 0x8b, 0x8c, 0x7c, 0xf1,
	0xf6, 0x78, 0x41, 0x80, 0x33, 0x8c, 0xed, 0x83, 0x85, 0x6d, 0xb9, 0x16, 0xca, 0x93, 0x67, 0xfa,
	0x58, 0xfb, 0xcb, 0x0c, 0x64, 0x54, 0x3c, 0xd1, 0x17, 0x18, 0x95, 0x21, 0xa1, 0x4f, 0xab, 0xd2,
	0x1d, 0xe9, 0xcd, 0xbc, 0x9a, 0xd0, 0xa7, 0xe8, 0x21, 0x64, 0xe6, 0x9a, 0x33, 0xc3, 0x4e, 0x35,
	0x71, 0x27, 0xf9, 0x66, 0xe1, 0xc1, 0x2b, 0x07, 0x3e, 0xda, 0xc1, 0x89, 0xe6, 0xcc, 0x06, 0xb6,
	0x35, 0xc1, 0xd3, 0xa5, 0x8d, 0x47, 0x97, 0x0b, 0xac, 0x72, 0x58, 0x74, 0x0f, 0xb2, 0x36, 0x9d,
	0xcf, 0xa9, 0x26, 0x29, 0xda, 0x75, 0x01, 0x8d, 0xbd, 0x89, 0xc2, 0x7b, 0x50, 0xe8, 0x19, 0xdc,
	0x9a, 0xeb, 0xce, 0x04, 0x1b, 0x86, 0x66, 0x62, 0x6b, 0xe9, 0x8c, 0x75, 0xf3, 0xc2, 0xc6, 0x53,
	0x1d, 0x9b, 0xae, 0x53, 0x4d, 0x45, 0xdf, 0x2c, 0xc2, 0xd2, 0x99, 0xaa, 0x01, 0xf4, 0xce, 0x0a,
	0x1b, 0x7d, 0x1d, 0x32, 0x8e, 0x7b, 0x69, 0x60, 0xa7, 0x9a, 0xa6, 0xf3, 0x5c, 0x13, 0xe6, 0x19,
	0x92, 0x01, 0xb6, 0x72, 0x06, 0x83, 0x3e, 0x86, 0xd2, 0x39, 0xb6, 0xe7, 0xd8, 0x74, 0x35, 0x57,
	0xb7, 0x4c, 0xa7, 0x9a, 0xa1, 0x48, 0x5f, 0x12, 0x90, 0x8e, 0x84, 0xf1, 0xe0, 0xe7, 0x07, 0x51,
	0xd1, 0x7d, 0x48, 0x9d, 0x59, 0xba, 0x51, 0xcd, 0x46, 0xd6, 0xdf, 0xb0, 0x74, 0x23, 0x88, 0x4a,
	0x21, 0x51, 0x15, 0xb2, 0xcf, 0xb1, 0xed, 0xe8, 0x96, 0x59, 0xcd, 0xdd, 0x91, 0xde, 0x94, 0x54,
	0xaf, 0x89, 0x3e, 0x84, 0xa2, 0x37, 0xf9, 0x19, 0xf9, 0x96, 0x3c, 0x9d, 0xf3, 0x76, 0xcc, 0xb2,
	0xce, 0xf8, 0x17, 0x05, 0xe0, 0xd1, 0x7b, 0x50, 0x72, 0xf5, 0xb9, 0x6e, 0x5e, 0x8c, 0xad, 0xb3,
	0xef, 0xe1, 0x89, 0x5b, 0x85, 0x3b, 0x52, 0x68, 0x5f, 0x46, 0x74, 0x9c, 0xe1, 0x32, 0xd8, 0x3e,
	0x05, 0x45, 0xef, 0x42, 0x6e, 0xb2, 0x34, 0xdc, 0xa5, 0x8d, 0x9d, 0x6a, 0x81, 0xbe, 0xf7, 0x55,
	0x01, 0xad, 0xc9, 0x86, 0x3a, 0xe6, 0xb9, 0x65, 0xcf, 0xe9, 0x97, 0xab, 0x3e, 0x38, 0x7a, 0x04,
	0x80, 0x7f, 0xb0, 0xd4, 0x17, 0x73, 0xba, 0x91, 0x45, 0x8a, 0x5c, 0x15, 0x90, 0x15, 0x6f, 0x90,
	0xbe, 0x56, 0x80, 0x45, 0xdf, 0x81, 0xfc, 0x42, 0x9b, 0x7c, 0x5f, 0xbb, 0xd0, 0xcd, 0x8b, 0x6a,
	0x89, 0x22, 0x7e, 0x41, 0x40, 0x1c, 0x78, 0x63, 0x41, 0x32, 0xae, 0x70, 0x50, 0x03, 0x4a, 0x33,
	0x6b, 0x31, 0x7e, 0xae, 0xd9, 0x3a, 0x76, 0x75, 0xec, 0x54, 0xcb, 0x91, 0xa5, 0x3f, 0xa1, 0x63,
	0x97, 0xe2, 0xd2, 0x8b, 0x33, 0x6b, 0xf1, 0xc4, 0x43, 0x41, 0xf7, 0x21, 0xb7, 0xb0, 0xad, 0x73,
	0x9d, 0x50, 0xbc, 0x12, 0xe1, 0x9e, 0xa7, 0x9a, 0x8b, 0xed, 0x86, 0xe6, 0x60, 0xd5, 0x87, 0xaa,
	0xfd, 0x4a, 0x82, 0xbd, 0x88, 0x5c, 0x44, 0xa4, 0xaa, 0x05, 0x7b, 0x17, 0xb6, 0xa6, 0x9b, 0x63,
	0x17, 0xcf, 0x17, 0xd8, 0xd6, 0x08, 0xb1, 0xaa, 0x09, 0xba, 0x23, 0xe2, 0x96, 0x8e, 0x56, 0xa3,
	0xf4, 0xeb, 0x64, 0x8a, 0x24, 0xf4, 0xa2, 0x6b, 0x90, 0x36, 0x2d, 0x97, 0x8a, 0x19, 0x99, 0x9b,
	0x35, 0xd0, 0x3b, 0x00, 0x44, 0x10, 0xc7, 0x8e, 0x8b, 0x17, 0x9e, 0xf8, 0xdc, 0x0c, 0x09, 0xee,
	0xd0, 0xc5, 0x0b, 0x46, 0xb2, 0x39, 0x6f, 0x39, 0x08, 0x41, 0xca, 0xd4, 0xe6, 0xb8, 0x9a, 0xa6,
	0x93, 0xd1, 0xe7, 0xda, 0x9f, 0x65, 0xa0, 0x28, 0xc2, 0x47, 0xbe, 0xe5, 0x3e, 0xe4, 0xc9, 0x7b,
	0xc6, 0xae, 0x3e, 0xf7, 0xbe, 0x61, 0x3f, 0xc8, 0x55, 0x6c, 0xf1, 0x39, 0x02, 0x45, 0x5a, 0x04,
	0xc3, 0xd6, 0xe6, 0x1c, 0x23, 0xb9, 0x01, 0x83, 0x40, 0x51, 0x8c, 0x26, 0x54, 0xb0, 0x39, 0x0d,
	0x50, 0x2b, 0x75, 0x25, 0xb5, 0xca, 0xd8, 0x9c, 0x8a, 0xb4, 0xba, 0x03, 0x85, 0x29, 0x76, 0x26,
	0xb6, 0xbe, 0x20, 0x3b, 0xcd, 0x3f, 0x52, 0xec, 0x42, 0x1d, 0x40, 0xba, 0x79, 0xbe, 0x74, 0x70,
	0xe0, 0x4d, 0x99, 0x2b, 0xdf, 0xb4, 0xc7, 0xb0, 0xc4, 0x97, 0xbd, 0x05, 0x39, 0xc7, 0xd5, 0x6c,
	0x77, 0xbc, 0x68, 0x57, 0xb3, 0x74, 0x82, 0x1b, 0xc2, 0x04, 0xf5, 0x89, 0x3e, 0xd5, 0xdd, 0x4b,
	0xa6, 0x03, 0x29, 0xdc, 0xa0, 0x8d, 0xbe, 0x01, 0x19, 0xf2, 0x91, 0x8b, 0x36, 0x95, 0xfd, 0xf5,
	0x08, 0x69, 0x6c, 0x4e, 0x07, 0x6d, 0x7f, 0xb3, 0xf2, 0xab, 0xcd, 0x42, 0x1f, 0x40, 0xca, 0xbd,
	0x5c, 0x60, 0x2a, 0xdc, 0xe5, 0x07, 0x6f, 0xae, 0xd9, 0xf2, 0x40, 0x83, 0x69, 0x1f, 0x82, 0x45,
	0x16, 0xa0, 0xcd, 0xad, 0xa5, 0xe9, 0x56, 0x0b, 0x11, 0xe5, 0xf0, 0xc4, 0x32, 0x96, 0x7c, 0x5b,
	0x38, 0x10, 0x52, 0x40, 0x66, 0x1b, 0x2f, 0xd0, 0xaa, 0x78, 0x25, 0xad, 0x2a, 0x94, 0x0d, 0x04,
	0x4a, 0x75, 0x60, 0xef, 0x53, 0x22, 0x48, 0x63, 0x26, 0x11, 0x36, 0x91, 0xc3, 0x6a, 0x89, 0xce,
	0x23, 0xca, 0xea, 0x70, 0x81, 0x27, 0xfa, 0xb9, 0x3e, 0x11, 0x16, 0x52, 0xa1, 0x78, 0x2d, 0x82,
	0xa6, 0x12, 0xac, 0xda, 0x4f, 0x24, 0x90, 0xc3, 0xdf, 0x86, 0x72, 0x90, 0xea, 0x9d, 0x76, 0xbb,
	0xf2, 0x4b, 0xa8, 0x08, 0xb9, 0x4e, 0xef, 0xe8, 0x74, 0xd8, 0xe9, 0xf7, 0x64, 0x09, 0x55, 0xa0,
	0x30, 0x52, 0x4e, 0x06, 0x8a, 0x5a, 0x1f, 0x9d, 0xaa, 0x8a, 0x9c, 0x40, 0x25, 0xc8, 0x1f, 0x2a,
	0xcd, 0x7e, 0x73, 0x44, 0xc6, 0x93, 0x48, 0x86, 0xe2, 0xb0, 0x7f, 0xaa, 0x76, 0x7a, 0xad, 0xf1,
	0x49, 0x7d, 0xd8, 0x96, 0x53, 0x62, 0xcf, 0xd3, 0xbe, 0x3a, 0x92, 0xd3, 0x08, 0x41, 0xf9, 0x50,
	0xad, 0x77, 0x7a, 0x14, 0x62, 0x3c, 0x3a, 0xed, 0xc9, 0x19, 0x04, 0x90, 0x19, 0x0e, 0xea, 0x6a,
	0x4b, 0x91, 0xb3, 0xb5, 0x5f, 0x4a, 0x90, 0xf3, 0xd8, 0x99, 0xc8, 0xea, 0x73, 0xcd, 0x58, 0x62,
	0x2a, 0x3b, 0x92, 0xca, 0x1a, 0xe8, 0x21, 0xa4, 0x96, 0xa6, 0xee, 0x52, 0xc9, 0x29, 0x3f, 0xb8,
	0x13, 0x23, 0x07, 0xf4, 0xe1, 0xd4, 0xd4, 0x99, 0x8e, 0xa4, 0xd0, 0xb5, 0x4f, 0xa0, 0x28, 0xf6,
	0x0a, 0x1f, 0x99, 0x85, 0xe4, 0x50, 0x69, 0xca, 0x12, 0x79, 0x38, 0xe9, 0xf4, 0xe4, 0x04, 0xca,
	0x40, 0xa2, 0xad, 0xca, 0x49, 0xd2, 0x71, 0x58, 0x7f, 0x26, 0xa7, 0x08, 0xf0, 0x53, 0x45, 0x39,
	0x96, 0xd3, 0x28, 0x0f, 0xe9, 0x93, 0x7e, 0x6f, 0xd4, 0x96, 0x33, 0xa4, 0xf3, 0x99, 0x52, 0x57,
	0xe5, 0x6c, 0xed, 0x7f, 0x4b, 0x50, 0x10, 0xf8, 0x6d, 0xcd, 0xba, 0xdf, 0x0b, 0xac, 0xfb, 0xcb,
	0xf1, 0xbc, 0xea, 0x3d, 0x87, 0x56, 0xff, 0x45, 0xa8, 0x84, 0x06, 0x84, 0x0f, 0xc8, 0x40, 0x62,
	0xd0, 0x96, 0xa5, 0xda, 0x0f, 0x13, 0x00, 0xab, 0xcd, 0x5e, 0xb3, 0x8a, 0x47, 0x81, 0x55, 0x7c,
	0x29, 0x96, 0x61, 0xf9, 0x63, 0x68, 0x0d, 0xbf, 0x27, 0x41, 0x39, 0x38, 0x10, 0x5c, 0xc3, 0x49,
	0x57, 0x96, 0x50, 0x1a, 0xa4, 0xae, 0x9c, 0x20, 0x94, 0x1b, 0x0d, 0x07, 0x72, 0x92, 0x40, 0x8c,
	0x1a, 0xc3, 0x01, 0xa3, 0xe1, 0x51, 0xb7, 0xff, 0x89, 0x9c, 0x26, 0x83, 0xcd, 0xd3, 0x81, 0x9c,
	0xa1, 0x0b, 0x1f, 0xc9, 0x59, 0xf2, 0xff, 0xf1, 0x48, 0xce, 0x91, 0x81, 0x56, 0xbd, 0x2b, 0xe7,
	0xc9, 0x43, 0xa3, 0xd1, 0x95, 0x81, 0x20, 0x75, 0x8e, 0xfa, 0x9f, 0xc8, 0x05, 0xd2, 0xd5, 0x19,
	0x8c, 0xe4, 0x22, 0x7d, 0x78, 0x3c, 0x92, 0x4b, 0x74, 0x8c, 0x80, 0x97, 0xe9, 0x13, 0x81, 0xaf,
	0xd4, 0xfe, 0x51, 0x02, 0x14, 0xe5, 0xfb, 0x35, 0xa4, 0x68, 0x07, 0x48, 0xf1, 0x70, 0xa3, 0xe8,
	0x84, 0xba, 0x42, 0xa4, 0x71, 0xe1, 0x46, 0xfc, 0xb8, 0x40, 0xa1, 0x1c, 0xa4, 0x1e, 0x8f, 0xba,
	0x0d, 0x59, 0x22, 0x3c, 0xd4, 0xaa, 0x77, 0xbb, 0x0d, 0x39, 0xc1, 0x1f, 0xfb, 0x9f, 0xc8, 0x49,
	0x42, 0x84, 0x6e, 0x4b, 0x4e, 0x91, 0xef, 0xeb, 0x1e, 0xb7, 0xe4, 0x34, 0x11, 0x0b, 0x42, 0xb0,
	0xfe, 0x27, 0x8c, 0xd7, 0x4e, 0xde, 0x3e, 0x6e, 0xc9, 0x59, 0x82, 0x71, 0x34, 0x7a, 0xbb, 0xdb,
	0x90, 0x73, 0xb5, 0xbf, 0x06, 0x80, 0x95, 0x6b, 0x88, 0xde, 0x05, 0xc0, 0xe7, 0xe7, 0xfa, 0x44,
	0xc7, 0xe6, 0xe4, 0x92, 0x7e, 0x69, 0xe1, 0xc1, 0x2d, 0xd1, 0x73, 0xf0, 0x07, 0xb9, 0xeb, 0xe0,
	0xb7, 0xd1, 0x7d, 0x48, 0x53, 0x6f, 0x2e, 0xc6, 0xa2, 0xb2, 0x17, 0xac, 0xdc, 0x3e, 0x06, 0x88,
	0xbe, 0x0d, 0x45, 0xfd, 0x6c, 0x39, 0xc6, 0x8e, 0xab, 0xcf, 0x35, 0xd7, 0x33, 0x4a, 0x22, 0x62,
	0xa7, 0x71, 0xaa, 0xf0, 0x51, 0x8a, 0x58, 0xd0, 0xcf, 0x96, 0x5e, 0x07, 0x7a, 0x1f, 0xca, 0x13,
	0xcb, 0xb0, 0xec, 0xd5, 0x04, 0xcc, 0x3a, 0x89, 0xce, 0x42, 0x93, 0x00, 0x30, 0x2f, 0x91, 0xc2,
	0xfa, 0xc8, 0xf7, 0x20, 0x4b, 0xa0, 0x88, 0xde, 0x4f, 0x6f, 0xd4, 0xfb, 0x19, 0xd2, 0x2d, 0x28,
	0xfe, 0x8c, 0xa0, 0xf8, 0x1f, 0x71, 0xc5, 0x9f, 0x8d, 0xc8, 0xc1, 0x8a, 0xa4, 0xc2, 0xa3, 0xa0,
	0xf4, 0x6f, 0x43, 0x6e, 0x62, 0x69, 0x4b, 0x77, 0x66, 0xd9, 0xd4, 0xee, 0xe4, 0x55, 0xbf, 0x8d,
	0xea, 0x20, 0x5b, 0xb6, 0x7e, 0xa1, 0x9b, 0x9a, 0x41, 0xb4, 0xf3, 0x73, 0xdd, 0xbd, 0xa4, 0xe6,
	0x26, 0xb8, 0xc6, 0x16, 0x1b, 0x61, 0x2a, 0xd9, 0x83, 0xe7, 0x9d, 0xe8, 0x7d, 0x28, 0x9d, 0x07,
	0xf0, 0x61, 0x23, 0x7e, 0xf1, 0x5c, 0x44, 0xbe, 0x03, 0x85, 0x89, 0x66, 0x9f, 0x59, 0x26, 0xf5,
	0xcd, 0xa8, 0x55, 0x92, 0x54, 0xb1, 0x0b, 0xb5, 0x57, 0x6e, 0x31, 0x05, 0x61, 0xf6, 0x67, 0x3b,
	0x6f, 0x3d, 0x80, 0x89, 0x6e, 0x40, 0x86, 0x53, 0xa1, 0x44, 0xa9, 0xc0, 0x5b, 0xe8, 0x03, 0x28,
	0x88, 0xb1, 0x48, 0x39, 0xca, 0x19, 0xab, 0x51, 0xce, 0x19, 0x42, 0xf0, 0x71, 0x1f, 0x52, 0xc4,
	0xbd, 0xaa, 0x56, 0x28, 0xda, 0xe6, 0xe0, 0x89, 0x42, 0x06, 0xfd, 0x5e, 0x99, 0xa2, 0xed, 0xe6,
	0xf7, 0x7a, 0x51, 0xc7, 0x5e, 0xe4, 0x95, 0xeb, 0xa2, 0x8e, 0xbb, 0x90, 0x76, 0x35, 0xc7, 0xc5,
	0x55, 0x14, 0xe1, 0xda, 0x11, 0xe9, 0x67, 0x92, 0x42, 0x41, 0xd0, 0x5d, 0xd8, 0x9b, 0x68, 0x86,
	0x65, 0xeb, 0xd8, 0x19, 0x2f, 0x08, 0xd7, 0xea, 0xa6, 0x5b, 0xdd, 0xa7, 0x1b, 0x53, 0xf1, 0x06,
	0x06, 0xd8, 0x1e, 0xe8, 0xa6, 0x4b, 0xa2, 0x99, 0x89, 0x8d, 0x35, 0x17, 0x4f, 0xab, 0xd7, 0x28,
	0x4d, 0xbd, 0x26, 0x7a, 0x08, 0x70, 0xa6, 0xb9, 0x93, 0xd9, 0xd8, 0xd1, 0x3f, 0xc3, 0xd5, 0xeb,
	0x9b, 0xbc, 0x8d, 0x3c, 0x05, 0x1c, 0xea, 0x9f, 0x09, 0xce, 0xee, 0x0d, 0xd1, 0xd9, 0x6d, 0xc0,
	0x9e, 0x66, 0x4c, 0xac, 0x99, 0x65, 0x8c, 0xcf, 0x2e, 0xc7, 0xcf, 0x29, 0x66, 0xf5, 0x66, 0x84,
	0xcb, 0x06, 0xd8, 0x9e, 0x78, 0x71, 0x46, 0x85, 0x23, 0x34, 0x2e, 0xd9, 0x8b, 0x50, 0x07, 0xae,
	0x69, 0x8b, 0x85, 0x66, 0x63, 0xd3, 0x1d, 0x6b, 0xae, 0x8b, 0xcd, 0x25, 0x63, 0xa7, 0xea, 0xc6,
	0x69, 0xf6, 0x3d, 0x9c, 0xfa, 0x0a, 0xa5, 0xf6, 0x63, 0x09, 0xca, 0x41, 0x41, 0x13, 0xb4, 0x66,
	0x1e, 0xd2, 0xcd, 0xce, 0xa1, 0xa2, 0xca, 0x12, 0x71, 0x46, 0x8e, 0xfb, 0x27, 0x8d, 0xd3, 0x66,
	0xbb, 0x2e, 0x27, 0x08, 0xc8, 0xb0, 0x7f, 0x58, 0x97, 0x93, 0x04, 0xa4, 0x3f, 0x6a, 0x2b, 0x2a,
	0xb3, 0x31, 0x27, 0x4a, 0xfd, 0x50, 0x4e, 0x53, 0x8b, 0xdd, 0xe9, 0x29, 0x72, 0x06, 0x15, 0x20,
	0xab, 0x7c, 0x77, 0xa4, 0xd6, 0x9b, 0xc4, 0xd2, 0xc8, 0x50, 0x1c, 0xd4, 0xd5, 0x51, 0xa7, 0xde,
	0x65, 0x2e, 0x4a, 0x8e, 0xf8, 0x30, 0xf5, 0x6e, 0x77, 0xdc, 0x22, 0x4e, 0x89, 0x9c, 0xaf, 0xfd,
	0xad, 0x04, 0xe5, 0xa0, 0xa2, 0x24, 0xb1, 0xc1, 0xc4, 0x32, 0xbd, 0x28, 0x53, 0xda, 0xf8, 0x81,
	0x02, 0x24, 0x3a, 0x80, 0x8c, 0xa1, 0x2d, 0x5d, 0x6c, 0x73, 0xad, 0xba, 0x0e, 0x87, 0x43, 0xa1,
	0xbb, 0x9c, 0xf3, 0x93, 0x1b, 0xa1, 0x19, 0xcf, 0x3f, 0x84, 0xfc, 0x99, 0x8d, 0x3f, 0x9d, 0x59,
	0x4b, 0xc7, 0x53, 0x9d, 0xeb, 0x10, 0x56, 0x80, 0xb5, 0xbf, 0x49, 0x40, 0x25, 0xa4, 0xcf, 0xd1,
	0x87, 0x5c, 0x0f, 0x4a, 0x54, 0x0f, 0xde, 0x5d, 0xaf, 0xf9, 0x59, 0xe8, 0xdf, 0xd4, 0x5c, 0x7c,
	0x41, 0x79, 0x96, 0x6b, 0x43, 0x4f, 0xb7, 0x26, 0x04, 0xdd, 0x4a, 0x34, 0x24, 0x83, 0xbb, 0xe4,
	0x61, 0x96, 0xdf, 0x46, 0x5f, 0x81, 0x8a, 0xf7, 0x3c, 0x36, 0x97, 0xf3, 0x33, 0x6c, 0xd3, 0xf5,
	0xa7, 0xd5, 0xb2, 0xd7, 0xdd, 0xa3, 0xbd, 0xe8, 0x0b, 0x50, 0xa4, 0xa6, 0x66, 0x6c, 0x60, 0x97,
	0x10, 0x91, 0x47, 0x1f, 0xb4, 0xaf, 0x4b, 0xbb, 0xd0, 0xeb, 0xc0, 0x9a, 0xe3, 0x8b, 0xa5, 0x3e,
	0xf5, 0xd4, 0x3b, 0xd0, 0xae, 0x16, 0xe9, 0xa9, 0x9d, 0x43, 0x25, 0xb4, 0xea, 0xa0, 0x41, 0x6e,
	0x28, 0x94, 0xb3, 0xf2, 0x90, 0x9e, 0xe8, 0x53, 0x6c, 0xcb, 0x09, 0xc2, 0x2d, 0x1e, 0x8f, 0x25,
	0x7d, 0x76, 0x4a, 0xf9, 0xdc, 0x26, 0x32, 0x96, 0xcf, 0x77, 0xd9, 0xda, 0xef, 0x48, 0x50, 0x09,
	0xd9, 0x3b, 0xf4, 0x11, 0x64, 0xe6, 0xd8, 0x9d, 0x59, 0x53, 0x4e, 0xda, 0x37, 0xd7, 0xdb, 0x46,
	0xd2, 0x3e, 0xa1, 0xb0, 0x3c, 0x27, 0x44, 0x9f, 0x6b, 0x6d, 0x28, 0x05, 0x06, 0x82, 0x62, 0xa1,
	0x6a, 0x17, 0xd8, 0x96, 0x25, 0xb2, 0xe2, 0x91, 0x6e, 0x3a, 0xd8, 0x9d, 0xc9, 0x09, 0xe2, 0x33,
	0xb4, 0x34, 0x1b, 0xbb, 0x9f, 0x71, 0xb9, 0x70, 0x67, 0xd8, 0x96, 0x53, 0xb5, 0xdf, 0x4d, 0x42,
	0x25, 0xa4, 0x75, 0xd1, 0xff, 0x80, 0x9b, 0xc1, 0x04, 0x92, 0x36, 0x9d, 0xea, 0x2c, 0x83, 0x23,
	0x45, 0x32, 0x38, 0x81, 0xf4, 0x51, 0x9d, 0x03, 0xd2, 0xc5, 0xde, 0x98, 0xc7, 0x0d, 0x39, 0xe8,
	0x18, 0xf6, 0x78, 0x4e, 0x43, 0x98, 0x98, 0x65, 0xc4, 0x5e, 0x8b, 0xe6, 0x42, 0x02, 0x53, 0xca,
	0x93, 0x60, 0xa7, 0x83, 0x14, 0x60, 0x91, 0x8b, 0x30, 0x55, 0x32, 0x92, 0x22, 0xa2, 0xc9, 0x85,
	0xc0, 0x44, 0xe5, 0x4f, 0xc5, 0x2e, 0x07, 0x3d, 0x85, 0xeb, 0x42, 0x8a, 0x47, 0x98, 0x8c, 0x05,
	0xfc, 0xb5, 0xf8, 0xdc, 0x50, 0x60, 0xca, 0x6b, 0xe7, 0xd1, 0x01, 0x07, 0x7d, 0x87, 0x65, 0x4e,
	0x56, 0x13, 0xa6, 0x23, 0xc9, 0xa6, 0xb6, 0xb5, 0x08, 0x4c, 0x54, 0x9c, 0xad, 0x3a, 0x9c, 0xda,
	0x3f, 0x27, 0xe0, 0xd6, 0x5a, 0x1a, 0x47, 0x12, 0x08, 0x6b, 0x64, 0x6e, 0x61, 0x5b, 0xd3, 0xe5,
	0x04, 0xdb, 0x9e, 0xcc, 0x79, 0x6d, 0x12, 0xa6, 0xb2, 0xf4, 0x14, 0x57, 0x15, 0x6b, 0x72, 0x58,
	0x1c, 0x08, 0xbd, 0x0a, 0xc0, 0x50, 0xdd, 0xb1, 0x3e, 0xe5, 0x72, 0x97, 0xe7, 0x3d, 0x1d, 0x62,
	0x8a, 0x98, 0xc6, 0xc8, 0x44, 0xe2, 0xaf, 0xc0, 0x17, 0x34, 0x34, 0x47, 0xf4, 0x9a, 0xbe, 0x4a,
	0xb5, 0x9b, 0xc3, 0x43, 0xfb, 0xfd, 0xa0, 0x5d, 0xa7, 0x1c, 0xd9, 0x7e, 0x89, 0x2a, 0x37, 0x87,
	0x80, 0x52, 0xbf, 0x3c, 0x17, 0x01, 0xf5, 0xdc, 0x6a, 0x02, 0x4a, 0x40, 0xd0, 0x3d, 0xc8, 0x70,
	0xfb, 0x95, 0xdf, 0x60, 0x12, 0xdb, 0x2f, 0xa9, 0x1c, 0xac, 0x91, 0xf3, 0x22, 0xf6, 0xda, 0x6f,
	0x4a, 0x90, 0xf3, 0x5e, 0xbd, 0x73, 0xa4, 0xe9, 0x21, 0xd2, 0x87, 0x50, 0x30, 0xf0, 0x1d, 0x9a,
	0xfe, 0x71, 0xd6, 0x04, 0x49, 0x2d, 0x16, 0x24, 0xb5, 0x58, 0x98, 0x79, 0xdc, 0xe2, 0x9e, 0x7f,
	0x43, 0x4e, 0x91, 0xff, 0x24, 0x3e, 0xaa, 0xfd, 0x5c, 0x82, 0x9c, 0x8f, 0xbd, 0xeb, 0xca, 0x3c,
	0x44, 0xfa, 0x10, 0x5a, 0xd9, 0x63, 0x28, 0x8a, 0xbd, 0xc1, 0x18, 0xb8, 0xdf, 0x53, 0x64, 0x89,
	0x74, 0x9d, 0xf6, 0x3a, 0x23, 0x66, 0x60, 0x95, 0x7a, 0xb3, 0x2d, 0x27, 0xd1, 0x1e, 0x94, 0x0e,
	0x3b, 0x27, 0x4a, 0x6f, 0xd8, 0xe9, 0xf7, 0xba, 0xca, 0x70, 0xc8, 0x82, 0x94, 0x01, 0x09, 0x52,
	0x6a, 0x7f, 0x90, 0x82, 0xfd, 0x18, 0x19, 0x8e, 0xb0, 0xec, 0x01, 0xa4, 0xce, 0x2d, 0x7b, 0xce,
	0x17, 0x7c, 0x3b, 0xaa, 0x01, 0x08, 0xbb, 0x1c, 0x59, 0xf6, 0x5c, 0xa5, 0x70, 0x21, 0x1e, 0x4c,
	0x86, 0x79, 0xd0, 0x93, 0x80, 0x94, 0x20, 0x01, 0x07, 0xb0, 0x4f, 0xb8, 0x6f, 0x3c, 0x21, 0xdb,
	0x3b, 0x3e, 0xd3, 0x0d, 0x83, 0x8b, 0x22, 0xb1, 0x2e, 0x7b, 0x64, 0xa8, 0x49, 0x46, 0x1a, 0x7c,
	0x00, 0xbd, 0x01, 0x65, 0x57, 0x9f, 0x63, 0x67, 0xcc, 0xd5, 0xcd, 0x94, 0x72, 0x74, 0x5a, 0x2d,
	0xd1, 0x5e, 0xbe, 0xac, 0x69, 0x40, 0xb0, 0xb2, 0x21, 0xc1, 0x3a, 0xe0, 0xa2, 0x90, 0xdb, 0xf4,
	0x55, 0x82, 0x10, 0x3c, 0x82, 0x82, 0xe8, 0x2c, 0xe5, 0x37, 0x1a, 0x6e, 0x11, 0x54, 0x10, 0x61,
	0xd8, 0x46, 0x84, 0x3d, 0x69, 0x2b, 0x6c, 0x2f, 0x6d, 0xc5, 0x5d, 0xa4, 0xad, 0xb4, 0xab, 0xb4,
	0xfd, 0x2c, 0x09, 0xb0, 0x5a, 0x27, 0xfa, 0x0a, 0xa4, 0x68, 0x2e, 0x53, 0x5a, 0x9f, 0xcb, 0xa4,
	0x00, 0xe8, 0x1e, 0xe4, 0xa6, 0x4b, 0x9b, 0x91, 0x6b, 0x53, 0xaa, 0xd4, 0x03, 0x42, 0xaf, 0x51,
	0x6f, 0xcd, 0xd5, 0xcd, 0xa5, 0xb5, 0x64, 0x49, 0xde, 0x9c, 0x2a, 0xf4, 0x90, 0x08, 0xcd, 0xe1,
	0xa1, 0xba, 0x1f, 0x61, 0xa5, 0x36, 0x47, 0x68, 0x1e, 0xbc, 0x17, 0x64, 0x7d, 0x19, 0x12, 0x8b,
	0xd9, 0x15, 0xa1, 0x67, 0x62, 0x31, 0x23, 0x4c, 0xea, 0xb8, 0x78, 0xc1, 0xd9, 0x8a, 0x3e, 0xa3,
	0x7b, 0x90, 0x24, 0x2e, 0x1b, 0x8b, 0x3a, 0x5f, 0x8d, 0xdd, 0xc4, 0x83, 0x53, 0xce, 0x33, 0x04,
	0xb2, 0x76, 0x06, 0x59, 0xde, 0x16, 0xc4, 0xb5, 0x02, 0x85, 0xfa, 0xe1, 0xe1, 0x78, 0xd4, 0x67,
	0x5e, 0xac, 0x24, 0x74, 0x34, 0xfa, 0x9d, 0xae, 0x9c, 0x40, 0x37, 0x61, 0x9f, 0x77, 0x1c, 0x29,
	0xea, 0x89, 0xd2, 0x1b, 0xd5, 0x79, 0x92, 0x0e, 0x41, 0x99, 0x0f, 0x0c, 0xea, 0xcd, 0xe3, 0x7a,
	0x4b, 0x91, 0x53, 0xb5, 0x5f, 0x66, 0x60, 0x2f, 0x62, 0x3d, 0x23, 0x22, 0xfc, 0x08, 0x72, 0xe7,
	0x86, 0xb5, 0xb4, 0x89, 0xab, 0x95, 0x88, 0x84, 0x4a, 0x4d, 0xcb, 0x24, 0x9c, 0xcb, 0x76, 0x81,
	0xed, 0x89, 0x07, 0x8d, 0xde, 0x81, 0xac, 0xb3, 0x34, 0xce, 0x57, 0x79, 0x82, 0xcd, 0x88, 0x1e,
	0x70, 0x40, 0xf4, 0x52, 0x21, 0xd1, 0x7b, 0x07, 0xb2, 0xa6, 0x4e, 0xb0, 0x30, 0xdf, 0x89, 0x2b,
	0xe6, 0xe4, 0xc0, 0x1e, 0x9e, 0xee, 0x7a, 0x69, 0xea, 0x2d, 0xf0, 0x74, 0x97, 0x88, 0x6e, 0x6e,
	0x32, 0x23, 0xd1, 0xda, 0x14, 0x73, 0x1b, 0x76, 0xc5, 0xd7, 0x7b, 0xd0, 0x42, 0x92, 0x38, 0xb7,
	0x4d, 0x92, 0xd8, 0x53, 0x6d, 0xcf, 0x04, 0xd5, 0xf6, 0x1e, 0xe4, 0x17, 0x96, 0xab, 0x39, 0x8e,
	0xbe, 0x9c, 0x73, 0x05, 0xb0, 0xf9, 0xed, 0x2b, 0x70, 0x82, 0x3b, 0xd7, 0x2e, 0x4c, 0x4c, 0x71,
	0x0b, 0xdb, 0xe0, 0xfa, 0xe0, 0x24, 0x32, 0xd6, 0x6d, 0x3f, 0x49, 0xb0, 0x19, 0x8d, 0x42, 0xa2,
	0x0f, 0xa1, 0x70, 0xa6, 0x7b, 0xf9, 0x06, 0x4f, 0x4f, 0x6c, 0x46, 0x14, 0x11, 0xc8, 0xf6, 0x4c,
	0x34, 0x63, 0x42, 0xd6, 0x5a, 0xde, 0x66, 0x7b, 0x38, 0x30, 0xf9, 0xca, 0xd5, 0x5b, 0x2b, 0xdb,
	0x7c, 0xe5, 0xea, 0x9d, 0x0f, 0x21, 0xe3, 0x58, 0x53, 0xf2, 0x4a, 0x79, 0x0b, 0x44, 0x0e, 0x5b,
	0xfb, 0x63, 0x09, 0xf6, 0x22, 0xa3, 0x6b, 0xcc, 0xf5, 0x51, 0xc0, 0x5c, 0x3f, 0xd8, 0x34, 0x7f,
	0xb0, 0x27, 0x64, 0xc0, 0x3f, 0x80, 0xeb, 0xb1, 0xc3, 0x41, 0x4b, 0x3e, 0x18, 0x9c, 0xb0, 0x6c,
	0xf6, 0x60, 0xd0, 0x60, 0xb9, 0xd8, 0x93, 0x56, 0x57, 0x4e, 0xd6, 0xfe, 0x21, 0x09, 0x37, 0xd7,
	0xf8, 0xb5, 0x11, 0x61, 0x7f, 0xc0, 0x2d, 0x1b, 0x5b, 0xf1, 0x6b, 0xf1, 0x9e, 0x71, 0xc8, 0xba,
	0xdd, 0x80, 0x4c, 0x9f, 0x26, 0xb3, 0xb8, 0xbd, 0xe6, 0x2d, 0xf4, 0x0e, 0x14, 0xd8, 0x49, 0xc5,
	0x85, 0x6d, 0x2d, 0x17, 0x54, 0x92, 0xcb, 0x01, 0x29, 0xa0, 0x07, 0x12, 0x2d, 0x32, 0xa8, 0xc2,
	0x85, 0xff, 0x8c, 0xee, 0x42, 0xfa, 0x52, 0xc7, 0xc6, 0x94, 0x0b, 0xb8, 0x98, 0x65, 0x79, 0x46,
	0xfa, 0x59, 0x96, 0x85, 0x82, 0x10, 0x58, 0x9a, 0x24, 0xe4, 0x42, 0x1d, 0x9f, 0x47, 0x64, 0x20,
	0xbe, 0x84, 0x65, 0xd7, 0xb8, 0xcf, 0xb9, 0x90, 0xaa, 0x09, 0xfa, 0x22, 0xf9, 0xb0, 0x2f, 0xf2,
	0x5f, 0x67, 0x9a, 0x57, 0xf6, 0xb6, 0xb8, 0xab, 0xbd, 0xfd, 0x51, 0x02, 0xf2, 0x3e, 0x91, 0xd0,
	0x37, 0x01, 0xce, 0x75, 0x13, 0x8f, 0x2f, 0x6c, 0xdd, 0x9c, 0x5e, 0x91, 0xc2, 0xc8, 0x13, 0xc8,
	0x16, 0x01, 0x44, 0xef, 0x42, 0x71, 0x62, 0x69, 0xb6, 0xe3, 0x21, 0x6e, 0xce, 0x63, 0x14, 0x18,
	0x2c, 0x43, 0xed, 0xc2, 0x0d, 0xfa, 0x46, 0x8e, 0x3f, 0xd5, 0xcf, 0xcf, 0xb1, 0x8d, 0xcd, 0x09,
	0xbe, 0x22, 0xbd, 0x71, 0x8d, 0x60, 0x35, 0x29, 0xd2, 0xa1, 0x8f, 0x83, 0x1e, 0x52, 0xfd, 0x87,
	0x4d, 0x57, 0xd7, 0x8c, 0x2b, 0xac, 0xf5, 0x0a, 0xb0, 0xf6, 0xe7, 0x49, 0xa8, 0x84, 0xc2, 0x2e,
	0xf4, 0x36, 0xe4, 0xcf, 0xb0, 0xab, 0x8d, 0xb5, 0x89, 0x7e, 0x15, 0x21, 0x72, 0x04, 0x90, 0xd8,
	0xf4, 0x00, 0x73, 0x24, 0x42, 0xcc, 0x71, 0x03, 0x32, 0x56, 0x80, 0xe9, 0x59, 0x8b, 0x30, 0xd9,
	0x25, 0xd6, 0x3c, 0xbb, 0x45, 0x9f, 0xd1, 0x5b, 0xdc, 0x09, 0x4e, 0x47, 0xac, 0x7f, 0xdb, 0x3b,
	0x43, 0xbf, 0x0c, 0xf9, 0xc1, 0x2b, 0xe6, 0xca, 0x6c, 0xc3, 0x5c, 0x71, 0xac, 0x1d, 0x64, 0xdf,
	0x5c, 0x98, 0x7d, 0xbf, 0x09, 0xa0, 0x19, 0x8b, 0x19, 0x27, 0xc9, 0x66, 0x97, 0x34, 0x4f, 0x21,
	0x29, 0x4d, 0x3c, 0x36, 0x86, 0x5d, 0xd8, 0xb8, 0xb0, 0x2b, 0x1b, 0xbf, 0x0b, 0x79, 0x3f, 0xa1,
	0xba, 0xca, 0x66, 0x4a, 0x62, 0x36, 0xf3, 0x06, 0x64, 0x88, 0x32, 0x34, 0x2f, 0xe8, 0xd6, 0x48,
	0x2a, 0x6f, 0xd5, 0x7e, 0x3b, 0x01, 0x7b, 0x91, 0xaa, 0x97, 0x88, 0x9e, 0xbb, 0x09, 0xd9, 0xa5,
	0x83, 0xc7, 0xe7, 0x96, 0xb7, 0xb3, 0x99, 0x25, 0xa5, 0xff, 0x9a, 0x3a, 0x81, 0xb8, 0xb8, 0x43,
	0xe4, 0x8e, 0xf4, 0x46, 0xd5, 0x91, 0x59, 0x17, 0x4a, 0x67, 0x77, 0x0a, 0xa5, 0x9b, 0x90, 0xd7,
	0xcd, 0xe7, 0xd8, 0x74, 0x2d, 0xfb, 0x92, 0xfb, 0x14, 0x6f, 0xac, 0x43, 0xed, 0x78, 0x80, 0x6c,
	0xff, 0x7c, 0xbc, 0xda, 0x2f, 0x24, 0xb8, 0xbd, 0x1e, 0xd2, 0xdf, 0x5e, 0x69, 0xfb, 0x00, 0x22,
	0xb1, 0x4b, 0x00, 0x91, 0xdc, 0x95, 0x13, 0xfe, 0x3e, 0x0b, 0xf9, 0x55, 0xd6, 0xf2, 0x1a, 0xa4,
	0x35, 0xdb, 0x9a, 0x6b, 0x1e, 0x2b, 0xd0, 0x06, 0xba, 0x13, 0x3c, 0x79, 0x60, 0x1b, 0x1a, 0x38,
	0x5d, 0x88, 0xc9, 0x3e, 0x26, 0x63, 0xb3, 0x8f, 0xfe, 0xf6, 0xa7, 0x42, 0xbc, 0x76, 0x6e, 0x68,
	0xcf, 0x2d, 0x6f, 0xa3, 0x79, 0x0b, 0xbd, 0x02, 0xf9, 0xb9, 0xb5, 0x74, 0x67, 0xe7, 0x18, 0x1b,
	0xde, 0x2e, 0xfb, 0x1d, 0xe8, 0xa3, 0xf0, 0x89, 0x0e, 0xf3, 0x1f, 0x5f, 0x8e, 0x6a, 0x30, 0x55,
	0x33, 0x2f, 0x70, 0xcc, 0xb1, 0x4e, 0x28, 0xd1, 0x99, 0x0b, 0x27, 0x3a, 0xd1, 0x3d, 0xcf, 0xfc,
	0xe5, 0x23, 0xc7, 0x7e, 0xd4, 0xfc, 0xad, 0x26, 0xe6, 0x36, 0xf0, 0x28, 0xe6, 0xa0, 0x0a, 0xae,
	0x5e, 0x56, 0xe4, 0xb4, 0xea, 0x36, 0xe4, 0xf0, 0x0b, 0x6d, 0xbe, 0x30, 0x30, 0xb3, 0x68, 0x79,
	0xd5, 0x6f, 0xfb, 0xc2, 0x52, 0x14, 0x84, 0xa5, 0x1e, 0x3c, 0xa0, 0x62, 0xfe, 0xe1, 0xeb, 0xe2,
	0x72, 0x57, 0xa3, 0xab, 0xd7, 0x06, 0x4e, 0xb0, 0x5a, 0x71, 0xc7, 0x17, 0xe5, 0xc8, 0xda, 0xb9,
	0xde, 0x12, 0xd6, 0x1e, 0x3e, 0xc3, 0x98, 0xc2, 0x6b, 0xba, 0xe9, 0x62, 0x9b, 0xcd, 0xab, 0x19,
	0xe3, 0x33, 0xdd, 0x25, 0x4d, 0xec, 0x38, 0x63, 0xc2, 0xae, 0x0e, 0x77, 0x24, 0x45, 0xef, 0xa7,
	0xe1, 0x83, 0xac, 0x26, 0x7e, 0x25, 0x30, 0xcb, 0x0a, 0x82, 0xb0, 0xbf, 0x43, 0x02, 0x52, 0x6d,
	0xb1, 0xc0, 0x9a, 0xad, 0x11, 0xeb, 0x27, 0xb3, 0xad, 0x5b, 0xf5, 0x04, 0x92, 0xe5, 0x7b, 0xa1,
	0x64, 0x79, 0x38, 0x07, 0x8e, 0xa2, 0x39, 0x70, 0xef, 0x1c, 0x73, 0x3f, 0x72, 0x8e, 0x79, 0x55,
	0xe6, 0xfe, 0x1b, 0x80, 0xac, 0xe7, 0xd8, 0xd6, 0x0c, 0x63, 0xac, 0xcf, 0x17, 0x36, 0x76, 0xe8,
	0xf9, 0x06, 0x3b, 0x77, 0xda, 0xe3, 0x23, 0x1d, 0x7f, 0xa0, 0x76, 0xb1, 0x75, 0x2e, 0x9d, 0x1d,
	0xd8, 0x24, 0x02, 0x07, 0x36, 0x62, 0x32, 0xdd, 0x4f, 0x9c, 0xa7, 0xfd, 0xbc, 0x7a, 0xc6, 0xcf,
	0xab, 0x67, 0x6b, 0xff, 0x13, 0xf6, 0x63, 0xa8, 0x8c, 0xde, 0x86, 0xec, 0x5c, 0x37, 0xf5, 0xf9,
	0x72, 0x1e, 0x73, 0xb6, 0xbd, 0x42, 0x60, 0x61, 0x01, 0x87, 0xa4, 0x48, 0xda, 0x0b, 0x8a, 0x94,
	0xb8, 0x1a, 0x89, 0x41, 0xd6, 0x7e, 0x2a, 0x41, 0x39, 0x38, 0xb6, 0xc6, 0xad, 0xff, 0x28, 0xe0,
	0xd6, 0x7f, 0x7d, 0xed, 0xd4, 0x07, 0x41, 0x9e, 0x10, 0x1c, 0xfa, 0x37, 0x01, 0x45, 0xc7, 0x82,
	0x74, 0xed, 0x34, 0x4e, 0x1d, 0x59, 0xaa, 0x3d, 0x07, 0x39, 0xcc, 0xd1, 0xe8, 0x7e, 0x98, 0x24,
	0xeb, 0xec, 0xb6, 0x4f, 0x8f, 0xfb, 0x61, 0x7a, 0xac, 0xc7, 0xe0, 0xc4, 0xf8, 0x89, 0x04, 0x05,
	0x61, 0x60, 0xe7, 0xda, 0x16, 0x01, 0xd7, 0x7b, 0x0e, 0xd1, 0xe0, 0x1b, 0x50, 0x09, 0x0d, 0x08,
	0x04, 0x90, 0xa1, 0x38, 0x50, 0xd4, 0xa6, 0xd2, 0x1b, 0x8d, 0x87, 0x9d, 0x56, 0x8f, 0x11, 0x22,
	0xac, 0x96, 0x36, 0x13, 0x42, 0xf4, 0x0e, 0xb7, 0x23, 0x44, 0x10, 0x83, 0x13, 0xe2, 0xb7, 0x24,
	0x28, 0x08, 0x03, 0x3b, 0x13, 0x42, 0xc0, 0xf5, 0x9e, 0x43, 0x84, 0x78, 0x04, 0x95, 0xd0, 0x40,
	0x30, 0x77, 0x3c, 0x6c, 0x31, 0xf9, 0x1a, 0x74, 0xeb, 0xa3, 0x3e, 0xcb, 0xd0, 0x36, 0xd4, 0xce,
	0x77, 0xe5, 0x64, 0x6d, 0x01, 0xe5, 0xa0, 0x9a, 0x47, 0x07, 0x61, 0x8a, 0xc4, 0x47, 0x44, 0x3e,
	0x3d, 0x0e, 0xc2, 0xf4, 0x58, 0x07, 0xcf, 0xa9, 0xf1, 0x7f, 0x25, 0xc8, 0xfb, 0xdd, 0x6b, 0x68,
	0xf1, 0x4e, 0x80, 0x16, 0xb5, 0xb8, 0x09, 0xd9, 0x53, 0x88, 0x0e, 0xdf, 0x84, 0x52, 0xa0, 0x3b,
	0x18, 0xdd, 0x2a, 0x8d, 0x26, 0xcb, 0x53, 0x77, 0xfb, 0x4f, 0x3a, 0x2c, 0xbc, 0x1d, 0xaa, 0x27,
	0x72, 0xb2, 0xf6, 0xbf, 0x24, 0xb8, 0x16, 0x67, 0x3d, 0xd0, 0xc3, 0x30, 0x2d, 0x6e, 0xc7, 0xdb,
	0x9b, 0x20, 0x45, 0x1e, 0x86, 0x29, 0xb2, 0x19, 0x8b, 0xd3, 0xe5, 0x37, 0x24, 0xa8, 0x84, 0x06,
	0xd7, 0x50, 0xa7, 0x11, 0xa0, 0xce, 0xc1, 0xfa, 0xc9, 0xc5, 0x76, 0x88, 0x52, 0x5f, 0x85, 0xfd,
	0x98, 0xc1, 0xa0, 0xfe, 0x78, 0xd2, 0xef, 0x0e, 0x65, 0xa9, 0xf6, 0x17, 0x12, 0xdc, 0x5a, 0x5b,
	0xd9, 0x11, 0x71, 0x8b, 0x43, 0x95, 0x9f, 0x89, 0x68, 0xe5, 0x67, 0xbc, 0x7f, 0xdc, 0x03, 0x24,
	0xd6, 0x88, 0x04, 0xea, 0x69, 0x5f, 0x5f, 0x53, 0x63, 0xe2, 0xd7, 0xd5, 0xee, 0x9d, 0x87, 0x7a,
	0xe3, 0xeb, 0x6b, 0x7f, 0x9e, 0x82, 0x6b, 0x71, 0xf8, 0x71, 0xc7, 0x64, 0x3d, 0xe1, 0x98, 0x8c,
	0x3c, 0xc7, 0xd5, 0xc5, 0x26, 0x77, 0xae, 0x8b, 0x0d, 0x14, 0xf0, 0xa6, 0xb6, 0x29, 0xe0, 0x7d,
	0x19, 0xf2, 0xe7, 0x36, 0xc6, 0x63, 0x5b, 0x77, 0xd8, 0xc7, 0xe4, 0xd4, 0x1c, 0xe9, 0x50, 0x75,
	0x07, 0xa3, 0xf7, 0xa1, 0xc4, 0x2a, 0x5f, 0x3d, 0x47, 0x2c, 0xb3, 0xb9, 0xe2, 0x87, 0x02, 0x7b,
	0x0e, 0xd8, 0xb7, 0xa0, 0x40, 0x3e, 0x28, 0xe8, 0x5a, 0xae, 0x43, 0x05, 0x6c, 0x4e, 0x3d, 0xc4,
	0x55, 0xbd, 0xed, 0xec, 0x8a, 0xf2, 0x59, 0x5e, 0x6f, 0x3b, 0x0b, 0x73, 0x45, 0x3e, 0xca, 0x15,
	0x2d, 0xd8, 0x63, 0x93, 0x8a, 0x04, 0x86, 0xab, 0xcb, 0xb4, 0x29, 0x92, 0x48, 0x62, 0xaf, 0xb4,
	0x77, 0xc6, 0x63, 0xc6, 0x8d, 0xa5, 0xbd, 0x33, 0xe2, 0x98, 0x3f, 0xc7, 0x8e, 0x83, 0x0d, 0xee,
	0x6c, 0xf2, 0x56, 0xed, 0xff, 0x27, 0x60, 0x2f, 0x52, 0xc4, 0x13, 0x61, 0x94, 0x77, 0xa1, 0xb4,
	0xb0, 0xf1, 0xf8, 0xcc, 0xd2, 0x0d, 0x56, 0x5f, 0x93, 0xd8, 0x94, 0xa8, 0x2d, 0x2c, 0x6c, 0x4c,
	0xe6, 0xa4, 0x15, 0x36, 0xf7, 0x21, 0x4f, 0xd1, 0xae, 0xac, 0xcc, 0x26, 0x50, 0x94, 0x15, 0xde,
	0x01, 0x60, 0x2f, 0x5a, 0x53, 0x6a, 0x4e, 0xa7, 0xf6, 0x4b, 0xcd, 0xcf, 0x78, 0x2b, 0x56, 0x14,
	0xc2, 0x1b, 0x92, 0xd9, 0x20, 0xa6, 0x59, 0x41, 0x4c, 0x6b, 0xbf, 0x4c, 0x43, 0x51, 0x7c, 0x4f,
	0x84, 0x22, 0x21, 0xae, 0x4a, 0x6c, 0xcd, 0x55, 0xa7, 0x50, 0x9a, 0xcc, 0x74, 0xc3, 0xd0, 0xcd,
	0x8b, 0x31, 0xf5, 0x4b, 0x93, 0x54, 0xbd, 0xdd, 0x5f, 0xf3, 0x81, 0x81, 0x46, 0x93, 0x23, 0x32,
	0x2e, 0x9f, 0x08, 0xad, 0xf0, 0x87, 0xa6, 0xa2, 0x1f, 0x1a, 0x23, 0xd8, 0xe9, 0xcf, 0x23, 0xd8,
	0xab, 0x3a, 0xfb, 0xcc, 0x36, 0x75, 0xf6, 0x01, 0x55, 0x90, 0xdd, 0x46, 0x15, 0x44, 0xa4, 0x3d,
	0xb7, 0x83, 0xb4, 0x8b, 0x42, 0x9b, 0xdf, 0x4e, 0x68, 0x57, 0x92, 0x04, 0xdb, 0x48, 0x92, 0xc7,
	0x66, 0x05, 0x81, 0xcd, 0x62, 0xa5, 0xba, 0xb8, 0xbb, 0x54, 0xd7, 0xde, 0x87, 0xea, 0xba, 0x0d,
	0x0f, 0x16, 0xb7, 0x34, 0xea, 0xa3, 0x66, 0x5b, 0x96, 0x10, 0x40, 0xa6, 0xd3, 0xeb, 0x92, 0xb8,
	0x20, 0x51, 0xfb, 0xf7, 0x34, 0x54, 0x42, 0x57, 0x76, 0x62, 0xce, 0xa8, 0x8a, 0x73, 0xed, 0xc5,
	0x58, 0x37, 0xc7, 0xb4, 0x08, 0xee, 0x0a, 0x27, 0x17, 0xe6, 0xda, 0x8b, 0x8e, 0xd9, 0x20, 0x90,
	0xe8, 0x0d, 0x28, 0xdb, 0x78, 0x62, 0xcd, 0xe7, 0x84, 0x58, 0x7e, 0x1d, 0x56, 0x4e, 0x2d, 0xf9,
	0xbd, 0x27, 0x9a, 0x33, 0x23, 0x7e, 0x23, 0x99, 0x07, 0xeb, 0xe6, 0x15, 0x65, 0x57, 0x1e, 0xd8,
	0x55, 0xd5, 0x14, 0xa1, 0xe4, 0x78, 0x66, 0xe7, 0xe4, 0x78, 0xf6, 0xea, 0xe4, 0xf8, 0x83, 0xc0,
	0x31, 0xf5, 0x76, 0xc9, 0x7c, 0x31, 0xab, 0x95, 0x0f, 0x65, 0xb5, 0xbe, 0x08, 0x25, 0x9e, 0x32,
	0x9c, 0x5f, 0x1a, 0x9a, 0xc3, 0x34, 0xbc, 0xa4, 0x16, 0x59, 0x76, 0x90, 0xf5, 0xad, 0x32, 0xf2,
	0x85, 0xed, 0x33, 0xf2, 0x62, 0xa6, 0xe0, 0x08, 0x2a, 0x53, 0x5d, 0x73, 0x88, 0x8d, 0x9f, 0x8c,
	0x17, 0xd6, 0xa7, 0xd8, 0x8e, 0xb9, 0xe3, 0x70, 0xe8, 0x41, 0x0c, 0x08, 0x00, 0x93, 0xe9, 0x69,
	0xa0, 0x0f, 0x3d, 0x80, 0xdc, 0xdc, 0xd2, 0x1d, 0xca, 0xb3, 0xe5, 0xcd, 0x09, 0x5f, 0x0f, 0x4e,
	0x48, 0xea, 0x56, 0x02, 0x49, 0xdd, 0xba, 0x98, 0x79, 0x63, 0x87, 0x45, 0x5f, 0x8c, 0xa7, 0xe6,
	0xba, 0xbc, 0x1b, 0xa1, 0xdd, 0xf7, 0x2d, 0xe3, 0x4c, 0x9b, 0xcc, 0xc6, 0xba, 0x39, 0xc5, 0x2f,
	0x68, 0xcc, 0x2f, 0xa9, 0x45, 0xde, 0xd9, 0x21, 0x7d, 0x2b, 0xad, 0x8d, 0x44, 0xad, 0xfd, 0x43,
	0x09, 0xaa, 0xeb, 0x5e, 0xb1, 0x4b, 0xc2, 0x6e, 0x95, 0x85, 0x4b, 0xec, 0x9a, 0x85, 0xfb, 0x85,
	0x04, 0x28, 0x4a, 0xf3, 0x9d, 0xeb, 0xeb, 0xa3, 0x53, 0x84, 0xba, 0x42, 0x7e, 0xee, 0xb7, 0xe0,
	0x46, 0xfc, 0xb8, 0xa0, 0x35, 0x0a, 0x90, 0x35, 0x74, 0xd3, 0x35, 0x69, 0x51, 0x5c, 0x06, 0x12,
	0x4f, 0x8f, 0xe5, 0x44, 0xed, 0xff, 0x65, 0x01, 0x45, 0xaf, 0xdb, 0xfd, 0xda, 0xd5, 0x29, 0x9b,
	0x8a, 0xad, 0xba, 0xb0, 0x27, 0xa8, 0xc9, 0xb1, 0x4d, 0xc2, 0x10, 0xae, 0x2b, 0x5e, 0x8f, 0x57,
	0x96, 0xab, 0x4c, 0x92, 0xec, 0x86, 0x7a, 0x57, 0x9c, 0x90, 0x16, 0xdd, 0xec, 0x5b, 0x90, 0x3b,
	0xc3, 0x8e, 0x4b, 0xd3, 0xd6, 0xcc, 0xe8, 0x67, 0x49, 0xfb, 0xc8, 0xb2, 0xd1, 0xb7, 0x45, 0x16,
	0xcd, 0x46, 0xd3, 0x6b, 0x1e, 0x31, 0xd6, 0xb0, 0xe7, 0x15, 0x87, 0x05, 0x71, 0x57, 0xa8, 0x9a,
	0xab, 0x7c, 0x9c, 0x6b, 0x19, 0x98, 0xe5, 0xb9, 0x60, 0xa3, 0xa4, 0xc9, 0x1c, 0x61, 0xe4, 0xc1,
	0xa3, 0x1a, 0x14, 0x2f, 0x8c, 0xe5, 0xc4, 0xf2, 0x34, 0x4a, 0x81, 0x2a, 0xdf, 0x40, 0x9f, 0x5f,
	0x6d, 0x53, 0xdc, 0xb2, 0xda, 0xe6, 0x09, 0x14, 0xcf, 0x0d, 0x6b, 0x32, 0x59, 0x1a, 0xab, 0x64,
	0x63, 0xe8, 0xf4, 0x35, 0xc2, 0x1a, 0x07, 0x8f, 0x97, 0x9a, 0xa1, 0x13, 0x46, 0x7b, 0x8e, 0xc5,
	0x6c, 0xac, 0x30, 0x0f, 0x6a, 0xc3, 0x9e, 0x50, 0x9a, 0xc3, 0x77, 0x78, 0x8b, 0x04, 0xa4, 0x2c,
	0x60, 0xb1, 0xdd, 0x7d, 0x19, 0xf2, 0xc4, 0x5c, 0xd9, 0x78, 0xe9, 0xb0, 0x53, 0xeb, 0xb4, 0x9a,
	0x9b, 0x6b, 0x2f, 0x54, 0xd2, 0x46, 0x32, 0x24, 0x17, 0xd6, 0x39, 0x55, 0x33, 0x39, 0x95, 0x3c,
	0xa2, 0x7b, 0x90, 0xfb, 0xec, 0x72, 0x6e, 0x4d, 0xf4, 0x29, 0xe6, 0xc5, 0xea, 0xa2, 0x9c, 0x7f,
	0xc2, 0x87, 0x54, 0x1f, 0xa8, 0xf6, 0x53, 0x09, 0xae, 0xc5, 0x7d, 0x10, 0x7a, 0x15, 0x6e, 0x11,
	0xb1, 0x19, 0xc7, 0x0d, 0xb2, 0x7b, 0x5f, 0x4f, 0x14, 0xf5, 0xd9, 0xb8, 0xdb, 0x7f, 0xca, 0x4e,
	0x92, 0xc9, 0x43, 0x02, 0x95, 0x01, 0x4e, 0x94, 0xc3, 0xce, 0xe9, 0x09, 0x1d, 0x48, 0x12, 0xeb,
	0xcc, 0xda, 0x72, 0x0a, 0x55, 0xa0, 0xc0, 0xc7, 0xda, 0x9d, 0x56, 0x9b, 0xa5, 0xf6, 0xe8, 0x53,
	0x06, 0x95, 0x20, 0x4f, 0x67, 0xa3, 0xcd, 0x2c, 0x8d, 0xd3, 0xe3, 0xb8, 0x7f, 0x73, 0x9c, 0x1e,
	0x76, 0x2e, 0xb6, 0x8b, 0xd3, 0xa3, 0x58, 0x3c, 0x4e, 0xff, 0x99, 0x04, 0x95, 0xd0, 0xe0, 0xce,
	0x71, 0x7a, 0x08, 0x5f, 0x6c, 0x47, 0x52, 0x5c, 0xfb, 0x31, 0x83, 0x82, 0xf2, 0x4a, 0x83, 0xd4,
	0x64, 0x85, 0x81, 0x47, 0x72, 0xa2, 0xb6, 0x80, 0x9c, 0xb7, 0x99, 0x84, 0x0b, 0x4c, 0xeb, 0x2d,
	0xba, 0xa4, 0x9c, 0x4a, 0x1e, 0x59, 0xcf, 0x03, 0xba, 0x1e, 0xda, 0xf3, 0x80, 0x4a, 0xa5, 0xf5,
	0xe0, 0x11, 0xf7, 0x58, 0xe8, 0x33, 0xe9, 0xfb, 0xbe, 0xb1, 0x64, 0xe7, 0x17, 0x39, 0x95, 0x3e,
	0xa3, 0x2a, 0x64, 0x4d, 0xbc, 0x74, 0x6d, 0xcd, 0xe0, 0x31, 0xa8, 0xd7, 0xac, 0xfd, 0x95, 0x04,
	0xd7, 0xe2, 0x54, 0x03, 0xf1, 0x1e, 0x0d, 0xfd, 0x07, 0x4b, 0xff, 0xb0, 0x74, 0x5d, 0xf1, 0x0a,
	0x03, 0x42, 0x6f, 0x40, 0x72, 0x6a, 0x5f, 0xc6, 0x1c, 0x05, 0x79, 0x46, 0x48, 0x25, 0xe3, 0xe8,
	0x6b, 0x90, 0x76, 0x0c, 0xcd, 0x74, 0x37, 0x1e, 0x03, 0xa9, 0x0c, 0x06, 0xdd, 0x83, 0x2c, 0xaf,
	0xd0, 0x8b, 0x29, 0x5f, 0x15, 0xc0, 0x3d, 0xa8, 0xda, 0xf7, 0xa0, 0x14, 0xb8, 0x25, 0xed, 0x6b,
	0x2d, 0x49, 0xd0, 0x5a, 0x0a, 0x54, 0xfc, 0xbb, 0xd3, 0x63, 0xdd, 0xc5, 0xf3, 0xb8, 0xfb, 0xfa,
	0xfe, 0x34, 0x1d, 0x17, 0xcf, 0x79, 0xc4, 0x20, 0x76, 0x39, 0xb5, 0x7f, 0x4a, 0xc3, 0x5e, 0x04,
	0x2a, 0x62, 0x5f, 0x7c, 0x2d, 0x9e, 0x08, 0xde, 0xc3, 0x40, 0x34, 0x12, 0xb4, 0x35, 0x17, 0xd3,
	0xab, 0x21, 0x33, 0x6b, 0x69, 0x6f, 0x26, 0x49, 0x85, 0x20, 0xa8, 0x9a, 0x8b, 0x07, 0xd8, 0x6e,
	0x5b, 0x4b, 0xea, 0x39, 0x51, 0x9d, 0xc8, 0x0f, 0x24, 0xa9, 0xde, 0x6b, 0x04, 0x8e, 0x99, 0x0f,
	0x36, 0x7d, 0xcf, 0xaa, 0x27, 0x64, 0xe1, 0xda, 0x70, 0x7d, 0xea, 0xdd, 0x2e, 0x65, 0x8b, 0x9b,
	0xeb, 0xe6, 0xd2, 0x2f, 0x9a, 0x5a, 0xb3, 0x3c, 0x34, 0xe5, 0x57, 0x4b, 0xc9, 0xfa, 0x4e, 0x28,
	0x02, 0xfa, 0x08, 0x4a, 0x7e, 0xc1, 0xdd, 0x0c, 0x6b, 0x6e, 0xcc, 0xe9, 0x97, 0x77, 0x77, 0xae,
	0x8d, 0x35, 0x97, 0x07, 0x3d, 0x42, 0x0f, 0x7a, 0x0c, 0xd7, 0x99, 0x8b, 0xac, 0x9d, 0x39, 0x96,
	0xbd, 0xe0, 0x4a, 0xd7, 0xc5, 0x3c, 0x72, 0xba, 0xe2, 0xce, 0xeb, 0x3e, 0xc5, 0xad, 0xfb, 0xa8,
	0x64, 0x75, 0x6b, 0xae, 0x02, 0x97, 0xb9, 0x76, 0xf0, 0x0e, 0x95, 0x60, 0xd3, 0xb7, 0x96, 0x38,
	0x30, 0x3f, 0x4c, 0xfa, 0x1a, 0x64, 0x3e, 0xc5, 0xfa, 0xc5, 0xcc, 0xdd, 0x50, 0xd8, 0xa1, 0x72,
	0x10, 0xe2, 0xac, 0x19, 0x96, 0xe3, 0x6c, 0x2c, 0xeb, 0x50, 0x29, 0x48, 0xed, 0xff, 0x48, 0x02,
	0x83, 0x79, 0x9b, 0x14, 0xcc, 0x88, 0xb6, 0xbb, 0x23, 0x76, 0x3d, 0xc6, 0xbf, 0x53, 0x4b, 0x55,
	0x75, 0xb7, 0x7e, 0x3a, 0x52, 0x54, 0xda, 0x4e, 0x12, 0xf5, 0xdc, 0x50, 0x95, 0xa7, 0xe3, 0x63,
	0x65, 0x34, 0xea, 0x2a, 0x72, 0x8a, 0x28, 0x65, 0x5e, 0x19, 0x48, 0x0f, 0x62, 0x64, 0x28, 0xd6,
	0x5b, 0x9d, 0x5e, 0x6b, 0xfc, 0x44, 0x19, 0x0e, 0x95, 0xae, 0x9c, 0x41, 0xd7, 0x40, 0x66, 0x15,
	0x82, 0x42, 0x6f, 0xb6, 0xf6, 0x27, 0x12, 0xc8, 0xe1, 0xed, 0x5a, 0xa3, 0x38, 0x0f, 0x03, 0x8a,
	0xf3, 0xfe, 0x86, 0xfd, 0x0e, 0x74, 0x84, 0x54, 0x67, 0x1d, 0xae, 0xc5, 0x8d, 0x86, 0xae, 0x08,
	0xd5, 0xbb, 0x2d, 0x9e, 0x15, 0xfe, 0xf8, 0xb8, 0x75, 0xcc, 0x2e, 0x42, 0x34, 0x46, 0xa7, 0xdd,
	0xc6, 0x91, 0x9c, 0xac, 0xfd, 0x28, 0x01, 0x37, 0xe2, 0x6f, 0x81, 0x6d, 0x55, 0x59, 0xff, 0x21,
	0x54, 0xd8, 0x5d, 0x31, 0x3c, 0x1d, 0x6f, 0x71, 0x7a, 0xad, 0x96, 0x3d, 0x68, 0xce, 0x19, 0x57,
	0xe7, 0x2e, 0xe2, 0x9d, 0xbc, 0x63, 0xd8, 0xf3, 0xef, 0xa8, 0x8d, 0x59, 0x3e, 0xcb, 0xfb, 0x71,
	0x8d, 0xd7, 0xe2, 0xee, 0xb7, 0x3d, 0xa1, 0x20, 0xcc, 0xd3, 0x58, 0x04, 0x3b, 0x9d, 0xda, 0xaf,
	0x32, 0xb0, 0x1f, 0x03, 0x19, 0x21, 0xc0, 0xc7, 0x81, 0xba, 0xaf, 0x77, 0x36, 0xbf, 0x27, 0xae,
	0x4f, 0xf0, 0xbf, 0x22, 0x99, 0x8e, 0xe4, 0x0e, 0x99, 0x8e, 0xb8, 0x4a, 0x8b, 0x2f, 0x40, 0x91,
	0xd3, 0x76, 0x3c, 0xf5, 0x0a, 0x3f, 0xf3, 0x6a, 0x81, 0xf7, 0x1d, 0x12, 0xc1, 0x0e, 0xe4, 0x63,
	0x32, 0xdb, 0xe4, 0x63, 0x3e, 0x77, 0x02, 0xf5, 0x3d, 0x28, 0xb1, 0x5d, 0xf1, 0xb8, 0x62, 0x63,
	0x79, 0x67, 0x91, 0xc1, 0x72, 0x9e, 0xf8, 0x0a, 0x54, 0x38, 0xee, 0x0f, 0x96, 0x9a, 0xe9, 0x7a,
	0xd7, 0x44, 0x25, 0xb5, 0xcc, 0xba, 0x1f, 0xf3, 0xde, 0x30, 0xf3, 0x40, 0x94, 0x79, 0xc4, 0x94,
	0x50, 0x61, 0xeb, 0x3c, 0xae, 0x78, 0x08, 0x5f, 0x8c, 0xde, 0x12, 0x8d, 0xcd, 0xf8, 0x94, 0x7e,
	0xad, 0x3c, 0x6e, 0x79, 0x9b, 0xec, 0x53, 0x4c, 0x16, 0xaf, 0xb2, 0x6b, 0x16, 0xaf, 0x36, 0x81,
	0x9b, 0x6b, 0x18, 0x33, 0xa8, 0x37, 0x8f, 0x95, 0x16, 0x4b, 0x31, 0x35, 0xfa, 0x54, 0x29, 0xd2,
	0x13, 0xb5, 0x66, 0x7d, 0x78, 0xcc, 0xef, 0xad, 0xd7, 0x7b, 0xc7, 0x72, 0x8a, 0x5e, 0xc3, 0xee,
	0xa8, 0xc7, 0x9d, 0x1e, 0xbb, 0xfd, 0xcf, 0x4e, 0xae, 0x33, 0xb5, 0x5f, 0x64, 0x00, 0x45, 0x7f,
	0x0d, 0x25, 0x26, 0xb5, 0x2c, 0x84, 0x63, 0x89, 0x88, 0xe5, 0x6b, 0x5b, 0x8b, 0xb5, 0xa1, 0x58,
	0x9b, 0x8b, 0x62, 0x32, 0x12, 0x3e, 0x47, 0xdf, 0x1b, 0xd3, 0x25, 0x08, 0xe2, 0x7b, 0x50, 0x20,
	0x7e, 0xc6, 0xc4, 0x32, 0x5d, 0x6c, 0xba, 0xdc, 0x8b, 0x12, 0x4f, 0xc2, 0xfb, 0xba, 0xd1, 0x64,
	0x83, 0x8c, 0xcb, 0x2d, 0xbf, 0x8d, 0xde, 0x85, 0xe2, 0x82, 0x05, 0x32, 0x63, 0xc3, 0x72, 0xdc,
	0x98, 0xb2, 0xf7, 0x40, 0x0d, 0x20, 0x87, 0xed, 0x5a, 0x8e, 0x7b, 0x55, 0xf1, 0x53, 0xb0, 0xf0,
	0x2c, 0xbb, 0x6d, 0xe1, 0x59, 0xa0, 0x82, 0x2f, 0xb7, 0x65, 0x05, 0x5f, 0x9c, 0xbd, 0x5f, 0x25,
	0x79, 0x20, 0x90, 0xe4, 0xb9, 0x03, 0x05, 0x67, 0x79, 0xe6, 0xb8, 0xba, 0xbb, 0x74, 0xfd, 0xaa,
	0x16, 0xb1, 0xcb, 0xaf, 0xed, 0x2b, 0xc6, 0xd4, 0xf6, 0x95, 0xb6, 0xaf, 0xed, 0x13, 0xb3, 0x08,
	0xe5, 0x50, 0x16, 0xc1, 0x37, 0x09, 0x15, 0x31, 0x03, 0xf4, 0xa7, 0x12, 0xdc, 0x88, 0xdf, 0x69,
	0xf4, 0x3a, 0xbc, 0x4c, 0x23, 0xba, 0xf8, 0x61, 0x66, 0x26, 0xeb, 0x6a, 0xff, 0xa4, 0x2e, 0x4b,
	0xc4, 0xf6, 0x37, 0x3a, 0xa3, 0x91, 0xa2, 0x76, 0x7a, 0x2d, 0x66, 0x2b, 0x8f, 0xba, 0xf5, 0x27,
	0x7d, 0x55, 0x4e, 0xa2, 0x7d, 0xa8, 0x50, 0xa8, 0xf1, 0x0a, 0x20, 0x45, 0x5c, 0x01, 0xbf, 0x39,
	0xe6, 0xa0, 0xcc, 0x65, 0xa0, 0xa0, 0xbc, 0x27, 0x83, 0x6e, 0xc3, 0x8d, 0x10, 0xb2, 0x37, 0x96,
	0xad, 0xbd, 0x00, 0x39, 0xcc, 0xec, 0xff, 0x4d, 0x39, 0xab, 0x7f, 0x49, 0x43, 0x39, 0xc8, 0xe0,
	0xe8, 0x11, 0x14, 0x16, 0x96, 0x71, 0xb9, 0x98, 0x61, 0xd3, 0x32, 0x9c, 0x2b, 0x8a, 0x27, 0x44,
	0x50, 0x74, 0x1f, 0xae, 0xbb, 0x96, 0xab, 0x19, 0x63, 0x22, 0x50, 0x73, 0x83, 0x7a, 0xc6, 0x6f,
	0xdd, 0xbf, 0xef, 0x15, 0x1f, 0xee, 0xd1, 0xc1, 0xbe, 0x6e, 0x9c, 0x18, 0x03, 0x6c, 0x93, 0x01,
	0xf4, 0x10, 0xf2, 0xe7, 0x9a, 0x6d, 0x62, 0x07, 0x9b, 0x57, 0x15, 0xbf, 0xae, 0x00, 0xd1, 0x03,
	0xc8, 0x19, 0xfa, 0xdc, 0x32, 0x09, 0xd2, 0xe6, 0x44, 0xb3, 0x0f, 0x87, 0xbe, 0x0e, 0x69, 0x13,
	0xdb, 0x96, 0x71, 0x85, 0x8c, 0x32, 0x20, 0xf2, 0x86, 0x0b, 0x6c, 0x6b, 0xa6, 0x6e, 0x19, 0x31,
	0x07, 0x8e, 0x81, 0x37, 0x78, 0x70, 0xc4, 0xd6, 0x9c, 0x8d, 0x17, 0x3a, 0x5d, 0xd5, 0x66, 0x81,
	0xcd, 0x9e, 0x0d, 0x28, 0x18, 0xfb, 0x10, 0x53, 0x33, 0x2c, 0xcb, 0xb8, 0x4a, 0x5a, 0x3d, 0x38,
	0xf4, 0x01, 0x94, 0x26, 0x9a, 0x7d, 0x69, 0x2d, 0x66, 0x97, 0x86, 0x41, 0xde, 0xb5, 0xb9, 0x2a,
	0x35, 0x08, 0xcc, 0xee, 0x6b, 0xcf, 0x96, 0xf3, 0xa5, 0x61, 0x99, 0x57, 0x25, 0xa2, 0x04, 0x48,
	0xc2, 0x14, 0x2f, 0x34, 0xd3, 0x9d, 0x91, 0x1e, 0xcb, 0x88, 0xb1, 0xa5, 0x01, 0xa6, 0x10, 0x40,
	0xc9, 0x37, 0xd2, 0x59, 0xc8, 0x52, 0x8b, 0x9b, 0xbf, 0xd1, 0x83, 0xa3, 0x05, 0x28, 0x97, 0x64,
	0xc0, 0xb3, 0xab, 0xeb, 0x2b, 0x71, 0x18, 0x18, 0x3a, 0x80, 0x0c, 0x27, 0xfd, 0xe6, 0x34, 0x36,
	0x87, 0xaa, 0xfd, 0x5b, 0x1a, 0xf2, 0xfe, 0x0f, 0x6e, 0x45, 0x0c, 0x93, 0x70, 0xd1, 0x22, 0xb1,
	0xcb, 0x45, 0x0b, 0xe1, 0xfe, 0x4c, 0xf2, 0xf3, 0xde, 0x9f, 0x49, 0xed, 0x74, 0x7f, 0x26, 0xee,
	0xe0, 0x33, 0x70, 0x21, 0x26, 0xb3, 0xf3, 0x85, 0x98, 0xd5, 0x55, 0x91, 0xec, 0x6e, 0x57, 0x45,
	0xbc, 0x0b, 0x31, 0xb9, 0xad, 0x2f, 0xc4, 0x88, 0xb7, 0xa6, 0xf2, 0x9f, 0xf7, 0xd6, 0x14, 0xec,
	0x72, 0x6b, 0xea, 0xd7, 0xb9, 0xf0, 0x23, 0x9a, 0xa4, 0x62, 0xc8, 0x24, 0xfd, 0x27, 0x5c, 0xed,
	0xf1, 0x6e, 0x6c, 0x95, 0x77, 0xb9, 0xb1, 0xb5, 0xba, 0x9e, 0x53, 0xd9, 0xfe, 0x7a, 0xce, 0xdd,
	0x09, 0x54, 0x42, 0xb9, 0x7b, 0x54, 0x85, 0x6b, 0xd4, 0x44, 0x86, 0xfa, 0xe5, 0x97, 0x88, 0x05,
	0xec, 0x76, 0x1e, 0x9f, 0x76, 0x0e, 0x59, 0xb6, 0xf3, 0x50, 0x7d, 0xc6, 0x7e, 0x9b, 0x67, 0xd8,
	0xad, 0xf7, 0x46, 0x72, 0x12, 0x15, 0x20, 0xdb, 0x3c, 0xed, 0xd2, 0x5f, 0xbd, 0xa2, 0xe5, 0x8b,
	0x87, 0xaa, 0xd2, 0x1a, 0xca, 0xe9, 0xbb, 0x7f, 0x27, 0x05, 0xde, 0x42, 0x6d, 0x4b, 0xcc, 0x5b,
	0xb8, 0x05, 0xce, 0x42, 0xb2, 0xde, 0x55, 0x58, 0xa8, 0xde, 0xa8, 0x37, 0x89, 0x85, 0xac, 0xb3,
	0xf7, 0x34, 0x54, 0x65, 0x44, 0xde, 0x53, 0x82, 0x7c, 0xb3, 0x5d, 0x3f, 0x19, 0xd4, 0x5b, 0x3d,
	0xfe, 0xa6, 0xe3, 0x27, 0x4a, 0x87, 0xff, 0xee, 0x54, 0xb7, 0xde, 0x1c, 0xf5, 0xd9, 0xef, 0x0e,
	0x74, 0xeb, 0x2d, 0x45, 0x95, 0xb3, 0x34, 0x21, 0x5b, 0xef, 0xf6, 0xc9, 0x48, 0xa7, 0x29, 0xe7,
	0xd0, 0x1e, 0x94, 0x4e, 0x3a, 0xdf, 0x55, 0x0e, 0xc7, 0xde, 0x6a, 0xf3, 0xe8, 0x16, 0x5c, 0xa7,
	0x2e, 0x6b, 0x64, 0x3d, 0x40, 0x4b, 0xc9, 0x94, 0xc3, 0x4e, 0x5f, 0x2e, 0xa0, 0x0a, 0x14, 0x86,
	0x83, 0x7e, 0x6f, 0x54, 0xef, 0x29, 0xfd, 0xd3, 0xa1, 0x5c, 0xf4, 0xcb, 0x31, 0x4b, 0x77, 0x5d,
	0xb8, 0x1e, 0x5b, 0x8c, 0x1e, 0x8c, 0xc0, 0x87, 0x83, 0x4e, 0x53, 0x61, 0xde, 0xf4, 0x51, 0xa7,
	0xc7, 0xfc, 0x8a, 0x0a, 0x14, 0x9e, 0xd6, 0x47, 0x8a, 0x3a, 0xae, 0xb7, 0x14, 0x4a, 0xc6, 0x1c,
	0xa4, 0xda, 0x8a, 0xda, 0xe0, 0x4e, 0xb5, 0xe7, 0x47, 0x90, 0x57, 0xf5, 0xfb, 0x87, 0x81, 0x5f,
	0x54, 0xb8, 0xfb, 0x87, 0x12, 0xec, 0xc7, 0x1c, 0x4e, 0xa2, 0x57, 0xa0, 0x4a, 0xa9, 0x1b, 0x33,
	0xc6, 0xee, 0x45, 0x1e, 0xaa, 0xcf, 0xc6, 0xde, 0xef, 0x7d, 0x48, 0xe2, 0x8f, 0x7f, 0xb0, 0x1f,
	0x5b, 0xa2, 0x3f, 0xf3, 0x41, 0x7f, 0x1b, 0x61, 0x78, 0xda, 0xaa, 0xab, 0x8c, 0xc8, 0x47, 0xea,
	0x69, 0x67, 0xc4, 0x88, 0xfc, 0xf1, 0x29, 0xf9, 0x0e, 0xba, 0x94, 0x76, 0xbf, 0xa7, 0x3c, 0x93,
	0xb3, 0xe8, 0x55, 0xb8, 0xc5, 0x28, 0x18, 0xf7, 0xce, 0xdc, 0xdd, 0x4b, 0x80, 0xd5, 0x11, 0x2d,
	0xf1, 0x9f, 0xe8, 0xfa, 0x56, 0x5d, 0xbc, 0x3a, 0xb6, 0x3e, 0x54, 0xd8, 0x7a, 0x9a, 0x75, 0xb5,
	0x7e, 0xa2, 0x74, 0x7d, 0xbf, 0xeb, 0x58, 0x39, 0x64, 0x1c, 0xa6, 0xf6, 0xeb, 0xc3, 0x91, 0x72,
	0xc8, 0x72, 0x33, 0xc3, 0x81, 0xd2, 0xec, 0xd4, 0xbb, 0xa3, 0x67, 0xec, 0x87, 0xa0, 0x86, 0x27,
	0x7d, 0x02, 0x47, 0x7f, 0xcd, 0xa4, 0x7e, 0xf8, 0xf1, 0x69, 0xaf, 0x39, 0x92, 0xb3, 0x77, 0x7f,
	0x2c, 0x01, 0x8a, 0x7a, 0x97, 0xe8, 0x65, 0xb8, 0x49, 0xd7, 0x10, 0x1d, 0x92, 0x5f, 0x42, 0xaf,
	0xc1, 0x6d, 0x4e, 0x91, 0xb8, 0x71, 0x56, 0x58, 0xa7, 0xd4, 0x8f, 0xd8, 0x4f, 0x61, 0x90, 0xa7,
	0xa7, 0xca, 0x88, 0xa5, 0xfa, 0x07, 0x4a, 0xb7, 0xab, 0x8c, 0xd8, 0xe6, 0x0d, 0xfa, 0x4f, 0x0f,
	0xbd, 0x02, 0xde, 0x41, 0xf7, 0xb4, 0x25, 0x67, 0x1a, 0x4f, 0xe1, 0xc6, 0xc4, 0x9a, 0x0b, 0xb2,
	0x49, 0xff, 0x9e, 0x2d, 0xcf, 0x07, 0xd2, 0x27, 0xaf, 0x5d, 0xe8, 0xee, 0x6c, 0x79, 0x76, 0x30,
	0xb1, 0xe6, 0xf7, 0x7c, 0x80, 0xd5, 0xd3, 0xbf, 0x4a, 0xd2, 0xef, 0x27, 0x12, 0x8d, 0xc1, 0x1f,
	0x25, 0x50, 0x03, 0x63, 0x7b, 0xc0, 0x4c, 0x1a, 0x47, 0x3f, 0xcb, 0x50, 0x98, 0xb7, 0xff, 0x23,
	0x00, 0x00, 0xff, 0xff, 0x41, 0x8e, 0xe7, 0x4e, 0x8b, 0x55, 0x00, 0x00,
}
